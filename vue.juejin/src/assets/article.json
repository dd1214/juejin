[
    {
        "article_id": "7136214855777779749",
        "cover_image": "https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/897ed2f96d5b4144bdeeab68e65c9690~tplv-k3u1fbpfcp-watermark.image?",
        "title": "人生中的第一次被辞退",
        "brief": "2022年8月26日下午5点半得到的通知，有10天的缓冲但没有补偿，理由是没有没有过试用期，离试用期还有10天。 一、咋进的公司？ 公司与甲方签的一个单子快到时间了公司没人写，没怎么面试问了我以前写的",
        "ctime": "1661529573",
        "mtime": "1665845078",
        "user_name": "vue工程师",
        "avatar": "https://p26-passport.byteacctimg.com/img/user-avatar/0f831df7178b3c0b35cf9e8fd3c372c1~300x300.image",
        "content": "2022年8月26日下午5点半得到的通知，有10天的缓冲但没有补偿，理由是没有没有过试用期，离试用期还有10天。<br>\\n一、咋进的公司？<br>\\n公司与甲方签的一个单子快到时间了公司没人写，没怎么面试问了我以前写的项目就让我通过了，工资是不打折的。<br>\\n二、进公司干了啥？<br>\\n目前是80天，30天开发后台管理（81张设计稿，60个接口,vue写的），10天修改后台管理第二版，后面40天就是噩梦了，维护前后端不分离的和前后端分离的jq。(时间只是大概，具体不记得了)<br>\\n\\n三、辞退原因<br>\\n公司给的原因：维护开发效率太低。<br>\\n个人认为的原因：\\n<br>1、之前没接触jq（进来前没说用jq和要维护前后端不分离的项目）。之前那哥们是一毕业就在这家公司写了两年半jq工资没加第二年还降了，与之相比我这之前没接触jq项目的，我维护的效率比他低（是从领导嘴里说的，末尾还加句不要觉得我在pua你）。<br>\\n2、状态不好。我加了上个前端的微信，他当时走了2个月但他现在还没找到工作在家学习vue，我离职了他都没找到工作，这jq我越写越焦虑，我怕有一天忘记vue、react、uniapp就只会jq，简历上全是jq项目我下份工作怎么找。在这种焦虑中工作不在状态想离职但又怕找不到工作，有点摆烂（这里指我正常工作正常下班）。<br>\\n四、感受<br>\\n1、失落。居然被这样一份工作辞退，开始怀疑自己能不能干这行业，自己怕不是个垃圾(虽然确实是菜狗...)。<br>\\n2、担忧。目前了解到的找工作的前端，一个找了5个月在家学vue的（这公司上个前端），一个找了6个月的，一个找了2个月但找了比较好的工作，我丫的不会也找几个月吧（看来要练习一下捡瓶子，防止饿死）。<br>\\n3、解脱、丫的，终于10天后不用维护这些垃圾代码了，焯！！！爽！！！<br>\\n五、有什么打算？<br>\\n1、先到杭州见一下老朋友，当然也可能约不出来（尴尬），顺便去面试。<br>\\n2、回老家一趟，两年没回去想家了。<br>\\n3、去深圳<del>那个唯一叫我靓仔的地方</del>，之后可能就饿死在那。<br>\\n六、后续<br>\\n1、**上一个前端**：找到了一个外派的工作，但工资有点低，2年半经验8.5k,还是找了半年的结果（微信跟我说的）<br>\\n2、**接替我工作的前端**：干了一个月离职了，“这年头谁还手搓js啊”（这是原话）,她更狠不知道她是不是后面直接没用jq了...<br>\\n3、**我**：目前在一个18人的研发团队里做前端（目前还在扩招），工资不错，一天6个半小时工作时间没加过班不打卡（来这25天没加过一分钟班），公司很大有自己的食堂，项目都是新的自己选择框架和技术，自己格外珍惜这份工作，希望后面能转正（如来佛祖，太上老君，耶稣...都来保佑我转正，哈哈哈）。<br>\\n4、**上一家公司**：感觉上家公司的那个领导（是个后端不懂前端）挺缺德的，我都明确问了要什么框架，说是随便用，**接替我工作的前端**她也被蒙在鼓里。那个领导直接说明，估计90%的前端不会来，前后端不分离的项目，工资还低。\\n\\n"
    },
    {
        "article_id": "7154262556230549512",
        "cover_image": "",
        "title": "JetBrains再出手，这次要干翻 VS Code了？？？？",
        "brief": "这几天，JetBrains Fleet 可以说是闹的沸沸扬扬，官方的态度很明确，我们是下一代 IDE，使用了 IntelliJ 代码处理引擎，并且是建立在 20 年的 IDE 开发经验的基础之上。 听",
        "ctime": "1665731598",
        "mtime": "1665752544",
        "user_name": "沉默王二",
        "avatar": "https://p6-passport.byteacctimg.com/img/user-avatar/b6bfc3ccd6d610412b216b9c346ef533~300x300.image",
        "content": "\\n\\n\\n这几天，JetBrains Fleet 可以说是闹的沸沸扬扬，官方的态度很明确，我们是下一代 IDE，使用了 IntelliJ 代码处理引擎，并且是建立在 20 年的 IDE 开发经验的基础之上。\\n\\n>Built from scratch, based on 20 years of experience developing IDEs. JetBrains Fleet uses the IntelliJ code-processing engine, with a distributed IDE architecture and a reimagined UI.\\n\\n听起来口气就很大，网上也是铺天盖地吹。今天我也来体验一把，看看这玩意到底能不能干掉 VScode，毕竟微软的 VScode 在轻量级这方面就是妥妥的标杆，Fleet 到底牛不牛逼，肯定是要以 VScode 作为参照的，对吧？\\n\\n## 下载安装Fleet\\n\\n直接搜 JetBrains 关键字，就可以看到 Fleet 的搜索结果。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8cc8bd50d369411bb369bf810453fd03~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n直接戳过去就可以看到下载的按钮了，（注意，目前是公测版）。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d65a002ee5c0467792c0d490a20f990d~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n接下来，映入眼帘的就应该是 Fleet 的代码编辑页面了。说实话，光看这张宣传图，确实挺惊艳的。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b0632451da14d1cabffb1866dadb2e9~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n接着进入 download 页面，可以看到安装 Fleet 需要提前先安装 Toolbox App，\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a6a81159381f4845a52274a35b349de5~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n没啥好说的，直接下载安装就 OK 了。接着启动 Toolbox，就可以看到 Fleet 了。说实话，这个 Toolbox 感觉还真的挺不错的，里面把我之前安装的 Intellij IDEA 社区版和旗舰版都显示出来了，并且提示我要更新（可我是有私心的，旗舰版肯定是不会更新的😂）。\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38ce58d0662a48b78b01f518e199372e~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n直接点击安装，就可以看到 Fleet 的安装进度条了（下载速度并不算快🤮）。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d33ad8785864b7d93a02f54b83da838~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n稍等片刻。等安装完成后，点一下就可以启动 Fleet 了。第一次启动后的界面如下所示。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a74b5320d5494ccca0cb329198c43eec~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n挺人性化的，提供了 Git、SSH、Docer 等链接方式。但不得不吐槽的事，Git 的方式还不够流畅，需要先去 generate 一个 token 才行。\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/718b7bdeb8f44497af91914d8fe2ef4c~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n与其这样，不如直接使用 GitHub 桌面版把代码导入到本地，然后再直接打开本地代码库（😂）。\\n\\nOK，打开一个我们四剑客团队正在研发的一个新项目。整个打开的过程还是非常快的，比起 Intellij IDEA，确实要快很多很多很多很多。\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbd38c2488c4449287b862a07ce48447~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n\\n\\n## 智能化模式\\n\\n紧接着，Fleet 会提示我们开启智能化代码分析，OK，开启它。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b573c2555564e919b8477967642dcc6~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n开启的过程会去加载蛮多东西的，比如说 JDK、Maven 等等，需要比较久的时间。这一点还是非常牛逼的，要换成是 Intellij IDEA 的话，在正式开发之前，必须得自己先配置好 JDK、Maven，对吧？\\n\\n这下可好，Fleet 直接帮我们搞定了。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9c73b02d2c94be7b2d0bacbae0fa2d0~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n加载完成后，代码的高亮颜色也会发生一些改变，更加丰富了。\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7628ee3e610a452182e05bd64ab2fc05~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n开启智能化模式后，Fleet 就具备了**智能补全、重构、导航、调试、实时代码质量检查、快速修复**的所有功能，如果只是普通的文本编辑，则可以一键关闭智能化模式。\\n\\nOK，我们找到主类，然后运行看一下效果。（第一次竟然要下载 kotlin、jps standalone 等等玩意，还失败了😂，不过第二次重新运行就 OK 了）\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ceafe8e00a2a46858ca05d271c7aec06~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n当然了，如果你没有启动智能化模式，只需要轻点右上角的「闪电」小图标就 OK 了。否则，主类会没有可运行按钮。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/478498306ea640e28a62116e475474a5~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n\\n## 搜索与导航\\n\\nFleet 提供了多种搜索和导航工作区的方法，允许我们快速查找文件、文件中的位置等等。只需要点击右上角的搜索🔍图标就可以打开了。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/74c73ec1415b44e58788567d7125fa33~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n如果不清楚该干嘛，还可以切换到 action 面板，实现快速操作，比如说后退到上一步。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b1d18fba87b47089f646db3154ee4fc~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n\\n\\n\\n## 轻量级😂\\n\\nFleet 主打的是轻量级，对标的是 VS Code，那此时此刻，肯定有不少小伙伴很关心 Fleet 到底占用了多少内存。\\n\\nOK，刚好我电脑上也启动了 Intellij IDEA 旗舰版、VS Code，我们就来看一下，内存占用。\\n\\nIDEA 差不多 2 G，Fleet 是只占了 877M，但还有一个 fleet_backend 的进程占用了 1.95G，这样算下来，比 Intellij IDEA 还“重”啊！！！！！！！\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f494a28b620433684efd8a3660f17ef~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n再往下找一下 VS Code，好家伙，100M 不到。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d82845ec4734ad88ea80b19fb88ffb1~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n这。。。。。\\n\\n看到这么可怕的内存占用，估计会劝退不少小伙伴。但毕竟 Fleet 只是公测，还是要相信 JetBrains 的实力，它们应该不会忽视这样的问题。\\n\\n不过，虽然比较吃内存，但启动快到是真的挺快的。\\n\\n## 多语言支持\\n\\nFleet 既然对标的是 VS Code，那么多语言肯定也是要支持的呀。所以像 Python、Java、JavaScript、Go 等等这些常见的编程语言。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ebf784e75373409698824aa4f1bb1ec2~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n我体验了一下 JavaScript，支持得还是挺丝滑的，语法提示、语法高亮，都做的挺到位的。\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69fb6a1cba43486dac60018769d5f180~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n当然了，就目前的版本而言，Java、Kotlin、JavaScript、Python 等语言支持得比较友好（语法高亮、自动缩进、大括号匹配、自动导入包、智能空格、代码补全、类型定义、格式化、语法提示、错误警告⚠️、快速修复等等），CPP 这块还有待开发。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79584e3a83bf44199d36accff83dc27c~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n对于 Java 开发者来说，Fleet 支持得还是非常值得投入感情的，Intellij IDEA 拥有的功能 Fleet 也都拥有了，就连 yaml 也能很好的支持。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70aded8219254714a8f4dff5eadfb7aa~tplv-k3u1fbpfcp-zoom-1.image)\\n\\ndebug 模式的调试也非常舒服，快捷键和 Intellij IDEA 也一样。\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28eea26c41eb42f6a0b1341f683ede4d~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n\\n## 版本控制\\n\\nFleet 对版本控制的集成也更加方便，直接在左侧就有一个 Git 的 tab，进入该 tab，然后选择要提交的文件，填入 commit 的信息，就可以提交了。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb19d85971df4262963eb0a5bb540f94~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n感觉比 Intellij IDEA 便捷，有没有？点击「history」面板还可以查看版本历史。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39b5c08be4d84e3992b2da4ca09888eb~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n\\n## 云开发\\n\\nFleet 旨在打造轻量级、云协作开发，那云开发这块也是蛮重要的。Fleet 提供了多种方式，云空间、SSH、甚至 Docker。\\n\\nJetBrains 提供了免费的空间使用，我这里申请了一个，我们来体验一下。\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6d09fe4d2614d14851e03939c778382~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n在 space 选项中填入空间的 URL，之后填写邮箱名和密码就可以登录空间工作站了。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f4ddd9260db4b9d904424146c3ad20c~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n有点遗憾的是，空间站版本和 Fleet 版本不兼容，暂时打不开。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b436485d3a244a89896868499064bc0f~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n除了空间站，还可以在远程主机上安装 JetBrains Fleet，然后利用远程主机作为实际的工作空间，然后用 Fleet 作为客户端进行连接。不过也很遗憾，我这边一直初始化失败。\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a50a9e55e8a47a599e4ce79381b921e~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n等 Fleet 推出正式版再尝试吧（😭）。\\n\\n## 多人协作\\n\\n无论是本地还是远程，都可以轻松进行多人项目协作。只不过，和idea code with me 插件一样，也就懒得演示了，直接看官方给的 GIF 吧。\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/206dc1aaa10d4902a1b4b8073f79175e~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n## 设置\\n\\nFleet 的设置确实更加便捷一些，直接点击右上角的设置按钮就可以进入设置页面，尤其是修改主题时还有“所见即所得”的效果，选择一个主题就直接看到效果了，非常不错。\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3ff71f79f0d461e8c7d2b15f12c6e77~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n## ending\\n\\n整体体验下来，可以明显地感受出来，Fleet 这个公测版还有很多需要加强的地方，尤其是内存占用和云协作这块。除此之外，Fleet 作为一个轻量级的 IDE 还是够用了，尤其是对 Java 的编程支持的非常 nice。\\n\\n如果只是简单的增删改查，包括 debug，基本上是可以替代 Intellij IDEA 了。\\n\\n但 Fleet 这款产品的定位肯定不是取代自家产品 Intellij IDEA 的，而是对标微软的 VS Code，就我个人的使用体验来看，内存占用这块差距甚远，只有在 Java 这块感觉确实是有 20 多年 IDE 的开发经验，确实不错。\\n\\n总之，JetBrains 的产品值得期待。反正多一个顺手的免费工具，我是不介意的，😆\\n\\n没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟。\\n\\n**本文已收录到 GitHub 上星标 3.6k+ 的开源专栏《Java 程序员进阶之路》，据说每一个优秀的 Java 程序员都喜欢她，风趣幽默、通俗易懂。内容包括 Java 基础、Java 并发编程、Java 虚拟机、Java 企业级开发（Git、Nginx、Maven、Intellij IDEA、Spring、Spring Boot、Redis、MySql 等等）、Java 面试等核心知识点。学 Java，就认准 Java 程序员进阶之路**😄。\\n\\nGithub 仓库：[https://github.com/itwanger/toBeBetterJavaer](https://github.com/itwanger/toBeBetterJavaer)\\n\\n\\n\\nstar 了这个仓库就等于你拥有了成为了一名优秀 Java 工程师的潜力。\\n\\n\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/747fbe99ff7840ecb9026c97543f2462~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n\\n\\n\\n"
    },
    {
        "article_id": "7123922714200375332",
        "cover_image": "",
        "title": "一个30+大龄前端的2022年中总结（还贷，还情，还我金铲铲）",
        "brief": "作为一名30多岁的前端，并且只会前端的我来说，2022要总结的东西有很多，但总结起来其实就是一句话：工资不见往上涨，我还不敢往外闯",
        "ctime": "1658667536",
        "mtime": "1659010460",
        "user_name": "末世未然",
        "avatar": "https://p9-passport.byteacctimg.com/img/user-avatar/f0468eddaf02ec1ab8284257e0e5880d~300x300.image",
        "content": "---\\ntheme: cyanosis\\nhighlight: atom-one-dark\\n---\\n「时光不负，创作不停，本文正在参加[2022年中总结征文大赛](https://juejin.cn/post/7108989863126368286 \\\"https://juejin.cn/post/7108989863126368286\\\")」\\n\\n作为一名30多岁的前端，并且只会前端的我来说，2022要总结的东西有很多，但总结起来其实就是一句话：工资不见往上涨，我还不敢往外闯。\\n\\n# 房贷下来了\\n 去年1月份，我跟老婆商量着在市区买套房，但是看了看自己的腰包，以及首付4成需要准备太多钱了，咱们就放弃了，打算去郊区看看，没办法，实力不允许，只能退而求其次。于是几个周末都在了解各个楼盘，看了3个盘吧，咱们最后选择了第一个盘，并在去年6月签了购房合同。首付透支了我们的全部积蓄，还借了10w。我跟老婆工资都不高，但是在之后的半年里，竟然积攒了10w，是我们没有想到的，说是省吃俭用吧，也没有那么夸张，但是就比平时多攒了钱。做做兼职，写写页面，小的活500-1000，大点的3000-5000。那段时间确实攒了一些钱。\\n \\n 今年房贷下来了，每月交6000。对于我们这种普通家庭的人来说，压力是相当大的。但30多岁了，老婆怀孕快生了，每天还得做饭洗衣拖地，兼职的活也不敢接太难的，当然太难的我也不会...\\n \\n# 老婆快生了\\n老婆怀孕期间，说实话，是欠了一些陪伴的，虽说每天都在一起，但是为了多攒一些钱，晚上吃完饭刷完碗我就栽进书房写代码了。周末偶尔出门在附近逛逛，也仅限于附近。最让我后悔的还是没带老婆去拍孕妇照，虽说她嘴上说不要，我应该硬拗她去的。只有少量视频与照片存在手机里，但这些和艺术照还是有相当大的差距的，在坐的大老爷们以后另一半说不要的时候，你也得去，这是一种仪式感。\\n\\n老婆生之前，每晚睡前会给宝宝做胎教，买了2本故事书，来来回回念，心想宝宝也许还能想起来这个故事好像听过，增加Ta的记忆力（好吧，单纯就是为了省点钱 捂脸ing）\\n\\n孕期千万不要让老婆干家务，提重物！孕期千万不要让老婆干家务，提重物！孕期千万不要让老婆干家务，提重物！别说孕期，平时家务这种事，作为大老爷们也应该承包了，研究表明，家庭中男性做家务幸福指数更高。\\n# 孩子出生了\\n在五月的某个周一早上5点多，老婆羊水破了要生了，我真的紧张了，紧张到拨打120都按错号码，按对后对方问我地址，我大脑都空白了几秒，后面才想起来在哪。孩子也真会挑时候，选择在周一早上我还没去上班的时候发动。\\n\\n老婆去医院待产这件事，我要跟大家分享下经验\\n1. 在老婆预产期前一周最好把核酸做了，以免因为核酸没过被卡在外面。\\n2. 提前一个月把待产包准备好（我们是准备了一个大行李箱，里面装宝宝出生后用的衣物用品奶粉还有妈妈的东西也要准备好，具体可以在抖音搜索`待产包`），宝宝发动直接拎包去医院。\\n3. 如果需要打无痛分娩的，打之前不能进食。\\n4. 进产房跟老婆在一起，这种钱不能省。\\n\\n我老婆是顺产不出转剖宫产的，很多人会说直接选择剖，我在老婆顺不出来的时候也后悔没有直接剖，但是这边顺还是剖，最好还是听从医嘱，毕竟剖宫也是存在风险的，医生也不敢打包票。所以能顺还是尽量顺，这样身体也恢复的更快。\\n\\n老婆从产房出来，生了个女宝宝，母女平安，我当爸爸了！都说女儿是爸爸前世的情人，这份情我要还\\n## 疫情下的90后父母\\n由于疫情期间医院只允许一个人陪护，所以在接下来的5天时间里，宝宝的吃喝拉撒，老婆的饮食与护理，全落在我身上。也是这几天，让我从一个无知小子变身一个超级奶爸：喂奶，抱娃，换尿不湿，哄睡等等。虽说一个人确实辛苦，但回想起来，那几天却是幸福的回忆。\\n# 我却躺平了\\n整个上半年其实重心主要还是在家庭，工作上确实有点摸鱼了。\\n\\n## 一次创意大赛让我重回掘金\\n\\n早在2017年我就加入了掘金，但是直到2021年才在掘金写了第一篇文章，也没来由，就瞎写，啥活动也不知道，签到也不懂。直到今年4月份，在一次偶然的机会，遇到[大帅](https://juejin.cn/user/2955079655898093)，他发起了一次掘金创意大赛组队参赛的邀请，我抱着试试看的态度报名了。并在之后疯狂参加掘金活动（羊毛撸起来）。在掘金，目前已收集奖品如下：\\n- [x] 小黄鸭\\n- [x] 马克杯\\n- [x] 空调毯\\n- [x] 太空人风扇\\n- [x] 拖鞋\\n- [x] 榨汁机\\n- [x] 电饭煲\\n- [x] 小爱音箱\\n\\n获奖文章链接：\\n\\n[从零开始做一个贪吃蛇游戏，会vue就行](https://juejin.cn/editor/drafts/7085285244743450638)\\n\\n[我用一个div就画出了一个大西瓜~](https://juejin.cn/post/7109729038981136391)\\n\\n## 背单词\\n曾几何时大学不需要过英语4级就能毕业的时候，在裸考参加了4次4级考试，一次比一次考得低的时候，果断就放弃了，反正不影响毕业~\\n\\n现在后悔啊，英语真的很重要，不会英语或者英语不好做程序员是非常吃亏的，且不说看英文文档了，就写代码命个名都得百度翻译一下，无形中效率变低。\\n\\n推荐大家一款背单词的app：墨墨背单词。\\n我坚持打卡666天，从刚开始每天50个到每天30个到现在每天10个单词。因为太多了真的坚持不下来，`如果你发现自己坚持不下来一件事的时候，一定要降低点标准`，毕竟每天走一步总比不走强。背10个单词花不了你3分钟。这就是我坚持打卡了快2年的原因。\\n\\n![b6bbabf63d15ce4e296783a38208193.jpg](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b94e19d7f344619b6acea31f2cebb46~tplv-k3u1fbpfcp-watermark.image?)\\n\\n## 打游戏\\n大学时候沉迷英雄联盟。后来沉迷云顶之弈，现在沉迷金铲铲之战。\\n\\n中午午休都不要了，上分要紧，毕竟回家就得带娃了。附一下我的战绩，赛季大师是最低标准：\\n\\n![cf2eb2612724ed5e331d2c248afdd41.jpg](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e663e58a83184ab9842b5c6548b9beec~tplv-k3u1fbpfcp-watermark.image?)\\n\\n# 2022下半年立flag\\n来个谐音梗（3-8）的flag清单\\n- [ ] 学会three\\n- [ ] 掘金等级到4级\\n- [ ] 看5本书（非小说）\\n- [ ] 游戏场次降到60把以内\\n- [ ] 多陪妻子\\n- [ ] 教会宝宝喊爸爸~\\n\\n\\n就这么多吧，躺平人不该立太多flag。点个赞表示你也玩金铲铲呀：giegie,这个赞可以给我吗？"
    },
    {
        "article_id": "7142455046599344164",
        "cover_image": "",
        "title": "程序员如何实现财富自由",
        "brief": "程序员如何实现财富自由？今天我想和大家聊聊这个事情。 财富自由应该是所有人的终极目标，但实现财富自由似乎是一件不太可能的事情，即使程序员的平均工资已经非常高了。",
        "ctime": "1662982476",
        "mtime": "1662983014",
        "user_name": "brickspert",
        "avatar": "https://p26-passport.byteacctimg.com/img/user-avatar/1aa4b1e03382c418c9742465900a0881~300x300.image",
        "content": "> 本篇文章是 B 站视频《程序员如何实现财富自由》的文字版，欢迎大家直接去 B 站观看视频，体验更佳。B 站搜索「前端技术砖家」，关注不迷路。\\n> \\n> <img src=\\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70f4689a021d48a6920d84b4ae1484ff~tplv-k3u1fbpfcp-zoom-1.image\\\" width='300px' />\\n\\n\\n程序员如何实现财富自由？今天我想和大家聊聊这个事情。\\n\\n财富自由应该是所有人的终极目标，但实现财富自由似乎是一件不太可能的事情，即使程序员的平均工资已经非常高了。\\n\\n我个人经常在想，当我财富自由的时候，可以不用上班，可以做自己喜欢的事情，可以天天躺着，天天打游戏，想想都美滋滋。\\n\\n那怎么实现财富自由呢？今天想和大家交流下。\\n\\n首先我们需要先定义清楚什么是财富自由。\\n\\n财富自由是有一千万？一个亿？十个亿？还是多少钱？\\n\\n我认为都不是，财富自由应该是你的“睡后收入”能满足你的日常支出。这里注意是睡觉的睡，也就是你每天啥也不用干，光睡觉，就有收入，这些收入还能满足你的消费。哪里有这么好的事情呢？\\n\\n举个例子，你有十套房子，每套房子月租金一万，那你每个月的被动收入就是十万，这个就叫睡后收入，也叫被动收入。\\n\\n请问每个月躺着挣十万，是不是财富自由，我觉得太是了，做梦都能笑醒。\\n那么问题来了，去哪里领十套房子？(开玩笑~\\n\\n所以如果想实现财富自由，我们就需要去追求被动收入。那对我们程序员来讲，被动收入有哪些渠道呢？我来列举几个例子：\\n\\n1. 出租房子/商铺的租金\\n1. 长期投资的股票/基金的收益和分红\\n1. 你做了一个比较好的付费 APP，持续能带来收益\\n1. 你写了一本比较好的书，每年都能卖出去很多\\n1. 你制作了一套教程或视频，每年都有人买（比如掘金课程、慕课视频等）\\n   ![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4664a4b25d6c4782b06157b152f17e17~tplv-k3u1fbpfcp-zoom-1.image)![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3dec365dfa7b41078b8a6198a8ccaa4a~tplv-k3u1fbpfcp-zoom-1.image)\\n1. 你写了一个商城网站，源码放在网上付费下载\\n1. 做一个 SEO 排名非常高的网站，靠广告带来持续收益（比如测网速、编码解码等网站）\\n   ![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b2680a7bf364b3b972905b8fb2d6be9~tplv-k3u1fbpfcp-zoom-1.image)![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dcb906f50a6b4551aa9e9f61223c353c~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n类似这种有长尾收益的事情，我觉得都是被动收入。你能想到其它哪些事情？欢迎留言交流~\\n\\n虽然我们知道了财富自由是什么，知道了被动收入，但似乎实践起来非常难，有无从下手的感觉。\\n\\n那是因为我们没有制定清晰的可执行的目标。\\n\\n假如我们制定一个目标 “五年之后，每月被动收入达到 2 万元”，然后我们再按年和类型拆解一下：\\n\\n![screenshot-20220912-191936.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27c345e3c9164386a2ea79997e1dd5ea~tplv-k3u1fbpfcp-watermark.image?)\\n\\n拆解完成之后，我们会发现，似乎也不是不可能完成的，如果太难，那我们就改成 6 年、7 年、10 年，也都是可以的。\\n\\n当然以上仅仅是我举的例子，为了说明目标拆分后，确实具备一定的可行性，大家应该按照自己的实际条件去拆解目标。\\n\\n有些朋友可能会问了，那你有实现财富自由吗？\\n\\n那必然是没有的，如果有的话我现在就在睡觉了，而不是在录视频。我现在也处于目标拆解阶段，后面有进度的话会和大家分享交流。\\n\\n最后我想说：如果你不开始，那你永远不可能达到目标，让我们一起向财富自由进发！\\n\\n欢迎大家关注我的公众号《**前端技术砖家**》，一起加群划水聊天。\\n"
    },
    {
        "article_id": "7140193310966022175",
        "cover_image": "https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d412471382644c51a87bb3d8bb128b77~tplv-k3u1fbpfcp-watermark.image?",
        "title": "分享 11 张巨好看的PC端界面！！！",
        "brief": "今天给大家带来了11张我觉得不论从视觉效果还是页面布局的维度都特别nice的11个pc偏管理端的界面，希望大家可以在平时开发没有灵感时用来做参考。",
        "ctime": "1662455868",
        "mtime": "1662456565",
        "user_name": "HoMeTown",
        "avatar": "https://p9-passport.byteacctimg.com/img/user-avatar/e6cbeb2f552e010a8f3b56ac0fe2c68d~300x300.image",
        "content": "---\\ntheme: condensed-night-purple\\n---\\n\\n## 前言\\n大家好，我是**HoMeTown**。\\n\\n今天给大家带来了11张我觉得不论从`视觉效果`还是`页面布局`的维度都特别nice的11个pc偏管理端的界面，希望大家可以在平时开发没有灵感时用来做参考。\\n\\n11张图里，我最喜欢的是`7森林`&`9国际`，你喜欢哪种风格呢？评论区说一说吧！\\n\\n## 1 悸动\\n这个界面采用了粉色+紫色的双拼配色，给人一种特别有活力的感觉！\\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8d678da566c641c092d8489c45ef15e0~tplv-k3u1fbpfcp-watermark.image?)\\n\\n## 2 简约\\n这个图排版布局上都很明显可以感觉到给人的舒适感。\\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5cc69292d92f44238a8a4d5cd3c098cc~tplv-k3u1fbpfcp-watermark.image?)\\n\\n## 3 科技\\n这张图我总感觉有那种iOS的那种科技风，可以用来做电子产品的pc页面\\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dcdd2ae88d79440b9a4dff038fea9c1f~tplv-k3u1fbpfcp-watermark.image?)\\n\\n## 4 橙光\\n这张图的配色和布局我和之前一家公司的风格很像，做SaaS服务的经典配色。\\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44b2c65ef22a4765ab0ec5e5e722e60e~tplv-k3u1fbpfcp-watermark.image?)\\n\\n## 5 柔和\\n这张图看上去就比较柔和一点，除了左上角的卡片有点炸眼。\\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed662869eba643c9923d4e232a35a96d~tplv-k3u1fbpfcp-watermark.image?)\\n\\n## 6 森林\\n这个图就不用说了吧，是我最喜欢的颜色和风格，贴近大自然，强烈推荐👍🏻。\\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d1dc81bc258409c85ef53e483a44361~tplv-k3u1fbpfcp-watermark.image?)\\n\\n## 7 清新\\n这张图就很清新啦，适合做化妆品类的网站\\n\\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc4312360e1e45fc97249372c2f10942~tplv-k3u1fbpfcp-watermark.image?)\\n\\n## 8 传统\\n感觉这个风格有点点偏传统，但是又有一点科技风的感觉。\\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81008a09a0e944488b0e63a7113d5e9b~tplv-k3u1fbpfcp-watermark.image?)\\n\\n## 9 国际\\n这张图有了上面几个card的颜色点缀，感觉瞬间提升b格。\\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a8393887a4c40b2acc605db9a322b78~tplv-k3u1fbpfcp-watermark.image?)\\n\\n## 10 丰富\\n这张图的重点在布局，可以在页面元素多的时候，给我们一个参考。\\n\\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8dbe051bee6487b915d90357273d30a~tplv-k3u1fbpfcp-watermark.image?)\\n\\n## 11 简洁\\n以单一的白色作为大背景色，崇尚极简！而且有没有人觉得右下角那个图有点像掘金的图？\\n\\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a1559cab2bc472a9317f5633a77d3d0~tplv-k3u1fbpfcp-watermark.image?)\\n\\n以上所有设计图均来自网络，如有侵权，请call我删除，感谢~\\n\\n## 实践实践？\\n大家可以把觉得不错的界面投到评论区，过段时间我会统计一下得到赞同数最多的，然后做一个网页出来开源分享给大家。\\n\\n## 完结\\n> 下次见~ 我的朋友，我是`HoMeTown`👨‍💻‍，➕我VX，💊你进群，这是一个大家共同成长、共同学习的社群！在这里你可以：讨论技术问题、了解前端资讯、打听应聘公司、获得内推机会、聊点有的没的。\\n> \\n> 👉 vx: `hometown-468`【单独拉你】\\n> \\n> 👨‍👩‍👧 公众号：`秃头开发头秃了` 【关注回复“进群”】\\n> \\n> 🤖 Blog：[HoMeTown'Blog](https://blog.ishometown.com/)【点开看看】\\n\\n## 高赞好文\\n- [敢在我工位装摄像头？吃我一套JS ➕ CSS组合拳！！👊🏻](https://juejin.cn/post/7135994466006990856)\\n\\n- [前端老司机 70+ 实用工具网站分享（建议收藏！）🔥🔥](https://juejin.cn/post/7129412947931037732)\\n\\n- [前端老司机 70+ 实用工具网站分享（建议收藏！）🔥🔥](https://juejin.cn/post/7129412947931037732)\\n\\n- [【Git】 什么！？都快2023年了还搞不清楚 git rebase 与 git merge！？😮](https://juejin.cn/post/7135261815935598600)\\n\\n- [ 我用前端【最新】技术栈完成了一个生产标准的项目【Vue3 + TS + Vite + Pinia + Windicss + NavieUI】](https://juejin.cn/post/7101943469085556766)\\n\\n## 往期回顾\\n- [🤷‍♂️ 怒砸 30w+ 矿石抽礼盒后，我通透了...【掘金 · 幸运大转盘Vue3版】](https://juejin.cn/editor/drafts/7139833860149215240)\\n\\n- [巧用NodeJs帮老板解决个人需求！老板娘直呼：\\\"牛！niu！🐂！\\\"](https://juejin.cn/post/7138656718694645767)\\n\\n- [使用eslint + prettier + husky + lint-staged 约束项目的最佳实践！](https://juejin.cn/post/7127829940380106782)\\n\\n- [【小程序】爆肝 3 天总结的微信小程序优化指南（收藏夹吃灰吧！）🔥🔥](https://juejin.cn/post/7127448103908556831)\\n\\n- [【VUE】从源码角度说清楚MVVM！实现v-model！真的很简单！🔥](https://juejin.cn/post/7126714556730048519)\\n\\n- [【CSS】5分钟带你彻底搞懂 W3C & IE 盒模型！🔥🔥](https://juejin.cn/post/7124859308331761671)\\n\\n- [【CSS】有意思的BFC：Block Formatting Context（块格式化上下文）！🤡](https://juejin.cn/post/7125229317826543652)\\n\\n- [【CSS】聊一聊CSS像素、设备像素、设备独立像素、dpr、ppi 之间的区别](https://juejin.cn/post/7125980324596547620)\\n\\n- [【性能】7分钟带你了解【尤大】都在使用的 Chrome Runtime Performance Debug！](https://juejin.cn/post/7102990967162503181)\\n\\n- [ 【源码角度】7分钟带你搞懂ESLint核心原理！](https://juejin.cn/post/7102620286675058725)\\n\\n- [ 【JavaScript】手把手教你写高质量 JavaScript 异步代码！](https://juejin.cn/post/7102240670269571109)\\n\\n- [ ............... 查看更多 ............... ](https://juejin.cn/user/4116184668057390)\\n"
    },
    {
        "article_id": "7126100960593575949",
        "cover_image": "https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88b71db5b68d49419a686d926e58df70~tplv-k3u1fbpfcp-watermark.image?",
        "title": "前端工作一年半，离职了！！！",
        "brief": "哈喽~，大伙儿好久不见。今天爬上来唠唠，是因为最近向公司主动提出离职了，这几天刚办理完。这是小鹿的第一份工作，算是正式画上了一个句号，我觉得有很多经历需要在这里记录分享一下。 从 2020 年 8 月",
        "ctime": "1659174742",
        "mtime": "1659356918",
        "user_name": "程序员小鹿",
        "avatar": "https://p6-passport.byteacctimg.com/img/user-avatar/71175455eb2ef6f4f67065569e6304dc~300x300.image",
        "content": "---\\ntheme: juejin\\n---\\n> 前段时间写的一篇文章，一直没有更新，最近工作节奏慢下来了，就爬上来更新一波。\\n\\n哈喽~，大伙儿好久不见。今天爬上来唠唠，是因为最近向公司主动提出离职了，这几天刚办理完。这是小鹿的第一份工作，算是正式画上了一个句号，我觉得有很多经历需要在这里记录分享一下。\\n\\n从 2020 年 8 月 4 日入职老东家起，到 2022 年 4 月15 日正式离职，已经有一年半左右的时间了。在这短短的一年半时间里发生了很多的事情，业务的改变，人员的变动，自我的成长，也经历了一个创业公司从初期到中期的发展。\\n\\n在这里想总结一下，这过去的一年半时间里，能够影响到我以及改变到我的东西。那就按照时间线来吧~\\n\\n## 1、初入职场\\n\\n从学校到职场，我的第一个想法就是能够尽快让自己成长起来，无论是技术能力、思考能力、沟通能力以及其他能力等等，这将影响到我以后的路好不好走。所以在疫情之下，就很幸运的入职了老东家。\\n\\n\\n初入职场避免不了经常犯错误，把 git 分支玩坏，代码提交不规范，逻辑思路混乱这是常常犯的低级错误。\\n\\n\\n正是由于 leader 和前辈给了很多包容和让我试错的机会，也在短时间之内逐渐成长了起来，慢慢的适应了当下的环境，逐步对自己有了更高的要求。\\n\\n\\n其实这段时间是自我成长最快的一段时期。\\n\\n## 2、出差\\n\\n待了半年左右，老东家正好有一个出差的项目要去面对面和客户负责，当时内部也是比较缺人，所以主动申请了。\\n\\n\\n其实我心里也没底能不能把这次任务做好，只是觉得机会是很难得，所以就争取了下来。\\n\\n\\n在出差的这三个多月里，对公司的产品有了更进一步的了解，也对这个金融行业有了更深的认识，当然个人的沟通协调能力也得到了大幅度的提升，也逐渐总结出了自己处理事情的方式和方法，这让我在接下来的发展中能够更加顺利。\\n\\n\\n在提高能力和学到知识的同时，老东家也给了我许多的激励和奖励。也许就在这一刻，我感受到自己的巨大成长，逐渐能够担任技术之外的一些责任。\\n\\n## 3、迷茫\\n\\n成长的同时伴随着迷茫的产生，我在哪？我是谁？我要干什么？\\n\\n有一段时间，我突然陷入了一个低谷期，不知道下面的路如何走，这也是我最焦虑的一段时间。\\n\\n\\n站在现在的角度去看当初，其实这个低谷期就是从一个山峰到另一个山峰中间的山谷。引用温伯格大牛在《如何成为技术领导者》书中提到的提高能力的两种模式，一种叫做渐进模式，另一种叫做跃迁模式，而上述所提到的就是跃迁模式结构。\\n\\n\\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a671de53e4a499499e9b87536aee891~tplv-k3u1fbpfcp-watermark.image?)\\n\\n就是每当你进行新的挑战时，一开始能力水平是低于之前上一个挑战能力水平的，但是当你逐渐的去训练自己，慢慢的把能力提升上来之后，就会超过于上一次挑战获得的能力水平。\\n\\n\\n突破迷茫的关键点在于如何寻找更大挑战的事情。\\n\\n\\n## 4、裁员\\n\\n到了 21 年年底，公司迎来了第一次大规模裁员。如果你问我当时慌不慌，说实话，已经做好被裁的准备，因为应对黑天鹅最好的办法就是提高自己反脆弱的能力。（给大伙儿推荐《反脆弱》这本经典书籍）\\n\\n\\n当然，像裁员这波操作其实很多人可以提前做出决策，这就要分析创业公司整个发展过程以及遇到的实质性障碍是什么，大约会发展到什么阶段会出现裁员（疫情虽然有影响，但是关键并不是外界环境所致），这个有机会会单独写一篇跟大伙儿唠唠~\\n\\n\\n这次裁员，走了一些之前一起合作的同事，公司业务和结构也发生了很大的改变，这一次的变动让我更加明白自己想要什么，想要往哪个方向发展和提高。\\n\\n\\n## 5、离职\\n\\n\\n4 月初，我正式提出离职。也许这个想法在我心内争斗了许久，最后还是决定了。离职的原因很简单，自我优化。\\n\\n\\n\\n其实一开始入职的时候就想过，当我不能够为公司提供更多的价值以及自己能力在当下环境不能够得到提升，就要考虑换个环境了，越早跳出舒适圈，对自己来说是有利的。\\n\\n\\n还有一个比较重要的原因就是做的事情要有长期的价值。这不得不让我想起一个比较有思考性的问题。\\n\\n\\n在这里想问一下大伙儿，在这个互联网时代，我们所拿到的薪资水平真的和自己的能力所匹配么？你怎么判定自己所产生的的价值是多少？\\n\\n\\n\\n当然，当我们面对“价值”两个字时，不同的角度会有不同的认定，比如站在公司角度，可能会受到利益的驱动，从而会否定你产生的价值。如果站在客户角度，增加了他的办公效率，可能会认可你所产生的价值。\\n\\n\\n你到底产生多少有用的价值，其实这一点很值得我们每个人去思考。后续在写面试系列的文章中会重点说一下“工作价值”在面试过程中体现出来的作用。\\n\\n\\n## 小结\\n\\n过去的已经过去吧，未来还有很长一段路要走。坚持自己学技术的初衷，希望能够为社会发展带来一点点的作用。在工作的同时不断寻求属于自己的出路，争取有一天能够摆脱打工人的角色。\\n\\n加油:)\\n\\n"
    },
    {
        "article_id": "7141012605535010823",
        "cover_image": "https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc554b83ba674a4e945d48d27e31380d~tplv-k3u1fbpfcp-watermark.image?",
        "title": "为什么B站的弹幕可以不挡人物",
        "brief": "那天在B站看视频的时候偶然发现当字幕遇到人物的时候就被裁切了，不会挡住人物，觉得很神奇，于是决定一探究竟。",
        "ctime": "1662646639",
        "mtime": "1664549521",
        "user_name": "钱得乐",
        "avatar": "https://p3-passport.byteacctimg.com/img/user-avatar/1ba304f06bb6a5d442791cec0c809d4d~300x300.image",
        "content": "---\\ntheme: channing-cyan\\n---\\n“我报名参加金石计划1期挑战——瓜分10万奖池，这是我的第1篇文章，[点击查看活动详情](https://s.juejin.cn/ds/jooSN7t \\\"https://s.juejin.cn/ds/jooSN7t\\\")”\\n\\n那天在B站看视频的时候偶然发现当字幕遇到人物的时候就被裁切了，不会挡住人物，觉得很神奇，于是决定一探究竟。\\n\\n高端的效果，往往只需要采用最朴素的实现方式，忙碌了两个小时，陈师傅打开了F12，豁然开朗。一张图片+一个属性，直接搞定。\\n\\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e91ac49115ac405290f79a02b440aaf0~tplv-k3u1fbpfcp-watermark.image?)\\n\\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/680022c4c16845a983999cc4bc934bc5~tplv-k3u1fbpfcp-watermark.image?)\\n\\n为了印证我的想法，我决定自己写一个demo\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n  <meta charset=\\\"UTF-8\\\">\\n  <title>Title</title>\\n  <style>\\n    .video {\\n      width: 668px;\\n      height: 376px;\\n      position: relative;\\n      -webkit-mask-image: url(\\\"mask.svg\\\");\\n      -webkit-mask-size: 668px 376px;\\n    }\\n    .bullet {\\n      position: absolute;\\n      font-size: 20px;\\n    }\\n  </style>\\n</head>\\n<body>\\n<div class=\\\"video\\\">\\n  <div class=\\\"bullet\\\" style=\\\"left: 100px; top: 0;\\\">元芳，你怎么看</div>\\n  <div class=\\\"bullet\\\" style=\\\"left: 200px; top: 20px;\\\">你难道就是传说中的奶灵</div>\\n  <div class=\\\"bullet\\\" style=\\\"left: 300px; top: 40px;\\\">你好，我是胖灵</div>\\n  <div class=\\\"bullet\\\" style=\\\"left: 400px; top: 60px;\\\">这是第一集，还没有舔灵</div>\\n</div>\\n</body>\\n</html>\\n```\\n效果是这样的\\n\\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18edc012136d4d659242399c3519b820~tplv-k3u1fbpfcp-watermark.image?)\\n\\n加一个红背景，看的清楚一些\\n\\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/177f837aabb74a0196d9f8f69bbfd6c0~tplv-k3u1fbpfcp-watermark.image?)\\n\\n至此我们就实现了B站同款的不遮挡人物的弹幕。至于这张图片是怎么来的，肯定是AI识别出来然后生成的，一张图片也就一两K，一次加载很多张也不会造成很大的负担。\\n\\n最后来看看这个神奇的css属性吧\\n\\nhttps://developer.mozilla.org/zh-CN/docs/Web/CSS/mask-image\\n\\n**Experimental:**  **这是一个实验中的功能**\\n\\n所以在开发需求的时候可以把它当成一个亮点使用，但是不能强依赖于这个属性做需求。\\n\\n它还有一系列的属性，有兴趣的话可以挨个试一下。\\n\\n\\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/633cf9cb8b48443da0b69179315df68a~tplv-k3u1fbpfcp-watermark.image?)\\n"
    },
    {
        "article_id": "7124511406099005471",
        "cover_image": "https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/720d976d5b5947c187b8f7039126c10e~tplv-k3u1fbpfcp-watermark.image?",
        "title": "一个96年前端的2022年中总结 (落户,看房,还贷,被裁)",
        "brief": "「时光不负，创作不停，本文正在参加2022年中总结征文大赛」 落户 关于落户这个事, 就是一个很突然的想法,很突然, 得知天津有个\"海河英才计划\",只要是本科生, 就比较容易落户,所以就想着试一试, ",
        "ctime": "1658804596",
        "mtime": "1658909278",
        "user_name": "nanfeiyan",
        "avatar": "https://p9-passport.byteacctimg.com/img/user-avatar/5ea3565b463e60f37108c850425cebd6~300x300.image",
        "content": "---\\ntheme: fancy\\nhighlight: arduino-light\\n---\\n\\n\\n「时光不负，创作不停，本文正在参加[2022年中总结征文大赛](https://juejin.cn/post/7108989863126368286)」\\n\\n\\n> 人到中年中年总是觉得很累,每天忙不完的事,操不完的心,曾今那些无忧无虑的日子似乎消失的无影无踪, 工作三年一点存款没有\\n\\n\\n### 落户\\n关于落户这个事, 就是一个很突然的想法,很突然, 得知天津有个\\\"海河英才计划\\\",只要是本科生, 就比较容易落户,所以就想着试一试, 心想起码这个是一个阶级的跨越(农村-->城市), 然后就在网上各种搜索,问一些了解的朋友,看看怎么操作, 最后发现好多人说有北京社保,在天津落户会被查出来, 然后就被拉入黑名单了. 最后为了稳妥还是找了一个中介帮忙操作了一下,花了1w, 等我办完,不久就有我的朋友自己办的三无人员落户, 一分钱没花. 唉😌!!!!! \\n\\n### 看房\\n一开始在安居客上看, 因为穷, 基本也没啥可选择性, 一筛选也就那么几个, 然后就联系了一个销售去看房, 不得不说这个销售真的可以, 不知道他们能赚多少钱哈, 但是服务是真的不错, 一到了高铁站他们就去接你,还请你吃饭, 带着你看,看完之后还把你送到高铁站. 想着一开始就看西青和北辰的,但是西青的都好贵, 北辰好像会好点, 然后就去北辰看, 销售说他觉得武清也不错, 就带着去武清也看了, 看完之后, 心里比较了一下, 感觉被武清的哪个样板间和户型深深吸引了,并且价格也比较合适些, 然后我回到北京一周左右吧, 就跟那个销售说,打算买武清哪个, 然后然后我父母给我拿了20w, 剩下的就是我自己的,还借了朋友一些, 首付了40多, 然后就打印征信, 一顿签字就买了. 感觉很随意, 感觉买房就跟买菜似的, 不过还是有一点区别的, 买菜之后不会让我身无分文, 买房会😭. 现在就是每个月5000多贷款\\\"真爽\\\".\\n\\n\\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca57b09486634e81b4bab8d0e3b49e02~tplv-k3u1fbpfcp-watermark.image?)\\n\\n### 学习\\n1. 缺失了刚毕业那会的激情,刚毕业那会,每天下班还会去学习, 刷视频, 看文章, 现在下班回家已经不想再打开电脑了. 刷视频(此视频非彼视频)\\n2. 今年也学习了一些新的东西摸鱼之间,刷了一些课程,<破解JavaScript高级玩法，成为精通JS的原生专家>  <Vue3全家桶>\\n3. React技术栈是我工作一直使用的,也会持续性的学习一些,每天刷刷Medium和掘金\\n4. 深度学习Nginx,进行了一半了,以前对nginx只停留在使用的层面\\n5. 上半年在公司分享了一下架手架的原理以及实践\\n6. 英语的学习说实话真的有点三天打鱼两天晒网了, 好在现在有一半了\\n\\n![img_1.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07a50f34a7a64fc794d292f47f4f806f~tplv-k3u1fbpfcp-watermark.image?)\\n\\n\\n### 工作\\n21年年底, 老东家北京这边合作的项目,终止了,然后面临了裁员, 不过当初也确实有了想跳槽的想法了,本来想,等到年终奖发了,就提离职. 没想到提前到来了, 给了正常的赔偿(n+1) 拿了三个月的赔偿, 正好月底, 算上本月的薪资,还有一些调休啥的 加起来一共是4个月, 感觉还挺爽的, 因为大概还有个20天左右吧, 就快过年了, 然后在回家和找工作抉择了一下, 决定先找找工作,然后就开始学习在掘金上查看面经, 感觉都是各种源码, 给我搞的有点懵, 毕竟缺钱嘛. 先后面试了一些公司: 金山, 58, 携程, 欢聚, 等等; 说实话,这段时间招人的还挺多的. 所以我很快就入职了, hr问我年前能入职吗? 其实那段时间疫情严重了, 老家那边也不让北京的回去, 所以在过年的前一周我入职了, (没钱的人不配拥有假期😭) . 唉, 第一次自己在外地过年.\\n\\n\\n\\n关于兼职: \\n- 今年和朋友一块干了一个公司的官网,本来也没打算要钱的,最后老板一人给了一张京东e卡\\n- 还干了一个审核ppt的工作,一个ppt给150,不用改, 就说哪里写的不合适, 不过这个活有点恶心, 每个人理解不一样, 每次我这边审核后, 拿去交付,还是很多问题\\n\\n### 生活\\n1. 上半年感觉一直有疫情断断续续,大家都比较封闭,也没出去玩过, 偶尔和朋友去爬个山. 5, 6月还居家办公了好久, 记不太清了,应该得有一个月\\n2. 从去年十月一到现在一直没有回过家, 有些想回去看看, 但是最近每个周末都有事😞\\n3. 和女朋友去看过两次脱口秀, 感觉现场的感觉还是很棒的, 比电视看好太多\\n4. 因为对象住他们单位的宿舍, 所以我自己平常下班也懒得收拾屋子, 只有礼拜天,才会大扫除一下, 或者对象来的时候😁\\n5. 前段时间迷上了王者,以前从来不怎么玩游戏的, 熬夜打游戏, 导致生活节奏有点乱, 每天的精神状态也不如以前,正在积极调整. 但是吧,我告诉你们我的云中君玩的贼6的 不服来战哦\\n6. 养了一只鹦鹉, 刚来还不是很好看, 现在尾巴长长的了\\n\\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f07e2be4fbb1445bae3ad991633fa388~tplv-k3u1fbpfcp-watermark.image?)\\n\\n\\n### 下半年flag\\n- [ ] 完成Nginx的深度学习\\n- [ ] 希望能出去转一圈, 看看外面的世界\\n- [ ] 继续背单词学习\\n- [ ] 看看车车, 目前感觉Crv和宋大妈还不错\\n- [ ] 能再进行一次有价值的分享\\n\\n"
    },
    {
        "article_id": "7154381380406181896",
        "cover_image": "https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29e60157d74848d2ae0f8ff01372f2b4~tplv-k3u1fbpfcp-watermark.image?",
        "title": "一起写个vite吧！(2) --插件机制开发",
        "brief": "“我正在参加「掘金·启航计划」”，这是mini-vite系列的第二篇文章，很多同学只知道vite很快，但却不知道它快在哪里，这一系列文章就和大家一起实现一个vite，一起学习vite的原理。",
        "ctime": "1665759253",
        "mtime": "1665816921",
        "user_name": "鲁类类丢",
        "avatar": "https://p3-passport.byteacctimg.com/img/user-avatar/b35a71e80fda4602121fa5f8613d3215~300x300.image",
        "content": "---\\ntheme: fancy\\nhighlight: tomorrow\\n---\\n“我正在参加「掘金·启航计划」”\\n\\n\\n> 继上一章节[一起写个vite吧！(1) --环境搭建+依赖预构建](https://juejin.cn/post/7154007357305913357)咱们继续开干哈，这一节咱们来搞`vite`的插件机制的实现，干货满满哈。`vite`在开发的阶段实现了一个按需加载的服务器，每个文件请求进来都会经历一系列的编译流程，生产环境下,`vite`同样会执行一系列编译过程，将编译结果交给 `Rollup` 进行模块打包。这一系列的编译过程指的就是 `Vite` 的插件工作流水线(Pipeline)，而插件功能又是 `Vite` 构建能力的核心，因此谈到阅读 `Vite` 源码，我们永远绕不开插件的作用与实现原理。\\n-   在生产环境中 `Vite` 直接调用 `Rollup` 进行打包，所以 `Rollup` 可以调度各种插件；\\n-   在开发环境中，`Vite` 模拟了 `Rollup` 的插件机制，设计了一个`PluginContainer` 对象来调度各个插件。\\n\\n> 值得一提的是 `Vite` 从 `preact` 的 `WMR` 中得到了启发，把插件机制做成**兼容 Rollup** 的格式。简单的介绍一下 `Rollup` 插件，其实插件这个东西，就是 `Rollup` 对外提供一些运行过程中一些时机的钩子，还有一些工具方法，让用户去写一些配置代码，以此介入 `Rollup` 运行的各个时机之中。而 `Vite` 需要做的就是基于 `Rollup` 设计的接口进行扩展，在保证 `Rollup` 插件兼容的可能性的同时，再加入一些 `Vite` 特有的钩子和属性来扩展。`Rollup`的插件可以参考这篇文章[Rollup 之插件机制浅析](https://juejin.cn/post/6968641190061309960)。\\n\\n1.  实现 Rollup 插件钩子的调度\\n2.  实现插件钩子内部的 Context 上下文对象\\n\\nVite架构图：\\n\\n![02910cd2c6894bcdb3a9e0fc9e59f4c2_tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.webp](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3cd4fa84cdb84413b8d193de1a4acf77~tplv-k3u1fbpfcp-watermark.image?)\\n\\n对于`vite`的插件API可以直接看一下[官网的插件API介绍](https://cn.vitejs.dev/guide/api-plugin.html)，任何可以自己编写一下`vite`的插件，官网有一个虚拟模块插件的例子，可以看看自己跟着写一写--[虚拟模块插件demo地址](https://cn.vitejs.dev/guide/api-plugin.html#virtual-modules-convention)。\\n\\nok同学们在官网熟悉完插件后，咱们正式进入插件机制的开发，在这里我们并不会实现`vite`的所以插件哈，只会实现部分。\\n\\n## pluginContainer的实现\\n\\n插件容器需要接收 Vite 插件作为初始化参数，因此我们需要提前声明插件的类型，你可以继续新建`src/node/plugin.ts`来声明如下的插件类型:\\n\\nsrc/node/plugin.ts\\n\\n\\n```ts\\nimport { LoadResult, PartialResolvedId, SourceDescription } from 'rollup'\\n\\nimport { ServerContext } from './server'\\n\\nexport type ServerHook = (\\n  server: ServerContext\\n) => (() => void) | void | Promise<(() => void) | void>\\n\\n// 只实现以下这几个钩子\\nexport interface Plugin {\\n  name: string\\n  configureServer?: ServerHook\\n  resolveId?: (\\n    id: string,\\n    importer?: string\\n  ) => Promise<PartialResolvedId | null> | PartialResolvedId | null\\n  load?: (id: string) => Promise<LoadResult | null> | LoadResult | null\\n  transform?: (\\n    code: string,\\n    id: string\\n  ) => Promise<SourceDescription | null> | SourceDescription | null\\n  transformIndexHtml?: (raw: string) => Promise<string> | string\\n}\\n\\n```\\n\\nok然后我们再新建`src/node/pluginContainer.ts`文件，增加类型定义:\\n\\nsrc/node/pluginContainer.ts\\n```\\n// rollup里的类型，vite是基于rollup的插件进行拓展的\\nimport type {\\n  LoadResult,\\n  PartialResolvedId,\\n  SourceDescription,\\n  PluginContext as RollupPluginContext,\\n  ResolvedId,\\n} from \\\"rollup\\\";\\n\\nexport interface PluginContainer {\\n  resolveId(id: string, importer?: string): Promise<PartialResolvedId | null>;\\n  load(id: string): Promise<LoadResult | null>;\\n  transform(code: string, id: string): Promise<SourceDescription | null>;\\n}\\n```\\n\\nok，然后我们来实现插件机制的具体逻辑，主要集中在`createPluginContainer`函数中:\\n\\nsrc/node/pluginContainer.ts\\n\\n\\n```ts\\nimport type {\\n  LoadResult,\\n  PartialResolvedId,\\n  SourceDescription,\\n  PluginContext as RollupPluginContext,\\n  ResolvedId,\\n} from 'rollup'\\nimport { Plugin } from './plugin'\\n\\nexport interface PluginContainer {\\n  resolveId(id: string, importer?: string): Promise<PartialResolvedId | null>\\n  load(id: string): Promise<LoadResult | null>\\n  transform(code: string, id: string): Promise<SourceDescription | null>\\n}\\n\\nexport const createPluginContainer = (plugins: Plugin[]): PluginContainer => {\\n  // 插件上下文对象\\n  // 使用ts-ignore让ts不检查这里的Context，因为我们只实现上下文对象的 resolve 方法，会报错\\n  // @ts-ignore \\n  class Context implements RollupPluginContext {\\n    async resolve(id: string, importer?: string) {\\n      let out = await pluginContainer.resolveId(id, importer)\\n      if (typeof out === 'string') out = { id: out }\\n      return out as ResolvedId | null\\n    }\\n  }\\n  // 插件容器\\n  const pluginContainer: PluginContainer = {\\n    async resolveId(id: string, importer?: string) {\\n      const ctx = new Context() as any\\n      for (const plugin of plugins) {\\n        if (plugin.resolveId) {\\n          const newId = await plugin.resolveId.call(ctx as any, id, importer)\\n          if (newId) {\\n            id = typeof newId === 'string' ? newId : newId.id\\n            return { id }\\n          }\\n        }\\n      }\\n      return null\\n    },\\n    async load(id) {\\n      const ctx = new Context() as any\\n      for (const plugin of plugins) {\\n        if (plugin.load) {\\n          const result = await plugin.load.call(ctx, id)\\n          if (result) {\\n            return result\\n          }\\n        }\\n      }\\n      return null\\n    },\\n    async transform(code, id) {\\n      const ctx = new Context() as any\\n      for (const plugin of plugins) {\\n        if (plugin.transform) {\\n          const result = await plugin.transform.call(ctx, code, id)\\n          if (!result) continue\\n          if (typeof result === 'string') {\\n            code = result\\n          } else if (result.code) {\\n            code = result.code\\n          }\\n        }\\n      }\\n      return { code }\\n    },\\n  }\\n\\n  return pluginContainer\\n}\\n\\n```\\n> 很显然，`Vite` 将 `Rollup` 的 `PluginContext` 对象重新实现了一遍，因为只是开发阶段用到，所以去除了一些打包相关的方法实现，我们这里则只实现上下文对象`reslove`方法而已，在调用钩子用`call`绑定this这样在钩子里可以通过`this.XXXX`调用上下文里的`XXXX`方法了。\\n\\nok然后我们再去完善服务器的逻辑\\n\\nsrc/node/server/index.ts\\n\\n\\n```ts\\nimport connect from 'connect'\\n// picocolors 是一个用来在命令行显示不同颜色文本的工具\\nimport { blue, green } from 'picocolors'\\nimport { optimize } from '../optimizer'\\nimport { resolvePlugins } from '../plugins'\\nimport { Plugin } from '../plugin'\\nimport { createPluginContainer, PluginContainer } from '../pluginContainer'\\n\\n// 服务器上下文的类型\\nexport interface ServerContext {\\n  root: string\\n  pluginContainer: PluginContainer\\n  app: connect.Server\\n  plugins: Plugin[]\\n}\\n\\nexport async function startDevServer() {\\n  const app = connect()\\n  const root = process.cwd()\\n  const startTime = Date.now()\\n  const plugins = resolvePlugins()\\n  const pluginContainer = createPluginContainer(plugins)\\n\\n  const serverContext: ServerContext = {\\n    root: process.cwd(),\\n    app,\\n    pluginContainer,\\n    plugins,\\n  }\\n\\n  for (const plugin of plugins) {\\n    if (plugin.configureServer) {\\n      await plugin.configureServer(serverContext)\\n    }\\n  }\\n\\n  app.listen(3000, async () => {\\n    await optimize(root)\\n    console.log(\\n      green('🚀 No-Bundle 服务已经成功启动!'),\\n      `耗时: ${Date.now() - startTime}ms`\\n    )\\n    console.log(`> 本地访问路径: ${blue('http://localhost:3000')}`)\\n  })\\n}\\n\\n```\\n其中 `resolvePlugins` 方法我们还未定义，我们去新建一个`src/node/plugins/index.ts` 文件，内容如下:\\n\\n```\\nimport { Plugin } from \\\"../plugin\\\";\\n\\nexport function resolvePlugins(): Plugin[] {\\n  // 下一部分会逐个补充插件逻辑\\n  return [];\\n}\\n```\\n这个方法是用来加载插件的，后面我们编写的插件在这里引用并返回出去\\n\\n## 入口HTML加载中间件\\n\\nok那我们首先要考虑的就是入口 HTML 如何编译和加载的问题，这里我们可以通过一个服务中间件，注意哈这个是中间件不是插件，是connect的中间件，跟koa和express的中间件是差不多的。然后配合我们的插件机制来实现。我们可以新建`src/node/server/middlewares/indexHtml.ts`，内容如下:\\n\\nsrc/node/server/middlewares/indexHtml.ts\\n\\n```ts\\nimport { NextHandleFunction } from 'connect'\\nimport { ServerContext } from '..'\\nimport path from 'path'\\nimport { pathExists, readFile } from 'fs-extra'\\n\\nexport function indexHtmlMiddware(\\n  serverContext: ServerContext\\n): NextHandleFunction {\\n  return async (req, res, next) => {\\n    if (req.url === '/') {\\n      const { root } = serverContext\\n      // 默认使用项目根目录下的 index.html\\n      const indexHtmlPath = path.join(root, 'index.html')\\n      if (await pathExists(indexHtmlPath)) {\\n        const rawHtml = await readFile(indexHtmlPath, 'utf-8')\\n        let html = rawHtml\\n        // 通过执行插件的 transformIndexHtml 方法来对 HTML 进行自定义的修改\\n        for (const plugin of serverContext.plugins) {\\n          if (plugin.transformIndexHtml) {\\n            html = await plugin.transformIndexHtml(html)\\n          }\\n        }\\n\\n        res.statusCode = 200\\n        res.setHeader('Content-Type', 'text/html')\\n        return res.end(html)\\n      }\\n    }\\n    return next()\\n  }\\n}\\n\\n```\\n接着我们在服务端应用这个中间件:\\n\\n```\\n// src/node/server/index.ts\\n// 需要增加的引入语句\\nimport { indexHtmlMiddware } from \\\"./middlewares/indexHtml\\\";\\n\\n// 省略中间的代码\\n\\n// 处理入口 HTML 资源\\napp.use(indexHtmlMiddware(serverContext));\\n\\napp.listen(3000, async () => {\\n  // 省略\\n});\\n```\\n然后我们可以通过`pnpm dev`启动项目，然后访问`http://localhost:3000`，从网络面板中你可以查看到 HTML 的内容已经成功返回:\\n\\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/248448af73a94afbbef3c59afa228bba~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n> 不过当前的页面并没有任何内容，因为 HTML 中引入的 TSX 文件并没有被正确编译。接下来，我们就来可以去处理 `TSX` 文件的编译工作。\\n\\n## JS/TS/JSX/TSX编译的能力\\n\\nok那我们先新增一个中间件`src/node/server/middlewares/transform.ts`，内容如下:\\n\\nsrc/node/server/middlewares/transform.ts\\n```ts\\n\\nimport { NextHandleFunction } from 'connect'\\n\\nimport { isJSRequest, cleanUrl } from '../../utils'\\nimport { ServerContext } from '../index'\\nimport createDebug from 'debug'\\n\\nconst debug = createDebug('dev')\\n\\nexport async function transformRequest(\\n  url: string,\\n  serverContext: ServerContext\\n) {\\n  const { pluginContainer } = serverContext\\n  url = cleanUrl(url)\\n  // 简单来说，就是依次调用插件容器的 resolveId、load、transform 方法\\n  const resolvedResult = await pluginContainer.resolveId(url)\\n  let transformResult\\n  if (resolvedResult?.id) {\\n    let code = await pluginContainer.load(resolvedResult.id)\\n    if (typeof code === 'object' && code !== null) {\\n      code = code.code\\n    }\\n    if (code) {\\n      transformResult = await pluginContainer.transform(\\n        code as string,\\n        resolvedResult?.id\\n      )\\n    }\\n  }\\n  return transformResult\\n}\\n\\nexport function transformMiddleware(\\n  serverContext: ServerContext\\n): NextHandleFunction {\\n  return async (req, res, next) => {\\n    if (req.method !== 'GET' || !req.url) {\\n      return next()\\n    }\\n    const url = req.url\\n    debug('transformMiddleware: %s', url)\\n    // transform JS request\\n    if (isJSRequest(url)) {\\n      // 核心编译函数\\n      let result = await transformRequest(url, serverContext)\\n      if (!result) {\\n        return next()\\n      }\\n      if (result && typeof result !== 'string') {\\n        result = result.code as any\\n      }\\n      // 编译完成，返回响应给浏览器\\n      res.statusCode = 200\\n      res.setHeader('Content-Type', 'application/javascript')\\n      return res.end(result)\\n    }\\n\\n    next()\\n  }\\n}\\n\\n```\\n同时，我们也需要补充如下的工具函数和常量定义:\\n\\nsrc/node/utils.ts\\n```\\nimport { JS_TYPES_RE } from './constants.ts'\\n\\nexport const isJSRequest = (id: string): boolean => {\\n  id = cleanUrl(id);\\n  if (JS_TYPES_RE.test(id)) {\\n    return true;\\n  }\\n  if (!path.extname(id) && !id.endsWith(\\\"/\\\")) {\\n    return true;\\n  }\\n  return false;\\n};\\n\\nexport const cleanUrl = (url: string): string =>\\n  url.replace(HASH_RE, \\\"\\\").replace(QEURY_RE, \\\"\\\");\\n  \\n// src/node/constants.ts\\nexport const JS_TYPES_RE = /.(?:j|t)sx?$|.mjs$/;\\nexport const QEURY_RE = /?.*$/s;\\nexport const HASH_RE = /#.*$/s;\\n```\\n\\n> 从如上的核心编译函数`transformRequest`可以看出，Vite 对于 JS/TS/JSX/TSX 文件的编译流程主要是依次调用插件容器的如下方法:\\n> \\n> -   resolveId\\n> -   load\\n> -   transform\\n> \\nok接下来我们就直接来开发这些插件拉\\n\\n## 路径解析插件\\n\\n当浏览器解析到如下的标签时:\\n\\n```\\n<script type=\\\"module\\\" src=\\\"/src/main.tsx\\\"></script>\\n```\\n\\n会自动发送一个路径为`/src/main.tsx`的请求，但如果服务端不做任何处理，是无法定位到源文件的，随之会返回 404 状态码:\\n\\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bbee32c5d51d464f95fcc35c9978c5bc~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n因此，我们需要开发一个路径解析插件，对请求的路径进行处理，使之能转换真实文件系统中的路径。我们直接新建文件`src/node/plugins/resolve.ts`，内容如下:\\n\\nsrc/node/plugins/resolve.ts\\n```ts\\nimport resolve from 'resolve'\\nimport { Plugin } from '../plugin'\\nimport { ServerContext } from '../server/index'\\nimport path from 'path'\\nimport { pathExists } from 'fs-extra'\\nimport { DEFAULT_EXTERSIONS } from '../constants'\\n\\nexport function resolvePlugin(): Plugin {\\n  let serverContext: ServerContext\\n  return {\\n    name: 'm-vite:resolve',\\n    configureServer(s) {\\n      // 保存服务端上下文\\n      serverContext = s\\n    },\\n    async resolveId(id: string, importer?: string) {\\n      // 1. 绝对路径\\n      if (path.isAbsolute(id)) {\\n        if (await pathExists(id)) {\\n          return { id }\\n        }\\n        // 加上 root 路径前缀，处理 /src/main.tsx 的情况\\n        id = path.join(serverContext.root, id)\\n        if (await pathExists(id)) {\\n          return { id }\\n        }\\n      }\\n      // 2. 相对路径\\n      else if (id.startsWith('.')) {\\n        if (!importer) {\\n          throw new Error('`importer` should not be undefined')\\n        }\\n        const hasExtension = path.extname(id).length > 1\\n        let resolvedId: string\\n        // 2.1 包含文件名后缀\\n        // 如 ./App.tsx\\n        if (hasExtension) {\\n          resolvedId = resolve.sync(id, { basedir: path.dirname(importer) })\\n          if (await pathExists(resolvedId)) {\\n            return { id }\\n          }\\n        }\\n        // 2.2 不包含文件名后缀\\n        // 如 ./App\\n        else {\\n          // ./App -> ./App.tsx\\n          for (const extname of DEFAULT_EXTERSIONS) {\\n            try {\\n              const withExtension = `${id}${extname}`\\n              resolvedId = resolve.sync(withExtension, {\\n                basedir: path.dirname(importer),\\n              })\\n              if (await pathExists(resolvedId)) {\\n                return { id: withExtension }\\n              }\\n            } catch (e) {\\n              continue\\n            }\\n          }\\n        }\\n      }\\n      return null\\n    },\\n  }\\n}\\n\\n```\\n\\nok我们先补充一下缺少的常量:\\n\\nsrc/node/constants.ts\\n\\n```\\nexport const DEFAULT_EXTERSIONS = [\\\".tsx\\\", \\\".ts\\\", \\\".jsx\\\", \\\"js\\\"];\\n```\\n\\nok，然后`/src/main.tsx`就可以被解析成真实路径拉，模块在接下来的 `load` 钩子中能够正常加载。ok加载完路径了接下来该干嘛呢，当然是读取文件的内容拉，`tsx`浏览器是没法识别的，我们要把文件编译成js语法，这时候我们可以使用`esbuild`的`transform`拉。\\n\\n## Esbuild 语法编译插件\\n\\n这个插件的作用比较好理解，就是将 JS/TS/JSX/TSX 编译成浏览器可以识别的 JS 语法，我们直接新建`src/node/plugins/esbuild.ts`文件，内容如下:\\n\\nsrc/node/plugins/esbuild.ts\\n\\n\\n```ts\\nimport { readFile } from 'fs-extra'\\nimport { Plugin } from '../plugin'\\nimport { isJSRequest } from '../utils'\\nimport esbuild from 'esbuild'\\nimport path from 'path'\\n\\nexport function esbuildTransformPlugin(): Plugin {\\n  return {\\n    name: 'm-vite:esbuild-transform',\\n    // 加载模块\\n    async load(id) {\\n      if (isJSRequest(id)) {\\n        try {\\n          const code = await readFile(id, 'utf-8')\\n          return code\\n        } catch (e) {\\n          return null\\n        }\\n      }\\n    },\\n    async transform(code, id) {\\n      if (isJSRequest(id)) {\\n        const extname = path.extname(id).slice(1)\\n        const { code: transformedCode, map } = await esbuild.transform(code, {\\n          target: 'esnext',\\n          format: 'esm',\\n          sourcemap: true,\\n          loader: extname as 'js' | 'ts' | 'jsx' | 'tsx',\\n        })\\n        return {\\n          code: transformedCode,\\n          map,\\n        }\\n      }\\n      return null\\n    },\\n  }\\n}\\n\\n```\\n> 搞定了哇，在将 TSX 转换为浏览器可以识别的语法之后，是不是就可以直接返回给浏览器执行了呢？如果你觉得可以的话那我必须要骂你一声扑街了，别忘了我们上一章学的依赖预构建啊，如果tsx文件有里面第三方依赖路径(bare import)，需要重写为预构建产物路径引用产物。而且对于绝对路径和相对路径，需要借助之前的路径解析插件进行解析。ok那我们需要写一个import的分析插件。\\n\\n## import分析插件\\n\\nok我们新建`src/node/plugins/importAnalysis.ts`插件文件\\n\\nsrc/node/plugins/importAnalysis.ts\\n\\n\\n```ts\\nimport { init, parse } from 'es-module-lexer'\\nimport { BARE_IMPORT_RE, PRE_BUNDLE_DIR } from '../constants'\\nimport { isJSRequest, normalizePath } from '../utils'\\n// magic-string 用来作字符串编辑\\nimport MagicString from 'magic-string'\\nimport path from 'path'\\nimport { Plugin } from '../plugin'\\nimport { ServerContext } from '../server/index'\\nimport type { PluginContext } from 'rollup'\\n\\nexport function importAnalysisPlugin(): Plugin {\\n  let serverContext: ServerContext\\n  return {\\n    name: 'm-vite:import-analysis',\\n    configureServer(s) {\\n      // 保存服务端上下文\\n      serverContext = s\\n    },\\n    async transform(this: PluginContext, code: string, id: string) {\\n      // 只处理 JS 相关的请求\\n      if (!isJSRequest(id)) {\\n        return null\\n      }\\n      await init\\n      // 解析 import 语句\\n      const [imports] = parse(code)\\n      const ms = new MagicString(code)\\n      // 对每一个 import 语句依次进行分析\\n      for (const importInfo of imports) {\\n        // 举例说明: const str = `import React from 'react'`\\n        // str.slice(s, e) => 'react'\\n        const { s: modStart, e: modEnd, n: modSource } = importInfo\\n        if (!modSource) continue\\n        // 第三方库: 路径重写到预构建产物的路径\\n        if (BARE_IMPORT_RE.test(modSource)) {\\n          // const bundlePath = path.join(\\n          //   serverContext.root,\\n          //   PRE_BUNDLE_DIR,\\n          //   `${modSource}.js`\\n          // )\\n          const bundlePath = normalizePath(\\n            path.join('/', PRE_BUNDLE_DIR, `${modSource}.js`)\\n          )\\n          ms.overwrite(modStart, modEnd, bundlePath)\\n        } else if (modSource.startsWith('.') || modSource.startsWith('/')) {\\n          // 直接调用插件上下文的 resolve 方法，会自动经过路径解析插件的处理\\n          const resolved = await this.resolve(modSource, id)\\n          if (resolved) {\\n            ms.overwrite(modStart, modEnd, resolved.id)\\n          }\\n        }\\n      }\\n\\n      return {\\n        code: ms.toString(),\\n        // 生成 SourceMap\\n        map: ms.generateMap(),\\n      }\\n    },\\n  }\\n}\\n\\n```\\n\\nok,我们便完成了 JS 代码的 `import` 分析工作。接下来，我们把上面实现的三个插件进行注册,就是刚才的`resolvePlugins`函数拉。\\n\\nsrc/node/plugin/index.ts\\n```\\n// src/node/plugin/index.ts\\nimport { esbuildTransformPlugin } from \\\"./esbuild\\\";\\nimport { importAnalysisPlugin } from \\\"./importAnalysis\\\";\\nimport { resolvePlugin } from \\\"./resolve\\\";\\nimport { Plugin } from \\\"../plugin\\\";\\n\\nexport function resolvePlugins(): Plugin[] {\\n  return [resolvePlugin(), esbuildTransformPlugin(), importAnalysisPlugin()];\\n}\\n```\\n\\n接下来我们可以在`playground`项目下执行`pnpm dev`，，不过在执行之前要把不是`tsx`、`ts`、的文件先注释掉（比如css文件和静态资源文件，我们后面再处理）,在浏览器里面访问`http://localhost:3000`，见证奇迹的时刻到了哇,我们可以看到如下页面：\\n\\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f73d65475fa34a579349e4fab038744b~tplv-k3u1fbpfcp-watermark.image?)\\n\\n打开控制台看看main.tsx的内容，可以看到react和react-dom的引用都被换成与构建产物的地址了:\\n\\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da27bc0ad8ee4b74974811bc82db4d6b~tplv-k3u1fbpfcp-watermark.image?)\\n\\nok我们完成了 JS/TS/JSX/TSX 文件的编译拉，我们还差什么呢，页面页面一定是离不开css的对吧，我们的demo项目中的css代码是这样引入的：\\n\\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f90cbac84094d31a20c348d0072efd7~tplv-k3u1fbpfcp-watermark.image?)\\n\\n但是浏览器没法识别这样的语法哇，我们需要将这个模块包装成浏览器可以识别的模块才行的哇，也就是js模块拉，其中模块加载和转换的逻辑我们可以通过插件来实现。当然，首先我们需要在 `transform` 中间件中允许对 CSS 的请求进行处理，内容如下:\\n\\nsrc/node/server/middlewares/transform.ts\\n\\n```\\n// 需要增加的导入语句\\n+ import { isCSSRequest } from '../../utils';\\n\\nexport function transformMiddleware(\\n  serverContext: ServerContext\\n): NextHandleFunction {\\n  return async (req, res, next) => {\\n    if (req.method !== \\\"GET\\\" || !req.url) {\\n      return next();\\n    }\\n    const url = req.url;\\n    debug(\\\"transformMiddleware: %s\\\", url);\\n    // transform JS request\\n-    if (isJSRequest(url)) {\\n+    if (isJSRequest(url) || isCSSRequest(url)) {\\n      // 后续代码省略\\n     }\\n\\n    next();\\n  };\\n}\\n```\\nok接下来我们来补充对应的工具函数:\\n\\n\\n```\\n// src/node/utils.ts\\nexport const isCSSRequest = (id: string): boolean =>\\n  cleanUrl(id).endsWith(\\\".css\\\");\\n```\\n\\n## CSS编译插件\\n\\nok我们接下来要开发 `CSS` 的编译插件，没有css可不行，界面太丑了，我们直接新建一个`src/node/plugins/css.ts`文件，内容如下:\\n\\nsrc/node/plugins/css.ts\\n\\n\\n```ts\\n\\nimport { readFile } from \\\"fs-extra\\\";\\nimport { Plugin } from \\\"../plugin\\\";\\n\\nexport function cssPlugin(): Plugin {\\n  return {\\n    name: \\\"m-vite:css\\\",\\n    load(id) {\\n      // 加载\\n      if (id.endsWith(\\\".css\\\")) {\\n        return readFile(id, \\\"utf-8\\\");\\n      }\\n    },\\n    // 转换逻辑\\n    async transform(code, id) {\\n      if (id.endsWith(\\\".css\\\")) {\\n        // 包装成 JS 模块\\n        const jsContent = `\\nconst css = '${code.replace(/\\\\r\\\\n/g, \\\"\\\")}';\\nconst style = document.createElement(\\\"style\\\");\\nstyle.setAttribute(\\\"type\\\", \\\"text/css\\\");\\nstyle.innerHTML = css;\\ndocument.head.appendChild(style);\\nexport default css;\\n`.trim();\\n        return {\\n          code: jsContent,\\n        };\\n      }\\n      return null;\\n    },\\n  };\\n}\\n\\n```\\n这个插件的逻辑比较简单，主要是将封装一层 `JS` 模板代码，将`CSS` 包装成一个 `ES` 模块，当浏览器执行这个模块的时候，会创建`styl`e标签将`CSS`文件字符串的内容给搞到标签里去，然后就可以在页面中生效了。\\n\\n接着我们来注册这个 CSS 插件:\\n\\nsrc/node/plugins/index.ts\\n```\\nimport { esbuildTransformPlugin } from \\\"./esbuild\\\";\\nimport { resolvePlugin } from \\\"./resolve\\\";\\nimport { importAnalysisPlugin } from \\\"./importAnalysis\\\";\\nimport { cssPlugin } from \\\"./css\\\";\\nimport { Plugin } from \\\"../plugin\\\";\\n\\nexport function resolvePlugins(): Plugin[] {\\n  return [\\n    resolvePlugin(),\\n    esbuildTransformPlugin(),\\n    importAnalysisPlugin(),\\n    cssPlugin(),\\n  ];\\n}\\n\\n```\\n\\n现在，我们通过`pnpm dev`来启动 `playground` 项目，在`tsx`将`css`文引入(之前是注释掉的),ok,启动之后我们可以看到一个好看的界面，乱杀之前那个：\\n\\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2af5de4b2b641f39c6abb567c54af38~tplv-k3u1fbpfcp-watermark.image?)\\n\\n大家这时候可能会说了：诶，好像少了个`react`的图标哇，没有灵魂了，不好看了，心情不好了，不想再看了，难受。别急，接下来我们就来实现静态资源的加载，让大大的`react`图标出来哈。\\n\\n## 静态资源加载插件\\n\\n我们先来看看react图标在哪里哈：\\n\\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b622cc2b14724804820b662a78afcd66~tplv-k3u1fbpfcp-watermark.image?)\\n\\n站在 no-bundle 服务的角度，从如上的代码我们可以分析出静态资源的两种请求:\\n\\n-   import 请求。如 `import logo from \\\"./logo.svg\\\"`。\\n-   资源内容请求。如 img 标签将资源 url 填入 src，那么浏览器会请求具体的资源内容。\\n\\n因此，接下来为了实现静态资源的加载，我们需要做两手准备: 对静态资源的 `import` 请求返回资源的 `url`；对于具体内容的请求，读取静态资源的文件内容，并响应给浏览器。\\n\\n首先处理 `import` 请求，我们可以在 `TSX` 的 `import` 分析插件中，给静态资源相关的 `import` 语句做一个标记:\\n\\nsrc/node/plugins/importAnalysis.ts\\n\\n```\\n\\nasync transform(code, id) {\\n  // 省略前面的代码\\n  for (const importInfo of imports) {\\n    const { s: modStart, e: modEnd, n: modSource } = importInfo;\\n    if (!modSource) continue;\\n+    // 静态资源\\n+    if (modSource.endsWith(\\\".svg\\\")) {\\n+      // 加上 ?import 后缀，其他的静态资源同理\\n+       const resolvedUrl = normalizePath(\\n+            path.relative(\\n+              path.dirname(id),\\n+              path.resolve(path.dirname(id), modSource)\\n+            )\\n+          );\\n+      ms.overwrite(modStart, modEnd, `./${resolvedUrl}?import`);\\n+      continue;\\n    }\\n  }\\n}\\n```\\nok我们看看编译后的App.tsx是什么样的: \\n\\n\\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4b3beb58d0c4f0fb3a7f5e42820fcb2~tplv-k3u1fbpfcp-watermark.image?)\\n\\nok我们可以看到路径后面多了个`?import`的后缀，有这个后缀代表这是静态资源的请求，然后我们在`transform`插件里对这种请求进行处理:\\n\\nsrc/node/server/middlewares/transform.ts\\n```\\n// 需要增加的导入语句\\n+ import { isImportRequest } from '../../utils';\\n\\nexport function transformMiddleware(\\n  serverContext: ServerContext\\n): NextHandleFunction {\\n  return async (req, res, next) => {\\n    if (req.method !== \\\"GET\\\" || !req.url) {\\n      return next();\\n    }\\n    const url = req.url;\\n    debug(\\\"transformMiddleware: %s\\\", url);\\n    // transform JS request\\n-    if (isJSRequest(url) || isCSSRequest(url)) {\\n+    if (isJSRequest(url) || isCSSRequest(url) || isImportRequest(url)) {\\n      // 后续代码省略\\n     }\\n\\n    next();\\n  };\\n}\\n```\\n然后我们补充工具函数\\n\\nsrc/node/utils.ts\\n```\\nexport function isImportRequest(url: string): boolean {\\n  return url.endsWith(\\\"?import\\\");\\n}\\n```\\n\\nok接下来我们就可以开发静态资源插件了。新建`src/node/plugins/assets.ts`，内容如下:\\n\\nsrc/node/plugins/assets.ts\\n\\n```ts\\nimport { Plugin } from \\\"../plugin\\\";\\nimport { cleanUrl, normalizePath, removeImportQuery } from \\\"../utils\\\";\\n\\nexport function assetPlugin(): Plugin {\\n  return {\\n    name: \\\"m-vite:asset\\\",\\n    async load(id) {\\n      const cleanedId = removeImportQuery(cleanUrl(normalizePath(id)));\\n\\n      // 这里仅处理 svg\\n      if (cleanedId.endsWith(\\\".svg\\\")) {\\n        return {\\n          // 包装成一个 JS 模块\\n          // 因为这里的window用户路径有点问题，要盘符给去掉，mac用户不用replace\\n          // window用户的\\n          code: `export default \\\"${cleanedId.replace(\\\"C:\\\", \\\"\\\")}\\\"`,\\n          // mac用户的，如果是mac换成下面的代码\\n          // code: `export default \\\"${cleanedId}\\\"`,\\n        };\\n      }\\n    },\\n  };\\n}\\n\\n```\\nok我们来注册这个插件:\\n\\nsrc/node/plugins/index.ts\\n```\\nimport { esbuildTransformPlugin } from \\\"./esbuild\\\";\\nimport { resolvePlugin } from \\\"./resolve\\\";\\nimport { importAnalysisPlugin } from \\\"./importAnalysis\\\";\\nimport { cssPlugin } from \\\"./css\\\";\\nimport { assetPlugin } from \\\"./assets\\\";\\nimport { Plugin } from \\\"../plugin\\\";\\n\\nexport function resolvePlugins(): Plugin[] {\\n  return [\\n    resolvePlugin(),\\n    esbuildTransformPlugin(),\\n    importAnalysisPlugin(),\\n    cssPlugin(),\\n    assetPlugin(),\\n  ];\\n}\\n\\n}\\n```\\n\\nOK，我们处理完了静态资源的 import 请求，接着我们还需要处理非 import 请求，返回资源的具体内容。我们可以通过一个中间件来进行处理，我们新建`src/node/server/middlewares/static.ts`这个文件，内容如下：\\n\\nsrc/node/server/middlewares/static.ts\\n\\n```\\nimport { NextHandleFunction } from \\\"connect\\\";\\nimport { isImportRequest } from \\\"../../utils\\\";\\n// 一个用于加载静态资源的中间件\\nimport sirv from \\\"sirv\\\";\\n\\nexport function staticMiddleware(): NextHandleFunction {\\n  const serveFromRoot = sirv(\\\"/\\\", { dev: true });\\n  return async (req, res, next) => {\\n    if (!req.url) {\\n      return;\\n    }\\n    // 不处理 import 请求\\n    if (isImportRequest(req.url)) {\\n      return;\\n    }\\n    serveFromRoot(req, res, next);\\n  };\\n}\\n```\\n\\n我们在服务端中注册这个中间件:\\n\\nsrc/node/server/index.ts\\n\\n```\\n// 需要添加的引入语句\\n+ import { staticMiddleware } from \\\"./middlewares/static\\\";\\n\\nexport async function startDevServer() {\\n  // 前面的代码省略\\n+  app.use(staticMiddleware());\\n\\n  app.listen(3000, async () => {\\n    // 省略实现\\n  });\\n}\\n```\\n\\n在playground里执行`pnpm dev`运行项目,然后我们就可以看到大大的react图标了：\\n\\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cedd523cb875405a802fdca7ce5b6cb1~tplv-k3u1fbpfcp-watermark.image?)\\n\\nok我们`mini-vite`的插件机制的开发终于搞定了,怎么样是不是干货满满呢，有问题可以找我一起讨论哇！！！\\n\\n## 往期文章\\n\\n- ### [一起写个vite吧！(1) --环境搭建+依赖预构建](https://juejin.cn/post/7154007357305913357)\\n\\n### [mini-vite仓库地址(里面有对应的提交记录，如果有兴趣可以拉下来跑一跑哇)](https://github.com/cjhw/mini-vite)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"
    },
    {
        "article_id": "7153603861343633415",
        "cover_image": "",
        "title": "Mpx2.8 版本正式发布，使用组合式 API 开发小程序",
        "brief": "Mpx2.8 版本正式发布，完整支持组合式 API，让用户能够使用时下最热门且备受好评的开发方式进行小程序开发。",
        "ctime": "1665578278",
        "mtime": "1665638976",
        "user_name": "hiyuki",
        "avatar": "https://p26-passport.byteacctimg.com/img/user-avatar/be946dc67a0e3de8c64bc5582d928981~300x300.image",
        "content": "> 作者：[hiyuki](https://github.com/hiyuki)\\n\\n小程序跨端开发框架 [Mpx](https://www.mpxjs.cn/) 自18年立项开源以来，如今已经走过了第四个年头，其高性能、优体验、跨平台的特性收获了公司内外开发者用户的一致好评。\\n\\n为了不辜负开发者用户对我们的信赖，更好地支持集团小程序业务开发，一方面我们对 Mpx 的稳定版本进行着高频的维护迭代，快速响应处理集团内外开发者用户在框架开发使用过程中遇到的问题；另一方面我们持续跟进探索业内最新动态，力争将更新更好的开发能力与体验带给小程序开发者用户。继年初我们在 [2.7 版本](https://mpxjs.cn/guide/migrate/2.7.html)中对 Mpx 的编译系统进行重构适配 Webpack5，基于持久化缓存大幅提升编译速度后，在最新的 [2.8 版本](https://mpxjs.cn/guide/migrate/2.8.html)中，我们对 Mpx 的运行时框架也进行了大量重构改造工作，完整支持了 Vue3 提出的组合式 API 开发范式，让用户能够使用当下最热门的开发方式进行小程序开发，我们先来简单感受一下组合式 API 的使用：\\n\\n```html\\n<template>\\n  <view>{{ collectionName }}: {{ book.title }}({{ readersNumber }})</view>\\n  <button bindtap=\\\"addReaders\\\">addReaders</button>\\n</template>\\n\\n<script>\\n  import { createComponent, ref, reactive, onMounted } from '@mpxjs/core'\\n\\n  createComponent({\\n    properties: {\\n      collectionName: String\\n    },\\n    setup () {\\n      const readersNumber = ref(0)\\n      const book = reactive({ title: 'Mpx' })\\n\\n      onMounted(() => {\\n        console.log('Component mounted.')\\n      })\\n\\n      // 暴露给 template\\n      return {\\n        readersNumber,\\n        book,\\n        addReaders () {\\n          readersNumber.value++\\n        }\\n      }\\n    }\\n  })\\n</script>\\n```\\n\\n可以看出和 Vue3 组合式 API 的使用是高度类似的，利用框架导出的一系列响应式 API 和 生命周期钩子函数在 `setup` 中编写业务逻辑，并将模板依赖的数据与方法作为返回值返回，与传统的选项式 API 相比，组合式 API 具备以下优势：\\n\\n* 更好的逻辑复用，通过函数包装复用逻辑，显式引入调用，方便简洁且符合直觉，规避消除了 mixins 复用中存在的缺陷；\\n* 更灵活的代码组织，相比于选项式 API 提前规定了代码的组织方式，组合式 API 在这方面几乎没有做任何限制与规定，更加灵活自由，在功能复杂的庞大组件中，我们能够通过组合式 API 让我们的功能代码更加内聚且有条理，不过这也会对开发者自身的代码规范意识提出更高要求；\\n* 更好的类型推导，虽然基于 `this` 的选项式 API 通过 `ThisType` 类型体操的方式也能在一定程度上实现 TS 类型推导，但推导和实现成本较高，同时仍然无法完美覆盖一些复杂场景（如嵌套 mixins 等）；而组合式 API 以本地变量和函数为基础，本身就是类型友好的，我们在类型方面几乎不需要做什么额外的工作就能享受到完美的类型推导。\\n\\n同时与 React Hooks 相比，组合式 API 中的 `setup` 函数只在初始化时单次执行，在数据响应能力的加持下大大降低了理解与使用成本，基于以上原因，我们决定为 Mpx 添加组合式 API 能力，让用户能够用组合式 API 方式进行小程序开发。\\n\\n## 组合式 API 实现\\n\\n从上面的简单示例中可以看出，抛开响应式 API 和生命周期注册模式的变化，组合式 API 的实现要点在于动态添加模板依赖的数据和方法，这也是我们在小程序中实现组合式 API 可能遇到的核心技术卡点。\\n\\n对于动态添加模板依赖数据，我们在过去的实践中已经充分证明了其可行性，事实上，从 Mpx 最初的版本开始，我们就充分利用了这项能力来实现我们对计算属性和 `dataFn` （类似于 Vue 使用函数定义 `data`）的支持，这项能力的关键在于存在合适的生命周期用于动态添加初始化数据，这里对于初始化数据的定义是能够影响组件树的初始渲染，举个简单的例子：存在一对父子组件 parent/child，parent 使用 `props` 向 child 传递数据，当我们在 parent 初始创建时使用 `setData` 动态添加 `props` 数据，同时 child 在初始创建时能够通过 `props` 正确获取到这部分的数据时，我们就可以将这部分动态添加的数据视作初始化数据，这是我们在小程序中实现完备数据响应支持的基础。\\n\\n幸运的是，目前业内所有主流小程序平台（微信/支付宝/百度/字节/QQ）都支持了上述能力，微信从一开始就支持在 `attached` 生命周期中调用 `setData` 函数动态添加初始化数据，在上述的父子 `props` 传递场景中，也能够在子组件的 `attached` 中正确获取这部分数据，支付宝和字节小程序一开始并不支持该能力，不过支付宝在 `component2` 组件系统重构后，字节在橙心合作项目中与我们沟通后，都成功支持了该能力。\\n\\n而对于动态返回的方法，最简单能想到的方案就是直接挂载到组件实例上，经过我们的完整测试，上述业内主流小程序平台都支持使用这种方式动态添加方法，基于以上事实，我们非常确定组合式 API 能够在小程序环境中顺利实现，下图简要展示了 Mpx 支持组合式 API 的初始化流程：\\n\\n![composition-api-init](https://dpubstatic.udache.com/static/dpubimg/0bxxw8bB9PJxXLeiMQ__6_composition-api-init.png)\\n\\n\\n### 生命周期钩子函数\\n\\n在组合式 API 中，`setup` 函数只有在组件创建时初始化单次执行，因此需要提供一系列生命周期钩子函数来代替选项式 API 中的生命周期钩子选项，由于小程序原生只支持选项式的生命周期注册方式，我们通过`预注册 -> 驱动`的方式来实现 `setup` 中函数式注册生命周期钩子的语法糖，简单来讲就是使用选项式 `mixins` 的方式提前注册所有需要的生命周期钩子，在选项式生命周期钩子执行时驱动对应在 `setup` 中使用生命周期钩子函数注册的代码逻辑执行，如下图所示：\\n\\n![composition-api-hook](https://dpubstatic.udache.com/static/dpubimg/2nmOjxvubyk6H32yP5cFc_composition-api-hook.png)\\n\\n作为跨端小程序框架，Mpx 需要兼容不同小程序平台不同的生命周期，在选项式 API 中，我们在框架中内置了一套统一的生命周期，将不同小程序平台的生命周期转换映射为内置生命周期后再进行统一的驱动，以抹平不同小程序平台生命周期钩子的差异，如微信小程序的 `attached` 钩子和支付宝小程序的 `onInit` 钩子，在组合式 API 中，我们沿用了同样的逻辑，设计了一套与框架内置生命周期对应的生命周期钩子函数，以相同的方式进行驱动，因此这些生命周期钩子函数天然具备了跨平台特性，下表显示了在组件 / 页面中框架生命周期与原生平台生命周期的对应关系：\\n\\n|框架内置生命周期|Hooks in `setup`|微信原生|支付宝原生|\\n|:------------|:------------------|:-----|:-------|\\n| BEFORECREATE | `null` |attached（数据响应初始化前）|onInit（数据响应初始化前）|\\n| CREATED | `null` |attached（数据响应初始化后）|onInit（数据响应初始化后）|\\n| BEFOREMOUNT | onBeforeMount |ready（`MOUNTED` 执行前）|didMount（`MOUNTED` 执行前）| \\n| MOUNTED | onMounted |ready（`BEFOREMOUNT` 执行后）|didMount（`BEFOREMOUNT` 执行后）| \\n| BEFOREUPDATE | onBeforeUpdate |`null`（`setData` 执行前）|`null`（`setData` 执行前）|\\n| UPDATED | onUpdated |`null`（`setData` callback）|`null`（`setData` callback）|\\n| BEFOREUNMOUNT | onBeforeUnmount |detached（数据响应销毁前）|didUnmount（数据响应销毁前）|\\n| UNMOUNTED | onUnmounted |detached（数据响应销毁后）|didUnmount（数据响应销毁后）|\\n| ONLOAD | onLoad |onLoad|onLoad|\\n| ONSHOW | onShow |onShow|onShow|\\n| ONHIDE | onHide |onHide|onHide|\\n| ONRESIZE | onResize |onResize|events.onResize|\\n\\n> 同 Vue3 一样，Mpx 在组合式 API 中没有提供 `BEFORECREATE` 和 `CREATED` 对应的生命周期钩子函数，用户可以直接在 `setup` 中编写相关逻辑。\\n\\n#### 具有副作用的页面事件\\n\\n在小程序中，一些页面事件的注册存在副作用，即该页面事件注册与否会产生实质性的影响，比如微信中的 `onShareAppMessage` 和 `onPageScroll`，前者在不注册时会禁用当前页面的分享功能，而后者在注册时会带来视图与逻辑层之间的线程通信开销，对于这部分页面事件，我们无法通过`预注册 -> 驱动`方式提供组合式 API 的注册方式，用户可以通过选项式 API 的方式来注册使用，通过 `this` 访问组合式 API `setup` 函数的返回。\\n\\n然而这种使用方式显然不够优雅，我们考虑是否可以通过一些非常规的方式提供这类副作用页面事件的组合式 API 注册支持，例如，借助编译手段。我们在运行时提供了副作用页面事件的注册函数，并在编译时通过 `babel` 插件的方式解析识别到当前页面中存在这些特殊注册函数的调用时，通过框架已有的`编译 -> 运行时注入`的方式将事件驱动逻辑添加到当前页面当中，以提供相对优雅的副作用页面事件在组合式 API 中的注册方式，同时不产生非预期的副作用影响，简单示例如下：\\n\\n```js\\nimport { createPage, ref, onShareAppMessage } from '@mpxjs/core'\\n\\ncreatePage({\\n  setup () {\\n    const count = ref(0)\\n\\n    onShareAppMessage(() => {\\n      return {\\n        title: '页面分享'\\n      }\\n    })\\n\\n    return {\\n      count\\n    }\\n  }\\n})\\n```\\n\\n目前我们通过这种方式支持的页面事件如下：\\n\\n| 页面事件 | Hooks in `setup` | 平台支持 |\\n|:------------|:------------------|:-----|\\n| onPullDownRefresh | onPullDownRefresh | 全小程序平台 + web |\\n| onReachBottom | onReachBottom | 全小程序平台 + web |\\n| onPageScroll | onPageScroll | 全小程序平台 + web |\\n| onShareAppMessage | onShareAppMessage | 全小程序平台 |\\n| onTabItemTap | onTabItemTap | 微信/支付宝/百度/QQ |\\n| onAddToFavorites | onAddToFavorites | 微信 / QQ |\\n| onShareTimeline | onShareTimeline | 微信 |\\n| onSaveExitState | onSaveExitState | 微信 |\\n\\n> **特别注意**，由于静态编译分析实现方式的限制，这类页面事件的组合式 API 使用需要满足页面事件注册函数（如`onShareAppMessage`）的调用和 `createPage` 的调用位于同一个 js 文件当中。\\n\\n关于生命周期钩子函数的更多信息可以查看[这里](https://mpxjs.cn/guide/composition-api/composition-api.html#lifecycle-hooks)。\\n\\n### `<script setup>`\\n\\n同 Vue3 一样，我们在 `.mpx` 单文件组件 / 页面中实现了 `<script setup>` 的组合式 API 编译语法糖，相较于常规的写法，`<script setup>` 具备以下优势：\\n\\n* 更少的样板内容，更简洁的代码\\n* 能够使用纯 TypeScript 声明 props 类型\\n* 更好的 IDE 类型推导性能\\n\\n简单使用示例如下：\\n\\n```html\\n<script setup>\\n  import { ref } from '@mpxjs/core'\\n\\n  const msg = ref('hello')\\n\\n  function log () {\\n    console.log(msg.value)\\n  }\\n</script>\\n<template>\\n  <view>msg: {{msg}}</view>\\n  <view ontap=\\\"log\\\">click</view>\\n</template>\\n```\\n\\n可以看到使用方式与 Vue3 基本一致，不过由于 Mpx 的组合式 API 设计实现与 Vue3 存在差异，对应 `<script setup>` 也与 Vue3 中存在一些差异：\\n\\n* 不支持 `import` 快捷注册组件\\n* 没有 `defineEmits()` 编译宏\\n* 没有 `useSlots()` 和 `useAttrs()` 运行时函数\\n* 以编译宏的形式提供了 `useContext()`，获取 `setup` 函数的第二个参数 `context`\\n* `defineExpose()` 编译宏的作用与 Vue3 中有所差别，能够限定模板中能访问的变量范围\\n\\n> **特别注意**，受小程序底层技术限制，我们在 Mpx 的实现中无法像 Vue3 那样将模板编译的渲染函数和 `<script setup>` 放置到同一作用域下进行变量访问，而是通过静态编译分析提取出 `<script setup>` 的顶层作用域变量，再以上文中提到的动态添加数据与方法的方式将其设置到模板当中，如果 `<script setup>` 中声明了较多顶层作用域变量，它们并不一定都会被模板访问，就会带来无效的性能开销，因此我们强烈建议使用 `defineExpose()` 限定模板中能访问的变量范围，你可以把它等同于 `setup` 函数中的 `return`。\\n\\n关于 `<script setup>` 的更多信息可以查看[这里](https://mpxjs.cn/guide/composition-api/composition-api.html#script-setup)。\\n\\n### 组合式 API 与 Vue3 中的差异\\n\\n我们来总结一下 Mpx 中组合式 API 与 Vue3 中的区别：\\n\\n* `setup` 的 `context` 参数不同，详见[这里](https://mpxjs.cn/guide/composition-api/composition-api.html#context)\\n* `setup` 不支持返回**渲染函数**\\n* `setup` 不能是异步函数\\n* `<script setup>` 提供的宏方法不同，详见[这里](https://mpxjs.cn/guide/composition-api/composition-api.html#script-setup)\\n* `<script setup>` 不支持 `import` 快捷注册组件\\n* 支持的生命周期钩子不同，详见[这里](https://mpxjs.cn/guide/composition-api/composition-api.html#lifecycle-hooks)\\n* 模板引用的方式不同，详见[这里](https://mpxjs.cn/guide/composition-api/composition-api.html#template-ref)\\n\\n关于组合式 API 的更多信息可以查看[这里](https://mpxjs.cn/guide/composition-api/composition-api.html)。\\n\\n## 响应式 API 实现\\n\\n组合式 API 的正常工作离不开响应式 API 的支持，下面我们来聊聊 Mpx 中响应式 API 的设计实现。我们知道 Vue3 中响应式 API 基于 `proxy` 进行了重构实现，但是目前 `proxy` 的浏览器兼容占比仍然无法达到我们对于线上可用性的要求，因此在 Mpx 中，我们仍然基于 `Object.defineProperty` 进行核心数据响应能力的实现，同时借鉴了 Vue3 中优秀的代码设计与实现，如 `reactiveEffect` 和 `effectScope` 等，尽可能实现与 Vue3 中响应式 API 能力对齐。\\n\\n说到这里，很多同学可能会想到 `@vue/composition-api` 这个库，该库提供的关键能力正是基于 Vue2 的数据响应系统模拟实现 Vue3 中的响应式 API，我们在前期也对 `@vue/composition-api` 在 Mpx 中的复用进行了非常有价值的探索尝试。不过最终我们还是决定在 Mpx 的运行时框架中进行独立实现，原因主要在于：`@vue/composition-api` 是作为一个 Vue2 插件存在，无法直接侵入 Vue2 源码，导致部分能力无法实现或会带来额外的性能开销，例如 `flush: 'post'` 和 `ref` 自动解包等。我们也看到在最新的 Vue2.7 版本中，也是在运行时框架里重新实现了这部分内容，以规避上述问题。\\n\\n下图展示了 Mpx 中响应式 API 核心模块依赖关系：\\n\\n![composition-api-reactive](https://dpubstatic.udache.com/static/dpubimg/4ySdEqTRhc_DRWWCJWrhJ_composition-api-reactive.png)\\n\\n### 数据响应限制带来的差异\\n\\n由于 `Object.defineProperty` 的能力限制，Mpx 存在和 Vue2 一致的数据响应限制，无法感知到对象 property 的添加和删除以及数组的索引赋值，与 Vue2 一致，我们暴露了 `set` 和 `del` API 来让用户显式地进行相关操作。除此之外，由于使用方式发生了变化，我们在使用 `reactive` API 创建响应式数据时，还会遇到新的限制，我们来看一下代码示例：\\n\\n```js\\nimport { reactive, watchSyncEffect, set } from '@mpxjs/core'\\n\\nconst state = reactive([0, 1, 2, 3])\\n\\nwatchSyncEffect(() => {\\n  console.log(JSON.stringify(state)) // [0,1,2,3]\\n})\\n\\nset(state, 1, 3) // 不会触发 watchEffect\\n\\nstate.push(4) // 不会触发 watchEffect\\n```\\n\\n可以看出，即使我们使用了 `set` API 和数组原型方法对数组进行修改，我们仍然无法监听到数据变化。\\n\\n> 相同的限制在使用 `Object.defineProperty` 的 Vue2.7 中也同样存在。\\n\\n为什么会存在这个限制呢？原因在于：基于 `Object.defineProperty` 实现的数据响应系统中，我们会对对象的每个已有属性创建了一个 `Dep` 对象，在对该属性进行 `get` 访问时通过这个对象将其与依赖它的观察者 `ReactiveEffect` 关联起来，并在 `set` 操作时触发关联 `ReactiveEffect` 的更新，这是我们大家都知道的数据响应的基本原理。但是对于新增/删除对象属性和修改数组的场景，我们无法事先定义当前不存在属性的 `get/set` (当然这在 `proxy` 当中是可行的)，因此我们会把对象或者数组本身作为一个数据依赖创建 `Dep` 对象，**通过父级访问**该数据时定义的 `get/set` 将其关联到对应的 `ReactiveEffect`，并在对数据进行新增/删除属性或数组操作时通过数据本身持有的 `Dep` 对象触发关联 `ReactiveEffect` 的更新，如下图所示：\\n\\n![数据响应原理](https://dpubstatic.udache.com/static/dpubimg/XkI9cQBsLy_7np-T3rt56_composition-api-reactive2.png)\\n\\n需要注意的是，**通过父级访问**是建立 `Dep` 与 `ReactiveEffect` 关联关系的先决条件，在选项式 API 中，我们访问组件的响应式数据都需要通过 `this` 进行访问，相当于这些数据都存在 `this` 这个必要的**父级**，因此我们在使用 `$set/$delete` 进行对对象进行新增/删除属性或对数组进行修改时都能得到符合预期的结果，唯一的限制在于不能新增/删除根级数据属性，原因就在于 `this` 不存在访问它的父级。\\n\\n但是在组合式 API 中，我们不需要通过 `this` 访问响应式数据，因此通过 `reactive()` 创建的响应式数据本身就是根级数据，我们自然无法通过上述方式感知到根级数据自身的变化（在 Vue3 中，基于 `proxy` 提供的强大能力响应式系统能够精确地感知到数据属性，甚至是当前不存在属性的访问与修改，不需要为数据自身建立 `Dep` 对象，自然也不存在相关问题）。\\n\\n在这种情况下，我们就需要用 `ref()` 创建响应式数据，因为 `ref` 创建了一个包装对象，我们永远需要通过 `.value` 来访问其持有的数据（不管是显式访问还是隐式自动解包），这样就能保证 `ref` 数据自身的变化能够被响应式系统感知，因此也不会遇到上面描述的问题，如下所示：\\n\\n```js\\nimport { ref, watchSyncEffect, set } from '@mpxjs/core'\\n\\nconst state = ref([0, 1, 2, 3])\\n\\nwatchSyncEffect(() => {\\n  console.log(JSON.stringify(state.value)) // [0,1,2,3]\\n})\\n\\nset(state.value, 1, 3) // [0,3,2,3]\\n\\nstate.value.push(4) // [0,3,2,3,4]\\n```\\n\\n### 响应式 API 与 Vue3 中的区别\\n\\n我们来总结一下 Mpx 中响应式 API 与 Vue3 中的区别：\\n\\n* 不支持 `raw` 相关 API（`markRaw` 除外，我们提供了该 API 用于跳过部分数据的响应式转换）\\n* 不支持 `readonly` 相关 API\\n* 不支持 `watchEffect`、`watch`、`computed` 的调试选项\\n* 不支持对 `map`、`set` 等集合类型进行响应式转换\\n* 受到 `Object.defineProperty` 实现带来的数据响应限制影响\\n\\n关于响应式 API 的更多信息可以查看[这里](https://mpxjs.cn/guide/composition-api/reactive-api.html)。\\n\\n## 生态周边适配\\n\\n除了 Mpx 运行时核心提供了组合式 API 支持外，我们对 Mpx 的周边生态能力也都进行了组合式 API 适配支持，包括 `store`、`i18n`、`fetch` 等。\\n\\n### Pinia store 支持\\n\\nPinia 是基于组合式 API 设计的全新数据管理方案，目前已经取代 Vuex 成为 Vue3 官方推荐的 store，我们在研究了 pinia 的设计实现后，对其简练优雅的设计思想及其与组合式 API 的高度适配非常满意（特别是在使用 `setup` 函数创建 store 时，使用心智与编写组件完全一致，可以将其视作是没有视图的组件）。因此我们 fork 了 pinia 的源码仓库，基于 Mpx 提供的数据响应能力对其进行了适配改造，使其在 Mpx 环境下也能正常运行，目前相关代码维护在 `@mpxjs/pinia` 中，在组合式 API 中的简单使用示例如下：\\n\\n```js\\nimport { createComponent, ref, computed, toRefs } from '@mpxjs/core'\\nimport { defineStore } from '@mpxjs/pinia'\\n\\n// 使用组合式 API 创建 pinia store 的使用心智与 setup 函数完全一致，强烈推荐\\nconst useSetupStore = defineStore('setup', () => {\\n  const count = ref(0)\\n  const doubleCount = computed(() => count.value * 2)\\n\\n  function increment () {\\n    count.value++\\n  }\\n\\n  return { count, doubleCount, increment }\\n})\\n\\ncreateComponent({\\n  setup () {\\n    const store = useSetupStore()\\n    // store 同 props 类似是一个 reactive 对象，解构数据需使用 toRefs 以保持数据响应性\\n    const { count, doubleCount } = toRefs(store)\\n    // 方法可以直接解构\\n    const { increment } = store\\n  \\n    return { count, doubleCount, increment }\\n    //\\n  }\\n})\\n```\\n\\nMpx 中通过 `createStore` 创建的类 Vuex store 在组合式 API 中仍然可以使用，我们可以在 `setup` 函数中引用 store 实例进行[数据读取与方法调用](https://mpxjs.cn/guide/advance/store.html#use-store-in-composition-api)，不过整体使用体验与 pinia store 存在较大差距，我们还是推荐在组合式 API 开发中优先使用 pinia store 作为数据管理方案。\\n\\n### I18n 支持\\n\\n传统选项式 API 中，我们使用 `this.$t` 方法在组件内调用翻译函数，但在组合式 API 中我们无法访问 `this`，为此我们参考了 Vue I18n 最新的 9.x 版本，该版本针对 Vue3 及组合式 API 进行了重构适配，提供了全新的 `useI18n` API，简单使用示例如下：\\n\\n```html\\n<template>\\n  <view>{{t('message.hello')}}</view>\\n  <button bindtap=\\\"changeLocale\\\">change locale</button>\\n</template>\\n\\n<script>\\n  import { createComponent, useI18n } from '@mpxjs/core'\\n\\n  createComponent({\\n    setup () {\\n      // useI18n 不传参数时指向全局 i18n 对象，也可以传递 locale 和 messages 配置创建局部 i18n 对象\\n      const { t, locale } = useI18n()\\n\\n      function changeLocale () {\\n        locale.value = locale.value === 'zh-CN' ? 'en-US' : 'zh-CN'\\n      }\\n      // 返回的翻译方法名必须为 t，不能进行重命名\\n      return { t, changeLocale }\\n    }\\n  })\\n</script>\\n```\\n\\n> 上面示例代码看上去像是我们在模板上直接调用 setup() 返回的 t 翻译方法，但是熟悉小程序开发的同学都知道在小程序架构下这是不可能的，示例中的写法其实由框架通过编译 + 运行时手段实现的语法糖，我们会在模板编译时定向扫描 t/te/tm 等 i18n 方法，将其转换为计算属性注入到运行时当中，这就意味着如果我们对翻译方法进行重命名，模板编译时无法识别出 i18n 方法调用，自然也就无法正常运行。\\n\\nMpx 中 i18n 提供了两种实现模式，分别是 wxs 和 computed，可以使用编译选项中的 `i18n.isComputed` 进行切换，两种方式各有优劣，其中：\\n* wxs 模式的优势在于逻辑层和视图层独立维护语言集，无额外运行时性能开销，且使用没有任何限制；劣势同样源于语言集同时存在于逻辑层（js）和视图层（wxs）当中，这部分的包体积占用翻倍；\\n* computed 模式的优势在于语言集只存在于逻辑层中，无额外包体积占用，且可以通过动态添加语言集的方式进一步减少包体积占用；劣势则是会产生额外的运行时性能开销，且使用上存在限制，模板调用时无法直接访问 `wx:for` 中的 `item` 和 `index`。\\n\\n在组合式 API 中模板上使用 `useI18n()` 返回的翻译函数 `t/te/tm` 时，为了完整实现 `useI18n` API的功能，会强制使用 computed 模式进行实现，这也意味着该用法会受到 computed 模式使用限制的影响。不过当你不需要使用 `useI18n` 接受 `messages` 参数创建局部语言集作用域功能时，你也完全可以在模板中继续使用原有的 `$t/$tc/$te/$tm` 方法，这些方法受编译选项 `i18n.isComputed` 的影响，同时指向全局语言集作用域。\\n\\n更多关于生态周边的组合式 API 使用指南可以点击下方链接查看详情：\\n\\n* [store](https://mpxjs.cn/guide/advance/store.html#use-store-in-composition-api)\\n* [i18n](https://mpxjs.cn/guide/advance/i18n.html#composition-api-usage)\\n* [fetch](https://mpxjs.cn/guide/extend/fetch.html#composition-api-usage)\\n\\n## 输出 web 适配\\n\\n跨端输出 web 作为 Mpx 的一大核心特性，在业务中存在广泛使用，同时也是我们设计实现任何框架新特性需要优先考虑的事项。在本次组合式 API 支持中，我们从设计之初就考虑了跨端输出 web 的适配支持，保障使用 Mpx 组合式 API 开发的业务代码都能在 web 环境中正常运行。\\n\\n我们输出 web 的整体技术方向在于尽可能复用 Vue 已有的生态能力，为了实现这个目标，我们需要提供尽可能与 Vue 保持一致的 API 设计，以降低抹平适配成本。在输出 web 时，核心组合式 API 基于 Vue2.7 版本中的已有能力进行适配提供，简单举个例子：对于 `import { ref } from 'mpxjs/core'` 这行语句，在小程序中会指向 Mpx 内部维护的 `ref` 实现，而在输出 web 时会指向 Vue 中维护的 `ref` 实现，两者的实现虽然不仅相同，但只要保障对外函数签名一致，对于开发者用户来说就无感知。\\n\\n我们借助了 Mpx 强大的条件编译能力进行上述实现，对运行时导出根据输出平台进行重定向，这样还能保障跨端输出产物干净简洁，仅包含当前输出环境下必要的逻辑，如下图所示：\\n\\n![composition-api-web](https://dpubstatic.udache.com/static/dpubimg/E0FojaPKOxZOa5h5OEPQk_composition-api-web.png)\\n\\n同理，我们也采用了类似的方式实现了组合式 API 周边能力对于输出 web 的适配支持，如pinia store 使用 pinia 原始版本进行适配实现，而 i18n 能力则是使用 vue-i18n@8.x + vue-i18n-bridge 进行适配实现。\\n\\n\\n## 性能表现\\n\\n性能是 Mpx 一直以来的核心关注点，我们对组合式 API 的最终实现版本进行了一系列性能评估测试，我们使用组合式 API 版本对业务中的评价组件进行了重构，评价组件属于我们业务中交互及功能相对比较复杂的组件，源码行数约 1000 行，组件数据 27 项，组件方法 18 个，我们在测试项目中对选项式 API 和组合式 API 两个版本实现的组件进行了一系列测试。\\n\\n### 组件初始化耗时\\n\\n由于组合式 API 改变了原有的组件初始化流程，我们对组件的初始化耗时进行了重点测试，测试口径如下：\\n\\n* 耗时计算以挂载组件为起点，以组件 `ready` 执行为终点\\n* 测试结果为10次手工测试排除最大最小值后求均值\\n* IOS 测试机型为 iPhone 13 pro max，安卓测试机型为 OPPO R9\\n\\n结果显示两个版本的组件初始化耗时大抵持平，不分优劣。\\n\\n|    |IOS  |安卓  |\\n|----|-----|-----|\\n|选项式 API|42.5ms|366.6ms|\\n|组合式 API|42.4ms|370.1ms|\\n\\n\\n### 组件 JS 体积\\n\\n在构建产物体积方面，由于组合式 API 的写法对于 JS 代码压缩更加有利，同样的逻辑实现下，组合式 API 版本的组件构建压缩后 JS 体积略胜一筹。\\n\\n|    |组件 JS 体积|\\n|----|-----|\\n|选项式 API|15.67KB|\\n|组合式 API|13.60KB|\\n\\n### 框架运行时体积\\n\\n在 Mpx2.8 版本中，我们在框架运行时中新增了组合式 API 相关实现，不过通过优化运行时导出，使其对 tree shaking 更加友好，我们的框架运行时体积在实际构建产物中没有产生太大增长。\\n\\n|    |框架运行时体积|\\n|----|-----|\\n|选项式 API|51.66KB|\\n|组合式 API|57.47KB|\\n\\n\\n综上所述，组合式 API 版本的运行时性能与选项式 API 大抵持平，在包体积占用方面，新版框架运行时体积占用略有提升，不过由于组合式 API 开发模式对代码压缩更友好，加上组合式 API 更易进行逻辑复用的特点，我们预计在实际业务项目中，组合式 API 的包体积占用会更小。\\n\\n## 破坏性改变\\n\\nMpx 组合式 API 版本完全兼容原有的选项式 API 开发方式，不过我们在运行时重构过程中依然带来了少量的破坏性改变，详情如下：\\n\\n* 框架过往提供的组件增强生命周期 `pageShow/pageHide` 与微信原生提供的 `pageLifetimes.show/hide` 完全对齐，不再提供组件初始挂载时必定执行 `pageShow` 的保障（因为组件可能在后台页面进行挂载），相关初始化逻辑一定不要放置在 `pageShow` 当中；\\n* 取消了框架过去提供的基于内部生命周期实现的非标准增强生命周期，如 `beforeCreate/onBeforeCreate` 等，直接将内部生命周期变量导出提供给用户使用，详情查看[这里](https://mpxjs.cn/api/global-api.html#built-in-lifecycle-variable);\\n* 为了优化 tree shaking，作为框架运行时 `default export` 的 `Mpx` 对象不再挂载 `createComponent/createStore` 等运行时方法，一律通过 `named export` 提供，`Mpx` 对象上仅保留 `set/use` 等全局 API，详情查看[这里](https://mpxjs.cn/api/global-api.html#global-mpx)；\\n* 使用 I18n 能力时，为了与新版 vue-i18n 保持对齐，`this.$i18n` 对象指向全局作用域，如需创建局部作用域需要使用组合式 API `useI18n` 的方式进行创建。\\n* `watch` API 不再接受第二个参数为带有 `handler` 属性的对象形式（该参数形式只应存在于 `watch` option 中），第二个参数必须为回调函数，与 [Vue](https://vuejs.org/api/reactivity-core.html#watch) 对齐。\\n\\n更详细的迁移指南请点击查看[这里](https://mpxjs.cn/guide/migrate/2.8.html)。\\n\\n\\n## 未来规划\\n\\n在完成编译持久化缓存和组合式 API 支持后，我们已经完成了去年规划中最大的两个技术升级，后续我们的技术规划如下：\\n\\n* 支持使用 Vite 进行 web 构建\\n* 完善 Mpx 跨端输出 Hummer 并正式 release\\n* 优化运行时 render 函数，降低包体积占用\\n* 内置支持原子类使用\\n* Mpx-cube-ui 正式开源\\n\\n最后，再次感谢所有参与 Mpx 组合式 API 技术建设的同学们，也欢迎社区同学加入 Mpx 项目开源共建。"
    },
    {
        "article_id": "7153529332332232712",
        "cover_image": "",
        "title": "有哪些适合程序员看的网站？",
        "brief": "程序员网站大汇总，除了技术提升、算法刷题、课程学习、电子书籍的网站，还有兼职副业平台！ 一、技术提升 GitHub 程序员托管代码的平台，很多开发者都会在上面找各种各样的开源项目来学习",
        "ctime": "1665560877",
        "mtime": "1665570298",
        "user_name": "飞援",
        "avatar": "https://p3-passport.byteacctimg.com/img/user-avatar/0fb7250be0935d68be63b335f0b6c998~300x300.image",
        "content": "程序员网站大汇总，除了技术提升、算法刷题、课程学习、电子书籍的网站，还有兼职副业平台！\\n\\n## 一、技术提升\\n\\n### GitHub\\n\\n程序员托管代码的平台，很多开发者都会在上面找各种各样的开源项目来学习。阿里、腾讯、字节跳动、美团、Google、Micosoft等国内外大厂都有自己的Github开源库。\\n\\n### StackOverflow\\n\\n一个强大的IT技术问答网站，用户可以在网站免费提交问题，浏览问题，索引相关内容。\\n\\n### GeeksforGeeks\\n\\n关于“算法和数据结构”，GeeksforGeeks 有很多很好的文章、解释和代码解决方案。\\n\\n### CSDN\\n\\n老牌的IT技术交流平台，技术干货很多，但是内容良莠不齐，需要仔细搜寻。\\n\\n### 掘金\\n\\n技术分享社区，早期以前端技术分享为主，现在覆盖的技术栈较广，网页布局比较清新。\\n\\n### 知乎\\n\\n知乎上面有很多不错的技术回答，特别是早期有很多技术大佬在上面活跃，在中文社区里面算是质量较高。\\n\\n## 二、算法刷题\\n\\n### Leetcode\\n\\n知名刷题网站，有许多编程面试的题目，可以在线编译运行。通过刷LeetCode可以保持编程状态，同时对于技术面试也有很大帮助。\\n\\n### Lintcode\\n\\nLintCode 收集了最常见、最高频的编程题目，覆盖领域较多，支持在线编译。\\n\\n### TopCoder\\n\\nTopCoder 是最早的在线编程竞技平台之一，提供了一系列的算法挑战。他们还会赞助竞赛，如果你写出最好的解决方案，就可以拿到奖励。\\n\\n### 牛客网\\n\\n在线刷题平台，有很多的企业真题，应届生求职使用的较多。\\n\\n## 三、课程学习\\n\\n### 哔哩哔哩\\n\\n众所周知，“bilibili是一个学习网站”，除了番剧、鬼畜之外，b站同样有非常多的高质量的编程教学视频。\\n\\n### Coursera\\n\\nCoursera是大型公开在线课程项目，合作院校包括斯坦福大学、密歇根大学、普林斯顿大学、宾夕法尼亚大学等美国名校。你可以在上面学到大量计算机理论和编程知识，部分课程有中文字幕。\\n\\n### 慕课网\\n\\n国内比较不错的编程教学网站，可以找到比较体系的视频课程，但是要花钱。\\n\\n### 中国大学MOOC\\n\\n一个综合性的课程平台，拥有包括985高校在内提供的千余门课程。\\n\\n### 网易云课堂\\n\\n一个综合性的在线学习平台，有一些计算机编程方面的视频教程，同样的，需要花钱。\\n\\n## 四、电子书籍\\n\\n### 图灵社区\\n\\n书籍比较全面的图书社区，电子书的价格是纸质书的一半。\\n\\n### 博文视点\\n\\n出版了数量众多的计算机类图书，有些书的质量相对较高。\\n\\n### 书栈网\\n\\n书栈网是一个开源书籍和文档分享站点。\\n\\n### IT熊猫\\n\\n有数百本热门技术书籍。\\n\\n### 极客图书\\n\\n可观的技术书籍资源，有些书籍还附带源码。\\n\\n## 五、副业兼职\\n\\n### 飞援\\n\\n程序员远程灵活用工平台，聚集了高质量的兼职和全职自由职业开发者，会对开发者的开发经验有一定要求（会有测评和面试流程），但是结算会比较有保障，平台也会协助跟客户沟通，比较靠谱。"
    },
    {
        "article_id": "7153612182612082702",
        "cover_image": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4561eb3be6e4be1915e4256a79d0ee5~tplv-k3u1fbpfcp-watermark.image?",
        "title": "总结：二叉树的属性",
        "brief": "是否对称 给定一个二叉树，检查它是否是镜像对称的。 上图为对称二叉树 上图的二叉树则不是镜像的 思路 判断是否是镜像，需要去判断二叉树的里侧和外侧是否相同。 这就需要去判断根节点下左子树与右子树里侧和",
        "ctime": "1665580185",
        "mtime": "1665629138",
        "user_name": "HelloWorld杰少",
        "avatar": "https://p3-passport.byteacctimg.com/img/user-avatar/a2a6fc558f01bff9d77f9039b18debc1~300x300.image",
        "content": "---\\ntheme: channing-cyan\\n---\\n> 持续创作，加速成长！这是我参与「掘金日新计划 · 10 月更文挑战」的第12天，[点击查看活动详情](https://juejin.cn/post/7147654075599978532 \\\"https://juejin.cn/post/7147654075599978532\\\")\\n\\n## 是否对称\\n\\n给定一个二叉树，检查它是否是镜像对称的。\\n\\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c19d0227f86c4ec0bdb50faa8dd4b33f~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n上图为对称二叉树\\n\\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c875657fbd5c45b69e5a0ec221032225~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n上图的二叉树则不是镜像的\\n\\n### 思路\\n\\n判断是否是镜像，需要去判断二叉树的里侧和外侧是否相同。\\n\\n这就需要去判断根节点下左子树与右子树里侧和外侧是否相等。比较的方法是拿左子树的 “左-右-中” 节点和右子树的“右-左-中”为顺序的节点做比较。\\n\\n这题用递归的方式解比较方便，递归的思路如下：\\n1. 因为要比较俩个子树是否是镜像的，所以递归的参数为俩个，分别是左子树节点和右子树节点\\n2. 终止条件有三个：\\n\\n- 左节点为空，右节点不为空，返回 false，左节点不为空，右节点为空，返回 false；\\n- 左右节点均不为空，但数值不同，返回 false；\\n- 如果左右节点均为空，则返回 true；\\n\\n3. 如果以上条件均不满足，则再进入递归逻辑\\n\\n### 代码实现\\n\\n\\n```\\npublic boolean isSymmetric1(TreeNode root) {\\n        return compare(root.left, root.right);\\n    }\\n\\n    private boolean compare(TreeNode left, TreeNode right) {\\n\\n        if (left == null && right != null) {\\n            return false;\\n        }\\n        if (left != null && right == null) {\\n            return false;\\n        }\\n\\n        if (left == null && right == null) {\\n            return true;\\n        }\\n        if (left.val != right.val) {\\n            return false;\\n        }\\n        // 比较外侧\\n        boolean compareOutside = compare(left.left, right.right);\\n        // 比较内侧\\n        boolean compareInside = compare(left.right, right.left);\\n        return compareOutside && compareInside;\\n    }\\n```\\n\\n时间复杂度：O(N)，其中 N 是树的节点数。对每个节点访问一次。\\n\\n空间复杂度：O(H)，其中 H 是树的高度\\n\\n## 二叉树的最大深度\\n\\n### 给定一个二叉树，找出其最大深度。\\n\\n#### 思路\\n\\n二叉树的深度是指根节点到最远叶子节点的最长路径上的节点数。\\n\\n我们可以通过递归的方式求解此题：\\n\\n1. 递归函数的传入的参数为二叉树的根节点，返回值为二叉树的高度；\\n2. 递归的终止条件为当节点为空节点时，返回高度为 0；\\n3. 先求出它左子树的高度，然后再求出它右子树的高度，俩高度的最大值+1为二叉树的最大深度。\\n\\n代码如下：\\n\\n\\n```java\\nclass solution {\\npublic:\\n    int getdepth(treenode node) {\\n        if (node == null) return 0;\\n        int leftdepth = getdepth(node.left);       // 左\\n        int rightdepth = getdepth(node.right);     // 右\\n        int depth = 1 + Math.max(leftdepth, rightdepth); // 中\\n        return depth;\\n    }\\n    int maxdepth(treenode root) {\\n        return getdepth(root);\\n    }\\n};\\n```\\n\\n时间复杂度：O(N)，其中 N 是树的节点数。对每个节点访问一次。\\n\\n空间复杂度：O(H)，其中 H 是树的高度\\n\\n同理，该方法适用于求 N 叉树的最大深度，代码如下：\\n\\n```java\\n// Definition for a Node.\\nclass Node {\\n    public int val;\\n    public List<Node> children;\\n\\n    public Node() {}\\n\\n    public Node(int _val) {\\n        val = _val;\\n    }\\n\\n    public Node(int _val, List<Node> _children) {\\n        val = _val;\\n        children = _children;\\n    }\\n};\\n\\nclass Solution {\\n  public int maxDepth(Node root) {\\n    if (root == null) {\\n      return 0;\\n    } else if (root.children.isEmpty()) {\\n      return 1;  \\n    } else {\\n      List<Integer> heights = new LinkedList<>();\\n      // 循环求出每个子树的高度\\n      for (Node item : root.children) {\\n        heights.add(maxDepth(item)); \\n      }\\n      return Collections.max(heights) + 1;\\n    }\\n  }\\n}\\n\\n```\\n\\n时间复杂度：O(N)，其中 N 是树的节点数。对每个节点访问一次。\\n\\n空间复杂度：O(H)，其中 H 是树的高度\\n\\n## 二叉树的最小深度\\n\\n说明：最小深度是从根节点到最近叶子节点的最短路径上的节点数量。\\n\\n这里有个误区需要解释一下，是从根节点到最近的叶子节点，如果根节点没有左子树或者右子树，很多人就觉得最小深度为 1，这是不对的。是从根节点到最近叶子节点的最短路径上的节点数量才是最小深度。\\n\\n可以看出, 求二叉树的最小深度和求二叉树的最大深度的差别主要在于处理左右孩子不为空的逻辑。\\n\\n代码如下：\\n\\n\\n```java \\nclass Solution {\\n    /**\\n     * 递归法，相比求MaxDepth要复杂点\\n     * 因为最小深度是从根节点到最近**叶子节点**的最短路径上的节点数量\\n     */\\n    public int minDepth(TreeNode root) {\\n        if (root == null) {\\n            return 0;\\n        }\\n        int leftDepth = minDepth(root.left);\\n        int rightDepth = minDepth(root.right);\\n        if (root.left == null) {\\n            return rightDepth + 1;\\n        }\\n        if (root.right == null) {\\n            return leftDepth + 1;\\n        }\\n        // 左右结点都不为null\\n        return Math.min(leftDepth, rightDepth) + 1;\\n    }\\n}\\n```\\n\\n时间复杂度：O(N)，其中 N 是树的节点数。对每个节点访问一次。\\n\\n空间复杂度：O(H)，其中 H 是树的高度。\\n\\n\\n## 求二叉树有多少个节点\\n\\n给出一个完全二叉树，求出该树的节点个数。\\n\\n此题可用求二叉树的最大深度的方式来求出，代码如下：\\n\\n```java\\nclass solution {\\npublic:\\n    int getdepth(treenode node) {\\n        if (node == null) return 0;\\n        int leftdepth = getdepth(node.left);       // 左\\n        int rightdepth = getdepth(node.right);     // 右\\n        int depth = 1 + leftdepth, rightdepth; // 中\\n        return depth;\\n    }\\n    int maxdepth(treenode root) {\\n        return getdepth(root);\\n    }\\n};\\n```\\n\\n时间复杂度：O(n)，n 为二叉树节点个数\\n空间复杂度：O(h)，h 为 树的高度\\n\\n\\n## 平衡二叉树\\n\\n给定一个二叉树，判断它是否是高度平衡的二叉树。\\n\\n本题中，一棵高度平衡二叉树定义为：一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。\\n\\n### 思路\\n\\n既然是要求比较高度，则我们可以用到后序遍历的方式。\\n\\n1. 明确递归函数的参数和返回值，参数为传入的根节点，如果左右子树的返回值 > 1,则我们返回 -1，表示已经不是平衡二叉树了；\\n2. 递归的终止条件为遇到了空节点，则 return 0, 表示当前节点为 根节点，高度为 0；\\n3. 单层递归逻辑为，分别求出左右子树的高度，如果差值小于等于 1，则返回当前二叉树的高度，否则返回 -1，表示已经不是二叉树了；\\n\\n代码如下：\\n\\n```\\nclass Solution {\\n   /**\\n     * 递归法\\n     */\\n    public boolean isBalanced(TreeNode root) {\\n        return getHeight(root) != -1;\\n    }\\n\\n    private int getHeight(TreeNode root) {\\n        if (root == null) {\\n            return 0;\\n        }\\n        int leftHeight = getHeight(root.left);\\n        if (leftHeight == -1) {\\n            return -1;\\n        }\\n        int rightHeight = getHeight(root.right);\\n        if (rightHeight == -1) {\\n            return -1;\\n        }\\n        // 左右子树高度差大于1，return -1表示已经不是平衡树了\\n        if (Math.abs(leftHeight - rightHeight) > 1) {\\n            return -1;\\n        }\\n        return Math.max(leftHeight, rightHeight) + 1;\\n    }\\n}\\n```\\n\\n## 二叉树的所有路劲\\n\\n给定一个二叉树，返回所有从根节点到叶子节点的路径。\\n\\n### 思路\\n\\n根据题意要从根节点到叶子节点的路径，所以需要前序遍历。\\n\\n1. 确定递归的参数和返回值，参数为传入的根节点，记录每条路径的节点值数组path，以及路径结果数组res；\\n2. 当遇到叶子节点的时候终止，并将路径节点值数组里的数值转换成字符串，然后加入到结果数组；\\n3. 递归的单层逻辑为，因为是前序遍历：中-左-右，所以先处理中间节点，加入到 path 中，然后再递归处理左子树和右子树，并递归完后回溯；\\n\\n代码如下：\\n\\n```\\n//解法一\\nclass Solution {\\n    /**\\n     * 递归法\\n     */\\n    public List<String> binaryTreePaths(TreeNode root) {\\n        List<String> res = new ArrayList<>();\\n        if (root == null) {\\n            return res;\\n        }\\n        List<Integer> paths = new ArrayList<>();\\n        traversal(root, paths, res);\\n        return res;\\n    }\\n\\n    private void traversal(TreeNode root, List<Integer> paths, List<String> res) {\\n        paths.add(root.val);\\n        // 叶子结点\\n        if (root.left == null && root.right == null) {\\n            // 输出\\n            StringBuilder sb = new StringBuilder();\\n            for (int i = 0; i < paths.size() - 1; i++) {\\n                sb.append(paths.get(i)).append(\\\"->\\\");\\n            }\\n            sb.append(paths.get(paths.size() - 1));\\n            res.add(sb.toString());\\n            return;\\n        }\\n        if (root.left != null) {\\n            traversal(root.left, paths, res);\\n            paths.remove(paths.size() - 1);// 回溯\\n        }\\n        if (root.right != null) {\\n            traversal(root.right, paths, res);\\n            paths.remove(paths.size() - 1);// 回溯\\n        }\\n    }\\n}\\n```\\n\\n\\n## 左叶子之和\\n\\n计算给定二叉树的所有左叶子之和。\\n\\n### 思路\\n\\n首先要判断这棵二叉树有没有左叶子，就必须要通过节点的父节点来判断其左孩子是不是左叶子，判断代码如下：\\n\\n```\\n if (root.left != null && root.left.left == null && root.left.right == null) { // 中\\n            midValue = root.left.val;\\n        }\\n```\\n\\n用后序遍历找出所有的左叶子节点数值之和，递归方式如下：\\n1. 递归函数的传参为根节点，返回值为左叶子节点之和；\\n2. 递归终止条件为 root == null 返回 0；\\n3. 单层递归逻辑：当遇到左叶子节点的时候，记录数值，然后通过递归求取左子树左叶子之和，和 右子树左叶子之和，相加便是整个树的左叶子之和；\\n\\n代码如下：\\n\\n```\\nclass Solution {\\n    public int sumOfLeftLeaves(TreeNode root) {\\n        if (root == null) return 0;\\n        int leftValue = sumOfLeftLeaves(root.left);    // 左\\n        int rightValue = sumOfLeftLeaves(root.right);  // 右\\n                                                       \\n        int midValue = 0;\\n        if (root.left != null && root.left.left == null && root.left.right == null) { // 中\\n            midValue = root.left.val;\\n        }\\n        int sum = midValue + leftValue + rightValue;\\n        return sum;\\n    }\\n}\\n```\\n\\n## 左下角的值\\n\\n给定一个二叉树，在树的最后一行找到最左边的值。\\n\\n### 思路\\n\\n本题比较容易下手的解题方式可以用层序遍历的方法，找到最后一行的最左边。\\n\\n但是也可以用递归法来实现，首先可以明确深度最大的叶子节点一定是最后一行，那如何找最左边的呢？我们可以使用前序遍历，优先从左边开始搜索。\\n\\n1. 明确递归函数的参数和返回值：参数为传入的根节点，以及一个int型变量用来记录最长深度。返回值为 void；\\n2. 当遇到叶子节点的时候，为终止条件，并开始统计最大深度；\\n3. 确定单层递归逻辑，当不是叶子节点时，则继续遍历左子树和右子树，并记得要回溯；\\n\\n代码如下：\\n\\n\\n```java\\n// 递归法\\nclass Solution {\\n    private int Deep = -1;\\n    private int value = 0;\\n    public int findBottomLeftValue(TreeNode root) {\\n        value = root.val;\\n        findLeftValue(root,0);\\n        return value;\\n    }\\n\\n    private void findLeftValue (TreeNode root,int deep) {\\n        if (root == null) return;\\n        if (root.left == null && root.right == null) {\\n            if (deep > Deep) {\\n                value = root.val;\\n                Deep = deep;\\n            }\\n        }\\n        if (root.left != null) findLeftValue(root.left,deep + 1);\\n        if (root.right != null) findLeftValue(root.right,deep + 1);\\n    }\\n}\\n```\\n\\n## 路劲总和 1\\n\\n给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。\\n\\n### 思路\\n\\n利用递归来解答此题：\\n\\n1. 确定递归函数的传参和返回值：参数为传入的根节点和计数变量，该计数变量每次递归的时候需要减去当前节点的值，最后遇到叶子节点的时候判断该叶子节点的值是否与它一致，如果一致，则表示找到了该路径。返回值为bool类型；\\n2. 递归函数的终止条件为：当遇到叶子节点的时候，并且计数变量等于叶子节点的值就返回 true;\\n3. 单层递归逻辑为：遍历左子树和右子树，并回溯\\n\\n代码如下：\\n\\n```java\\nclass solution {\\n   public boolean haspathsum(treenode root, int targetsum) {\\n        if (root == null) {\\n            return false;\\n        }\\n        targetsum -= root.val;\\n        // 叶子结点\\n        if (root.left == null && root.right == null) {\\n            return targetsum == 0;\\n        }\\n        if (root.left != null) {\\n            boolean left = haspathsum(root.left, targetsum);\\n            if (left) {// 已经找到\\n                return true;\\n            }\\n        }\\n        if (root.right != null) {\\n            boolean right = haspathsum(root.right, targetsum);\\n            if (right) {// 已经找到\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\\n// 精简后的代码\\n\\nclass solution {\\n    public boolean haspathsum(treenode root, int targetsum) {\\n        \\n        if (root == null) return false; // 为空退出\\n        \\n        // 叶子节点判断是否符合\\n        if (root.left == null && root.right == null) return root.val == targetsum;\\n\\n        // 求两侧分支的路径和\\n        return haspathsum(root.left, targetsum - root.val) || haspathsum(root.right, targetsum - root.val);\\n    }\\n}\\n```\\n\\n## 路径总和2\\n\\n给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。\\n\\n### 思路\\n\\n解题思路与上一题相似，只是需要记录路径。\\n\\n代码如下：\\n\\n```java\\nclass solution {\\n    public list<list<integer>> pathsum(treenode root, int targetsum) {\\n        list<list<integer>> res = new arraylist<>();\\n        if (root == null) return res; // 非空判断\\n        \\n        list<integer> path = new linkedlist<>();\\n        preorderdfs(root, targetsum, res, path);\\n        return res;\\n    }\\n\\n    public void preorderdfs(treenode root, int targetsum, list<list<integer>> res, list<integer> path) {\\n        path.add(root.val);\\n        // 遇到了叶子节点\\n        if (root.left == null && root.right == null) {\\n            // 找到了和为 targetsum 的路径\\n            if (targetsum - root.val == 0) {\\n                res.add(new arraylist<>(path));\\n            }\\n            return; // 如果和不为 targetsum，返回\\n        }\\n\\n        if (root.left != null) {\\n            preorderdfs(root.left, targetsum - root.val, res, path);\\n            path.remove(path.size() - 1); // 回溯\\n        }\\n        if (root.right != null) {\\n            preorderdfs(root.right, targetsum - root.val, res, path);\\n            path.remove(path.size() - 1); // 回溯\\n        }\\n    }\\n}\\n```\\n\\n**我是杰少，如果您觉的我写的不错，那请给我 **点赞+评论+收藏** 后再走哦！**\\n\\n**往期文章：**\\n\\n- [使用 Google Breakpad 来助力解决程序崩溃](https://juejin.cn/editor/drafts/7130819289803653128)\\n- [UE4 多人游戏服务器探索](https://juejin.cn/editor/drafts/7118977305858277412)\\n- [使用虚幻引擎自动化工具实现自动化部署](https://juejin.cn/editor/drafts/7095681383351681038)\\n- [如何在 UE4 中制作一扇自动开启的大门](https://juejin.cn/editor/drafts/7083289727268290574)\\n- [如何在 UE4 中用代码去控制角色移动](https://juejin.cn/editor/drafts/7081045461729017869)\\n- [如何给 UE4 场景添加游戏角色](https://juejin.cn/editor/drafts/7080302876341305381)\\n- [UE4：Android 平台开发实践指南](https://juejin.cn/post/7068510988378570783)\\n- [UE4 开发避坑指南（持续更新）](https://juejin.cn/editor/drafts/7065135005466361887)\\n- [新年开工啦，放个小烟花庆祝一下](https://juejin.cn/editor/drafts/7062169980636250119)\\n- [聊聊与苹果审核员的爱恨情仇(下)](https://juejin.cn/post/7051401342547410974)\\n- [聊聊与苹果审核员的爱恨情仇(上)](https://juejin.cn/post/7046211809170161694)\\n- [一名普通工具人的 2021 | 2021年终总结](https://juejin.cn/post/7037817537605664781)\\n- [二叉树刷题总结：二叉搜索树的属性](https://juejin.cn/post/7030031399780352036)\\n- [二叉树总结：二叉树的属性](https://juejin.cn/post/7027610133165572103)\\n- [二叉树总结：二叉树的修改与构造](https://juejin.cn/post/7027970630309904421)\\n- [StoreKit2 有这么香？嗯，我试过了，真香](https://juejin.cn/post/7023974581446639630)\\n-   [看完这篇文章，再也不怕面试官问我如何构造二叉树啦！](https://juejin.cn/post/7023060069038161934)\\n-   [那帮做游戏的又想让大家氪金，太坏了！](https://juejin.cn/post/7006540242777800741)\\n-   [手把手带你撸一个网易云音乐首页 | 适配篇](https://juejin.cn/post/6984062100062601247 \\\"https://juejin.cn/post/6984062100062601247\\\")\\n-   [手把手带你撸一个网易云音乐首页（三）](https://juejin.cn/post/6981438462318608391 \\\"https://juejin.cn/post/6981438462318608391\\\")\\n-   [手把手带你撸一个网易云音乐首页（二）](https://juejin.cn/post/6979971385191825445 \\\"https://juejin.cn/post/6979971385191825445\\\")\\n-   [手把手带你撸一个网易云音乐首页（一）](https://juejin.cn/post/6978374782664310792 \\\"https://juejin.cn/post/6978374782664310792\\\")\\n-   [代码要写注释吗？写你就输了](https://juejin.cn/post/6965856152315756551 \\\"https://juejin.cn/post/6965856152315756551\\\")\\n-   [Codable发布这么久我就不学，摸鱼爽歪歪，哎~就是玩儿](https://juejin.cn/post/6960840387216801799 \\\"https://juejin.cn/post/6960840387216801799\\\")\\n-   [iOS 优雅的处理网络数据，你真的会吗？不如看看这篇](https://juejin.cn/post/6952682593372340237 \\\"https://juejin.cn/post/6952682593372340237\\\")\\n-   [UICollectionView 自定义布局！看这篇就够了](https://juejin.cn/post/6944994974614323213 \\\"https://juejin.cn/post/6944994974614323213\\\")\\n\\n**请你喝杯 ☕️ 点赞 + 关注哦～**\\n\\n1.  阅读完记得给我点个赞哦，有👍 有动力\\n1.  关注公众号--- [HelloWorld杰少](https://link.juejin.cn?target=https%3A%2F%2Fp1-jj.byteimg.com%2Ftos-cn-i-t2oaga2asx%2Fgold-user-assets%2F2020%2F7%2F4%2F17318f81cd4e34e9~tplv-t2oaga2asx-image.image \\\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/4/17318f81cd4e34e9~tplv-t2oaga2asx-image.image\\\")，第一时间推送新姿势\\n\\n> 最后，创作不易，如果对大家有所帮助，希望大家点赞支持，有什么问题也可以在评论区里讨论😄～**\\n"
    },
    {
        "article_id": "7153086294409609229",
        "cover_image": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/32618ebc15ac44439634301618e2a860~tplv-k3u1fbpfcp-watermark.image?",
        "title": "图片不压缩，前端要背锅 🍳",
        "brief": "身为一个程序员 🧑‍💻 ，不会还有人手动一张张上传图片压缩吧 🌝 ？通过封装好的工具，就能实现自动压缩项目内的图片，彻底释放双手 🤲 ！",
        "ctime": "1665457753",
        "mtime": "1665473812",
        "user_name": "JustCarryOn",
        "avatar": "https://p3-passport.byteacctimg.com/img/user-avatar/85b6f586083d78738dd653b7fa01cd31~300x300.image",
        "content": "---\\ntheme: fancy\\n---\\n> 大家好，好久没见，最近有点懒，很久没更新啦。这次要聊的主题是「图片压缩」。在一般页面里面，使用最多的「静态素材」非图片莫属了，这次轮到对它动手 👊 ！\\n\\n## 背景\\n\\n🎨(美术): 这是这次需求的切图 📁 ，你看看有没问题？ \\n\\n🧑‍💻(前端): 好的。\\n\\n页面上线 ...\\n\\n🧑‍💼(产品): 这图片怎么半天加载不出来 💢 ？\\n\\n🧑‍💻(前端): 我看看 🤔 (卑微)。\\n\\n... 📁(size: 15MB)\\n\\n🧑‍💻(前端): 😅。\\n\\n很多时候，我们从 `PS` 、`蓝湖`或`摹客`等工具导出来的图片，或者是美术直接给到切图，都是未经过压缩的，体积都比较大。这里，就有了可优化的空间。\\n\\n## TinyPng\\n\\n> `TinyPNG`使用智能的「有损压缩技术」来减少`WEBP`、`JPEG`和`PNG`文件的文件大小。通过选择性地减少图像中的「颜色数量」，使用更少的字节来存储数据。这种效果几乎是看不见的，但在文件大小上有非常大的差别。\\n\\n使用过[TinyPng](https://tinypng.com/)的都知道，它的压缩效果非常好，体积大幅度降低且显示效果几乎没有区别( 👀 看不出区别）。因此，选择其作为压缩工具，是一个不错的选择。\\n\\n`TinyPng`提供两种压缩方法：\\n1. 通过在官网上进行手动压缩；\\n2. 通过官方提供的`tinify`进行压缩；\\n\\n身为一个程序员 🧑‍💻 ，是不能接受手动一张张上传压缩这种方法的。因此，选择第二种方法，通过封装一个工具，对项目内的图片自动压缩，彻底释放双手 🤲 。\\n\\n## 工具类型\\n\\n第一步，思考这个工具的「目的」是什么？没错，「压缩图片」。\\n\\n第二步，思考在哪个「环节」进行压缩？没错，「发布前」。\\n\\n这样看来，开发一个`webpack plugin`是一个不错选择，在打包「生产环境」代码的时候，启用该`plugin`对图片进行处理，完美 🥳 ！\\n\\n但是，这样会面临两个问题 🤔 ：\\n1. 页面迭代，新增了几张图片，重新打包上线时，会导致旧图片被多次压缩；\\n2. 无法选择哪些图片要被压缩，哪些图片不被压缩；\\n\\n虽然可以通过「配置」的方式解决上述问题，但每次打包都要特殊配置，略显麻烦，这样看来`plugin`好像不是最好的选择。\\n\\n以上两个问题，使用「命令行工具」就能完美解决。在打包「生产环境」代码之前，执行「压缩命令」，通过命令行交互，选择需要压缩的图片。\\n\\n## 效果演示\\n\\n话不多说，先上才艺 💃 ！\\n\\n1. 安装\\n\\n```\\n$ npm i yx-tiny -D\\n```\\n\\n2. 使用\\n\\n```\\n$ npx tiny \\n```\\n\\n3. 根据命令行提示输入\\n\\n![10月10日.2022-10-10 5_57_17 PM.gif](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/edc39ef452134045a9cb68242705b415~tplv-k3u1fbpfcp-watermark.image?)\\n\\n流程：输入「文件夹名称-`tinyImg`」，接着工具会找到当前项目下所有的`tinyImg`，接着选择一或多个`tinyImg`，紧接着，工具会找出`tinyImg`下所有的`png`、`jpe?g`和`svga`，最后选择压缩模式「全量」或「自定义」，选择需要压缩的图片。\\n\\n从最后的输出结果可以看到，压缩前的资源体积为`2.64MB`，压缩后体积为`1.02MB`，足足压缩了`1.62MB` 👍 ！\\n\\n## 实现思路\\n\\n总体分为五个过程：\\n1. 查找：找出所有的图片资源；\\n2. 分配：均分任务到每个进程；\\n3. 上传：把原图上传到`TinyPng`；\\n4. 下载：从`TinyPng`中下载压缩好的图片；\\n5. 写入：用下载的图片覆盖本地图片；\\n\\n项目地址：[yx-tiny](https://github.com/yxichan/lerna-npm/tree/master/packages/tiny)\\n\\n### 查找\\n\\n找出所有的图片资源。\\n> packages/tiny/src/index.ts\\n```ts\\n/**\\n * 递归找出所有图片\\n * @param { string } path\\n * @returns { Array<imageType> }\\n */\\ninterface IdeepFindImg {\\n  (path: string): Array<imageType>\\n}\\nlet deepFindImg: IdeepFindImg\\ndeepFindImg = (path: string) => {\\n  // 读取文件夹的内容\\n  const content = fs.readdirSync(path)\\n  // 用于保存发现的图片\\n  let images: Array<imageType> = []\\n  // 遍历该文件夹内容\\n  content.forEach(folder => {\\n    const filePath = resolve(path, folder)\\n    // 获取当前内容的语法信息\\n    const info = fs.statSync(filePath)\\n    // 当前内容为“文件夹”\\n    if (info.isDirectory()) {\\n      // 对该文件夹进行递归操作\\n      images = [...images, ...deepFindImg(filePath)]\\n    } else {\\n      const fileNameReg = /\\\\.(jpe?g|png|svga)$/\\n      const shouldFormat = fileNameReg.test(filePath)\\n      // 判断当前内容的路径是否包含图片格式\\n      if (shouldFormat) {\\n        // 读取图片内容保存到images\\n        const imgData = fs.readFileSync(filePath)\\n        images.push({\\n          path: filePath,\\n          file: imgData\\n        })\\n      }\\n    }\\n  })\\n  return images\\n}\\n```\\n通过命令行交互后，拿到目标文件夹的路径`path`，然后获取该`path`下的所有内容，接着遍历所有内容。首先判断该内容的文件信息：若为“文件夹”，则把该文件夹路径作为`path`，递归调用`deepFindImg`；若不为“文件夹”，判断该内容为图片，则读取图片数据，`push`到`images`中。最后，返回所有找到的图片。\\n\\n### 分配\\n\\n均分任务到每个进程。\\n\\n> packages/tiny/src/index.ts\\n```ts\\n// ...\\ncluster.setupPrimary({\\n    exec: resolve(__dirname, 'features/process.js')\\n})\\n\\n// 若资源数小于则创建一个进程，否则创建多个进程\\nconst works: Array<{\\n    work: Worker;\\n    tasks: Array<imageType>\\n}> =[]\\nif (list.length <= cpuNums) {\\n    works.push({\\n        work: cluster.fork(),\\n        tasks: list\\n    })\\n} else {\\n    for (let i = 0; i < cpuNums; ++i) {\\n        const work = cluster.fork()\\n        works.push({\\n            work,\\n            tasks: []\\n        })\\n    }\\n}\\n\\n// 平均分配任务\\nlet workNum = 0 \\nlist.forEach(task = >{\\n    if (works.length === 1) {\\n        return\\n    } else if (workNum >= works.length) {\\n        works[0].tasks.push(task)\\n        workNum = 1\\n    } else {\\n        works[workNum].tasks.push(task)\\n        workNum += 1\\n    }\\n})\\n\\n// 用于记录进程完成数\\nlet pageNum = works.length\\n\\n// 初始化进度条\\n// ...\\n\\nworks.forEach(({\\n    work,\\n    tasks\\n}) = >{\\n    // 发送任务到每个进程\\n    work.send(tasks)\\n    // 接收任务完成\\n    work.on('message', (details: Idetail[]) = >{\\n        // 更新进度条\\n        // ...\\n        pageNum--\\n        // 所有任务执行完毕\\n        if (pageNum === 0) {\\n            // 关闭进程\\n            cluster.disconnect()\\n        }\\n    })\\n})\\n```\\n\\n使用`cluster`，根据「cpu核心数」创建等量的进程，`works`用于保存已创建的进程，`list`中保存的是要处理的压缩任务，通过遍历`list`，把任务依次分给每一个进程。接着遍历`works`，通过`send`方法发送进程任务。通过监听`message`事件，利用`pageNum`记录进程任务的完成情况，当所有进程任务执行完毕后，则关闭进程。\\n\\n### 上传\\n\\n官方提供的`tinify`工具有「500张/月」的限额，超过限额后，需要付费。\\n\\n![截屏2022-10-10 下午6.33.48.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82e9baf8650c4f0eb47f68b08f913eaa~tplv-k3u1fbpfcp-watermark.image?)\\n\\n由于家境贫寒，且出于学习的目的，就没有使用`tinify`，而是通过构造随机`IP`来直接请求「压缩接口」来达到「破解限额」的目的。大家在真正使用的时候，还是要使用`tinyfy`来压缩，不要做这种投机取巧的事。\\n\\n好了，回到正文。\\n\\n把原图上传到`TinyPng`。\\n\\n> packages/tiny/src/features/index.ts\\n```ts\\n/**\\n * 上传函数\\n * @param { Buffer } file 文件buffer数据\\n * @returns { Promise<DataUploadType> }\\n */\\ninterface Iupload {\\n  (file: Buffer): Promise<DataUploadType>\\n}\\nexport let upload: Iupload\\nupload = (file: Buffer) => {\\n  // 生成随机请求头\\n  const header = randomHeader()\\n  return new Promise((resolve, reject) => {\\n    const req = Https.request(header, res => {\\n      res.on('data', data => {\\n        try {\\n          const resp = JSON.parse(data.toString()) as DataUploadType\\n          if (resp.error) {\\n            reject(resp)\\n          } else {\\n            resolve(resp)\\n          }\\n        } catch (err) {\\n          reject(err)\\n        }\\n      })\\n    })\\n    // 上传图片buffer\\n    req.write(file)\\n    req.on('error', err => reject(err))\\n    req.end()\\n  })\\n}\\n```\\n使用`node`自带的`Https`模块，构造请求头，把`deepFindImg`中返回的图片进行上传。上传成功后，会返回已经压缩好的图片的`url`链接。\\n\\n\\n### 下载\\n\\n从`TinyPng`中下载压缩好的图片。\\n\\n> packages/tiny/src/features/index.ts\\n```ts\\n/**\\n * 下载函数\\n * @param { string } path\\n * @returns { Promise<string> }\\n */\\ninterface Idownload {\\n  (path: string): Promise<string>\\n}\\nexport let download: Idownload\\ndownload = (path: string) => {\\n  const header = new Url.URL(path)\\n  return new Promise((resolve, reject) => {\\n    const req = Https.request(header, res => {\\n      let content = ''\\n      res.setEncoding('binary')\\n      res.on('data', data => (content += data))\\n      res.on('end', () => resolve(content))\\n    })\\n    req.on('error', err => reject(err))\\n    req.end()\\n  })\\n}\\n```\\n使用`node`自带的`Https`模块把`upload`中返回的图片链接进行下载。下载成功后，返回图片的`buffer`数据。\\n\\n### 写入\\n\\n把下载好的图片覆盖本地图片。\\n\\n> packages/tiny/src/features/process.ts\\n```ts\\n/**\\n * 接收进程任务\\n */\\nprocess.on('message', (tasks: imageType[]) => {\\n  ;(async () => {\\n    // 优化 png/jpg\\n    const data = tasks\\n      .filter(({ path }: { path: string }) => /\\\\.(jpe?g|png)$/.test(path))\\n      .map(ele => {\\n        return compressImg({ ...ele, file: Buffer.from(ele.file) })\\n      })\\n\\n    // 优化 svga\\n    const svgaData = tasks\\n      .filter(({ path }: { path: string }) => /\\\\.(svga)$/.test(path))\\n      .map(ele => {\\n        return compressSvga(ele.path, Buffer.from(ele.file))\\n      })\\n\\n    const details = await Promise.all([\\n      ...data.map(fn => fn()),\\n      ...svgaData.map(fn => fn())\\n    ])\\n\\n    // 写入\\n    await Promise.all(\\n      details.map(\\n        ({ path, file }) =>\\n          new Promise((resolve, reject) => {\\n            fs.writeFile(path, file, err => {\\n              if (err) reject(err)\\n              resolve(true)\\n            })\\n          })\\n      )\\n    )\\n\\n    // 发送结果\\n    if (process.send) {\\n      process.send(details)\\n    }\\n  })()\\n})\\n```\\n`process.on`监听每个进程发送的任务，当接收到任务类型为「图片」，使用`compressImg`方法来处理图片。当任务类型为「svga」，使用`compressSvga`方法来处理`svga`。最后把处理好的资源写入到本地覆盖旧资源。\\n\\n#### compressImg\\n\\n> packages/tiny/src/features/process.ts\\n```ts\\n/**\\n * 压缩图片\\n * @param { imageType } 图片资源\\n * @returns { promise<Idetail> }\\n */\\ninterface IcompressImg {\\n  (payload: imageType): () => Promise<Idetail>\\n}\\nlet compressImg: IcompressImg\\ncompressImg = ({ path, file }: imageType) => {\\n  return async () => {\\n    const result = {\\n      input: 0,\\n      output: 0,\\n      ratio: 0,\\n      path,\\n      file,\\n      msg: ''\\n    }\\n    try {\\n      // 上传\\n      const dataUpload = await upload(file)\\n\\n      // 下载\\n      const dataDownload = await download(dataUpload.output.url)\\n\\n      result.input = dataUpload.input.size\\n      result.output = dataUpload.output.size\\n      result.ratio = 1 - dataUpload.output.ratio\\n      result.file = Buffer.alloc(dataDownload.length, dataDownload, 'binary')\\n    } catch (err) {\\n      result.msg = `[${chalk.blue(path)}] ${chalk.red(JSON.stringify(err))}`\\n    }\\n    return result\\n  }\\n}\\n```\\n\\n`compressImg`返回一个`async`函数，该函数先调用`upload`进行图片上传，接着调用`download`进行下载，最终返回该图片的`buffer`数据。\\n\\n#### compressSvga\\n> packages/tiny/src/features/process.ts\\n```ts\\n/**\\n * 压缩svga\\n * @param { string } path 路径\\n * @param { buffer } source svga buffer\\n * @returns { promise<Idetail> }\\n */\\ninterface IcompressSvga {\\n  (path: string, source: Buffer): () => Promise<Idetail>\\n}\\nlet compressSvga: IcompressSvga\\ncompressSvga = (path, source) => {\\n  return async () => {\\n    const result = {\\n      input: 0,\\n      output: 0,\\n      ratio: 0,\\n      path,\\n      file: source,\\n      msg: ''\\n    }\\n    try {\\n      // 解析svga\\n      const data = ProtoMovieEntity.decode(\\n        pako.inflate(toArrayBuffer(source))\\n      ) as unknown as IsvgaData\\n      const { images } = data\\n      const list = Object.keys(images).map(path => {\\n        return compressImg({ path, file: toBuffer(images[path]) })\\n      })\\n\\n      // 对svga图片进行压缩\\n      const detail = await Promise.all(list.map(fn => fn()))\\n      detail.forEach(({ path, file }) => {\\n        data.images[path] = file\\n      })\\n\\n      // 压缩buffer\\n      const file = pako.deflate(\\n        toArrayBuffer(ProtoMovieEntity.encode(data).finish() as Buffer)\\n      )\\n      result.input = source.length\\n      result.output = file.length\\n      result.ratio = 1 - file.length / source.length\\n      result.file = file\\n    } catch (err) {\\n      result.msg = `[${chalk.blue(path)}] ${chalk.red(JSON.stringify(err))}`\\n    }\\n    return result\\n  }\\n}\\n```\\n\\n`compressSvga`的「输入」、「输出」和`compressImg`保持一致，目的是为了可以使用`promise.all`同时调用。在`compressSvga`内部，对`svga`进行解析成`data`，获取到`svga`的图片列表`images`，接着调用`compressImg`对`images`进行压缩，使用压缩后的图片覆盖`data.images`，最后再把`data`编码后，写入到本地覆盖原本的`svga`。\\n\\n## 最后\\n\\n再说一遍，大家真正使用的时候，要使用官方的`tinify`进行压缩。\\n\\n参考文章：\\n\\n-   [protobuf.js](https://github.com/protobufjs/protobuf.js)\\n-   [SVGAPlayer-Web-Lite](https://github.com/svga/SVGAPlayer-Web-Lite)\\n-   [tinify](https://tinypng.com/developers/reference/nodejs)\\n\\n祝大家生活愉快，工作顺利！\\n\\n「 --- The end --- 」"
    },
    {
        "article_id": "7153986552287690760",
        "cover_image": "https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d269a4937bf34f32a5bc56d8b01562cd~tplv-k3u1fbpfcp-watermark.image?",
        "title": "2023 届秋招回顾，寒气逼人。。。",
        "brief": "最近几天朋友圈被一篇文章刷屏了，是一位参与了 2023 届秋招的同学分享的秋招回顾总结。 都说今年的秋招难，寒气弥漫，那我们一起来看看这位同学是如何准备秋招、如何应对焦虑，最终拿到 offer 的吧！",
        "ctime": "1665667346",
        "mtime": "1665671864",
        "user_name": "程序员追风",
        "avatar": "https://p3-passport.byteacctimg.com/img/user-avatar/ba74cb9d376f8f84e5cf942c321d9b86~300x300.image",
        "content": "最近几天朋友圈被一篇文章刷屏了，是一位参与了 2023 届秋招的同学分享的秋招回顾总结。\\n\\n都说今年的秋招难，寒气弥漫，那我们一起来看看这位同学是如何准备秋招、如何应对焦虑，最终拿到 offer 的吧！\\n\\n以下是他的分享：\\n\\n> 原文链接：https://www.cnblogs.com/yuanchuziwen/p/16770895.html\\n> \\n> 作者：OliQ\\n\\n# 自我介绍\\n\\n我来自杭州的一所双非一本学校，是一名普通的本科生，专业【软件工程】。\\n\\n## 初学编程\\n\\n事实上，我从高中毕业起就开始思考未来的工作了，一开始网上都是 Python 相关的新闻，因此从高中毕业的暑假就开始学 Python，当时在新华书店，捧着一本入门书天天看；\\n\\n但是看了并没有什么用，除了大一的时候吹牛皮，啥都没学到。\\n\\n然后自 2020 年初(大一寒假) 疫情爆发，学校线上授课；课程中有【面向对象语言】的学习，自此开始正式的跟着视频学习 Java 了。\\n\\n## 第一次实习\\n\\n2021年暑假(大二暑假)，我的绩点排名在学校保研线边缘徘徊，但又不愿去刷那些水课的绩点，因此决定考研或者工作，期间比较迷茫。\\n\\n当时在网上得到一位大数据方向前辈的指点，他说了一句话：“早，就是优势。”\\n\\n因此，我决定先去实习，当时在杭州人工智能小镇找了家公司实习。\\n\\n虽说是实习，但其实基本每天上班啥也不干，主管也没分配任务，就是一直在看书，期间看完了周志明老师的 JVM，以及几本讲并发编程的书。\\n\\n## 第二次实习\\n\\n大三上时，眼看着 Java 越来越卷，自己开始学习了大数据相关的组件，像 Hadoop、HBase、Flume 等等组件，一直学到了实时计算之前。\\n\\n大三下时，我明白自己是一个心态非常不稳定的人，考研对我来说，最后几个月会非常的难熬，并且考研失败的风险也让我望而却步，因此下定决心本科就业！\\n\\n寒假的时候跟着视频完成了【谷粒商城】那个项目，之后立刻着手准备找实习。\\n\\n也就是在这第二段实习过程中(2022上半年)，我真正的学到了一些实际的开发技巧。\\n\\n实习期间，看完了几本深入讲中间件 ZK、Redis、Spring源码 和 代码重构的书。\\n\\n本次实习，让我受益良多，由衷感谢我的 mentor（导师）和主管！\\n\\n# 秋招情况\\n\\n我从 6 月底开始复习准备，因为准备得比较晚，所以基本没参加提前批。\\n\\n正式批总共投递了近 150 家公司，笔试了 30 家，面试了 15 个公司，除了海康威视，其他基本都意向或排序了。\\n\\n大致情况如下：\\n\\n-   offer：兴业数金\\n-   意向：猿辅导，Aloudata\\n-   排序 / 审批：华为，网易雷火，荣耀，招银网络，古茗奶茶，CVTE，以及一众独角兽公司\\n-   面试挂：海康威视\\n\\n## CVTE 提前批面试（已拒）\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a854792cb6334e9388f4ea7e05520a46~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n## 大应科技（OC）\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bdb1a384652c48e3a69aac60ef7e1284~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n\\n## e签宝 提前批（已拒）\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/072ce7fc5249461b9b9490481fd79cd6~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n\\n## 荣耀 Honor（录用决策中）\\n\\n![图片](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/74b4e84f242d491ba69acdff1f112b76~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n## 猿辅导（OC）\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c48c60fe3bf5481cb306b2802087ac1d~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n## 趣链科技（流程中）\\n\\n![图片](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d760694d8294b3e95d9dfefb94c6a6f~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n## 海康威视（已挂）\\n\\n![](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d3c4f95b5bc40c18bb1c43bc412404f~tplv-k3u1fbpfcp-watermark.image?)\\n\\n## SMART（已拒）\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c99b296eba544729fdb130c330cbc9a~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n## 寒王厂（泡池子）\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3eaf6481144648e49ca79ff6e4be5562~tplv-k3u1fbpfcp-zoom-1.image)  \\n\\n## 网易雷火（排序中）\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cddc3b08edad48b8b6650037b1732c92~tplv-k3u1fbpfcp-zoom-1.image)  \\n\\n## 招银网络（流程中）\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f05f676cd1434d5bbc3949c0826c3889~tplv-k3u1fbpfcp-zoom-1.image)\\n  \\n## 古茗奶茶（流程中）\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1872c11bc381495d82b8dfdd4d155510~tplv-k3u1fbpfcp-zoom-1.image) \\n\\n# 复习方式\\n\\n## 关于焦虑\\n\\n我们先要肯定一点，在复习的时候，【焦虑】是一件必然的事情，我们要正视焦虑。\\n\\n就拿我自己举例子吧，【双非本科】的学历会把我放到一个最最糟糕的位置。\\n\\n自开始复习时，我内心就非常非常的焦虑，胸膛经常会像要爆炸一样的沉闷(真的)...\\n\\n而我的缓解方式主要分为两种吧：\\n\\n-   运动  \\n\\n-   -   背一会八股或者刷一会题之后就去走走\\n    -   每天晚上去操场跑步\\n\\n-   心理慰藉    \\n-   -   面试前，我会像《三傻大闹宝莱坞》里的阿米尔汗一样，拍着自己的胸口对自己说 “Aal izz well”\\n    -   给自己想好一个下下策，如果秋招真的找不到工作该怎么办？那至少还有春招，对比明年考研失利的同学，我至少积累了经验！\\n\\n## 复习流程\\n\\n我的整体复习流程分为三步：\\n\\n-   处理基础知识\\n-   看八股\\n-   查漏补缺\\n\\n### 阶段一：处理基础知识\\n\\n对于基础知识部分，我自知《计网》和《操作系统》这两门课学的很差，所以一开始就复习这部分知识。\\n\\n当时先把两门课的教材翻了一遍，然后做了一些摘抄，但说实话基本没用。\\n\\n这部分知识，我在面试过程中，大概有 50% 的几率会被问到操作系统，但从来没被问到过计网(幸运)。\\n\\n之后复习《设计模式》，先跟着一个 csdn 上的博客边看别写，之后找了一个很老的(2003年)博客总结，反复背诵，基本能手写大部分的模式实现了。\\n\\n这部分知识，我在面试过程中，要求写过 单例 、三大工厂 和 发布订阅 的实现，问过项目中和 Spring 以及其它中间件中用到的设计模式。\\n\\n### 阶段二：看八股\\n\\n全面进军 Java 八股文。\\n\\n我先看了自己在实习前准备的那些文档，之后网上找了 JavaGuide、JavaKeeper 这两份文档作为补充。\\n\\n因为自己之前有过两段的实习经验，因此背过很多次八股。\\n\\n但考虑到本次秋招可能会把战线拉得比较长，因此就自己总结了一份脑图。\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a235705365f427790a4c8b7c7aa505a~tplv-k3u1fbpfcp-zoom-1.image)  \\n\\n### 阶段三：查漏补缺\\n\\n经过几轮面试，逐渐察觉到了自己的一些不足，之后针对性的去完善了一下。\\n\\n这里随便列举几个点，供其它同学参考：\\n\\n-   为什么说进程切换开销比线程大？\\n-   NIO到底有没有阻塞，NIO到底能不能提高 IO 效率？\\n-   Redis分布式锁的限制，RedLock的实现？\\n-   ZK 明明有了有序的指令队列，为什么还要用 zxid来辅助排序？\\n-   basic paxos 和 multi paxos 的使用？\\n-   为什么拜占庭将军无解？\\n-   还有一些业务场景的选择问题。。。\\n\\n# 总结\\n\\n我一直提醒自己：你是一个双非本科生，这个秋招你如果再不拼命，你就要完蛋了。\\n\\n我想，我是幸运的：\\n\\n-   我很幸运 在实习的时候，有一个好的 mentor，带我开发了字节码相关的组件，让我的简历不容易挂；\\n-   我很幸运 在复习的时候，有几位好的朋友，分享经验，加油鼓励，让我没有被焦虑击倒；\\n-   我很幸运 在面试的时候，有无私的舍友们，能在我需要笔试面试时，把宿舍让给我，让我没有后顾之忧；\\n\\n当然，也会有遗憾。每个人心中都有着大厂梦，而今年进大厂确实很难：\\n\\n-   我从大一开始就非常渴望进入阿里巴巴，实习的时候五面阿里不得，秋招全部简历挂；\\n-   百度+度小满，投了 4 个岗位，全部简历挂；\\n-   字节，一开始担心算法没敢投，之后担心基础知识也没敢投，也很遗憾了；\\n\\n人生，有所得就有所失，有所失就有所得。\\n\\n最后，想给其他明后年参加秋招的同学一些提醒：\\n\\n-   一定要早做准备，早点实习，早点刷算法题，早就是优势；\\n-   人生无常，意外太多，绝对不要 all in 一家公司；\\n-   鞋合不合适只有脚知道，自己总结的八股会更适合自己；\\n-   多刷 力扣 Hot 100，或者 Codetop 热门题，反复刷；\\n-   选择大于努力；\\n\\n在寒气逼人的 2022，我们需要抱团取暖...\\n\\n推荐： [2022年Java面试题目收集整理归纳（持续更新）](<https://juejin.cn/post/7135332975440789518>)\\n"
    },
    {
        "article_id": "7129685508589879327",
        "cover_image": "https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0f037462f754fbdb8b0a11e6c4a8e8d~tplv-k3u1fbpfcp-watermark.image?",
        "title": "为什么有公司规定所有接口都用Post？",
        "brief": "看到这个标题，你肯定觉得离谱。怎么会有公司规定所有接口都用Post，是架构菜还是开发菜。这可不是夸大其词，这样的公司不少。在特定的情况下，规定使用Post可以减少不少的麻烦，一起看看。",
        "ctime": "1660009275",
        "mtime": "1660027493",
        "user_name": "正经程序员",
        "avatar": "https://p9-passport.byteacctimg.com/img/user-avatar/5c4578847d69f49fdbdc232ec9c53549~300x300.image",
        "content": "---\\ntheme: condensed-night-purple\\n---\\n携手创作，共同成长！这是我参与「掘金日新计划 · 8 月更文挑战」的第8天，[点击查看活动详情](https://juejin.cn/post/7123120819437322247)\\n\\n看到这个标题，你肯定觉得离谱。怎么会有公司规定所有接口都用Post，是架构菜还是开发菜。这可不是夸大其词，这样的公司不少。\\n\\n在特定的情况下，规定使用Post可以减少不少的麻烦，一起看看。\\n\\n# Answer the question\\n\\n我们都知道，get请求一半用来获取服务器信息，post一般用来更新信息。get请求能做的，post都能做，get请求不能做的，post也都能做。\\n\\n如果你的团队都是大佬，或者有着良好的团队规范，所有人都在平均水平线之上，并且有良好的纠错机制，那基本不会制定这样的规则。\\n\\n但如果团队成员水平参差不齐，尤其是小团队，创业团队，常常上来就开干，没什么规范，纯靠开发者个人素质决定代码质量，这样的团队就不得不制定这样的规范。\\n\\n毕竟可以减少非常多的问题，Post不用担心URL长度限制，也不会误用缓存。通过一个规则减少了出错的可能，这个决策性价比极高。\\n\\n造成的结果：公司有新人进来，什么lj公司，还有这种要求，回去就在群里讲段子。\\n\\n实际上都是有原因的。\\n\\n有些外包公司或者提供第三方接口的公司也会选择只用Post，就是图个方便。\\n\\n# 最佳实践\\n\\n可能各位大佬都懂了哈，我还是给大家科普下，GET、POST、PUT、DELETE，他们的区别和用法。\\n\\n## GET\\n\\nGET 方法用于从服务器检索数据。这是一种只读方法，因此它没有改变或损坏数据的风险，使用 GET 的请求应该只被用于获取数据。\\n\\nGET API 是幂等的。 每次发出多个相同的请求都必须产生相同的结果，直到另一个 API（POST 或 PUT）更改了服务器上资源的状态。\\n\\n## POST\\n\\nPOST 方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或创建新资源。POST既不安全也不幂等，调用两个相同的 POST 请求将导致两个不同的资源包含相同的信息（资源 ID 除外）。\\n\\n\\n## PUT\\n主要使用 PUT API更新现有资源（如果资源不存在，则 API 可能决定是否创建新资源）。\\n\\n## DELETE\\n\\nDELETE 方法删除指定的资源。DELETE 操作是幂等的。如果您删除一个资源，它会从资源集合中删除。\\n\\n\\n|  | GET |POST|PUT|DELETE|\\n| --- | --- |--- |--- |--- |\\n| 请求是否有主体 | 否 |是 |是  |可以有|\\n|成功的响应是否有主体|是|是| 否 |可以有|\\n|安全|是|否| 否 |否|\\n|幂等|是|否| 是 |是|\\n|可缓存|是|否| 否 |否|\\n|HTML表单是否支持|是|是| 否 |否|\\n\\n**你们公司有啥奇葩规定吗？咱们评论区见，我是正经程序员，欢迎点赞收藏关注，感谢！**\\n\\n"
    },
    {
        "article_id": "7132409301380890660",
        "cover_image": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41016b4e05a042fca2cf0b021d032502~tplv-k3u1fbpfcp-watermark.image?",
        "title": "😈当一个摆子前端太闲的时候会做什么",
        "brief": "今日周二，在下与诸位同道中人一起来讨论一个话题：当一个前端空闲的时候会做些什么。 🤯是独自深耕论坛，钻研学术？ 👯还是三两闲聊打趣，坐而论道？ 💆‍♂️亦或是闭目养神，神游天地？",
        "ctime": "1660643489",
        "mtime": "1660707070",
        "user_name": "Urias",
        "avatar": "https://p3-passport.byteacctimg.com/img/user-avatar/ea29f8dff26262b09b39686e5578462f~300x300.image",
        "content": "---\\ntheme: channing-cyan\\nhighlight: an-old-hope\\n---\\n\\n> 国破山河在，城春草木深。 ——杜甫·春望\\n\\n今日周一，在下与诸位同道中人一起来讨论一个话题：**当一个前端空闲的时候会做些什么**。\\n\\n🤯是独自深耕论坛，钻研学术？\\n\\n👯还是三两闲聊打趣，坐而论道？\\n\\n💆‍♂️亦或是闭目养神，神游天地？\\n\\n---\\n\\n作为一名优秀的（摆子、摸鱼、切图...）前端开发者，在下在空闲时间最喜欢做的还是钻研（混）前端技术（工作量）。\\n\\n新的一周，新的开始，上篇文章中有同学批评在下说不够“玩”，那么**这周**就“简单”画一个鼠标精灵再交予各位“玩一玩”吧。\\n\\n> 说明一下：在下说的玩，是写一遍嗷\\n>\\n> `温馨提示`：文章较长，图片较多，不耐看的同学可以先去文末玩一玩在下的“大眼”，不满足了再去创造属于各位自己的鼠标精灵\\n\\n以下是这周“玩具”的简单介绍：\\n\\n- 名称：大眼\\n- 生辰：发文时间的昨天(2022-08-15)\\n- 性别：随意\\n- 情绪：发怒/常态\\n- 状态：休眠/工作中\\n- 简介：没啥特别的，大眼就干一件事，就是盯着你的鼠标，以防你找不到鼠标了。不过大眼有起床气，而且非常懒散，容易犯困。\\n\\n大眼生活照： \\n\\n<p align=center><img src=\\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd075386cda0486aa7b47d39562b5a40~tplv-k3u1fbpfcp-watermark.image?\\\" alt=\\\"image.png\\\"  width=\\\"70%\\\"/></p>\\n\\n接下来请各位跟随在下的节奏，一步一步把自己的“大眼”创造出来。\\n\\n### 👀 画“大眼”先画圆\\n\\n老话说“画人先画骨”，同样画大眼也得先画它的骨，嗯......也就是个圆，没错，就是个普通的圆\\n\\n在下的笔法还是老套路，先给他一个容器。\\n\\n```html\\n<div class=\\\"eyeSocket\\\"></div>\\n```\\n\\n给大眼容器添加一些必要的样式\\n\\n```css\\nbody {\\n    width: 100vw;\\n    height: 100vh;\\n    overflow: hidden;\\n    background-color: #111;\\n}\\n.eyeSocket {\\n    position: absolute; // 浮动居中\\n    left: calc(50% - 75px);\\n    top: calc(50% - 75px);\\n    width: 150px; // 固定宽度\\n    aspect-ratio: 1; // 长宽比 1:1 如果浏览器不支持该属性，换成 height: 150px 也一样\\n    border-radius: 50%;\\n    border: 4px solid rgb(41, 104, 217);\\n    z-index: 1;\\n}\\n```\\n\\n效果：\\n\\n<p align=center><img src=\\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dec359e3fb944c780f575462b3c4a57~tplv-k3u1fbpfcp-watermark.image?\\\" alt=\\\"image.png\\\"  width=\\\"30%\\\"/></p>\\n\\n然后就是另外两个圆和一些阴影效果，由于另外两个圆没有特殊的动效，所以在下使用两个`伪元素`来实现\\n\\n```css\\n.eyeSocket::before,\\n.eyeSocket::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    top: 50%;\\n    left: 50%;\\n    transform: translate(-50%, -50%); // 居中\\n    border-radius: 50%;\\n    box-sizing: border-box; // css3盒子模型\\n}\\n.eyeSocket::before {\\n    width: calc(100% + 20px);\\n    height: calc(100% + 20px);\\n    border: 6px solid #02ffff;\\n}\\n.eyeSocket::after {\\n    width: 100%;\\n    height: 100%;\\n    border: 4px solid rgb(35, 22, 140);\\n    box-shadow: inset 0px 0px 30px rgb(35, 22, 140);\\n}\\n```\\n\\n效果：\\n\\n<p align=center><img src=\\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/271f55b6dd6e47c1a34ef73fb7d390d6~tplv-k3u1fbpfcp-watermark.image?\\\" alt=\\\"image.png\\\"  width=\\\"30%\\\"/></p>\\n\\n### 👀 画龙需点睛\\n\\n大眼的眼球画好了，之后就需要给它点上眼睛，喜欢什么样的眼睛因人而异，在下就选择这种`分割线`来作为大眼的眼仁。\\n\\n为了方便做一些过渡效果，在下使用`echarts`来完成这个眼仁。\\n\\n首先在下需要各位通过任何方式引入`echarts`库，然后给眼仁一个容器，并初始化`echarts`画布。\\n\\n```html\\n<div class=\\\"eyeSocket\\\">\\n    <div id=\\\"eyeball\\\"></div>\\n</div>\\n```\\n\\n```css\\n#eyeball {\\n    width: 100%;\\n    height: 100%;\\n}\\n```\\n\\n```js\\n// 画眼球\\nlet eyeball = document.getElementById('eyeball'); // 获取eyeball元素\\nlet eyeballChart = echarts.init(eyeball); // 初始化画布\\nfunction getEyeballChart() {\\n    eyeballChart.setOption({\\n        series: [\\n            {\\n                type: 'gauge', // 使用仪表盘类型\\n                radius: '-20%', // 采用负数是为了让分割线从内向外延伸\\n                clockwise: false,\\n                startAngle: '0', // 起始角度\\n                endAngle: '270', // 结束角度\\n                splitNumber: 3, // 分割数量，会将270度分割为3份，所以有四根线\\n                detail: false,\\n                axisLine: {\\n                    show: false,\\n                },\\n                axisTick: false,\\n                splitLine: {\\n                    show: true,\\n                    length: 12, // 分割线长度\\n                    lineStyle: {\\n                        shadowBlur: 20, // 阴影渐变\\n                        shadowColor: 'rgb(0, 238, 255)', // 阴影颜色\\n                        shadowOffsetY: '0',\\n                        color: 'rgb(0, 238, 255)', // 分割线颜色\\n                        width: 4, // 分割线宽度\\n                    }\\n                },\\n                axisLabel: false\\n            },\\n            {\\n                type: 'gauge',\\n                radius: '-20%',\\n                clockwise: false,\\n                startAngle: '45', // 倾斜45度\\n                endAngle: '315',\\n                splitNumber: 3,\\n                detail: false,\\n                axisLine: {\\n                    show: false,\\n                },\\n                axisTick: false,\\n                splitLine: {\\n                    show: true,\\n                    length: 12,\\n                    lineStyle: {\\n                        shadowBlur: 20,\\n                        shadowColor: 'rgb(0, 238, 255)',\\n                        shadowOffsetY: '0',\\n                        color: 'rgb(0, 238, 255)',\\n                        width: 4,\\n                    }\\n                },\\n                axisLabel: false\\n            }\\n        ]\\n    })\\n}\\ngetEyeballChart();\\n```\\n\\n效果： \\n\\n<p align=center><img src=\\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/708787a3fd8c4f11ad371533a0541548~tplv-k3u1fbpfcp-watermark.image?\\\" alt=\\\"image.png\\\"  width=\\\"30%\\\"/></p>\\n\\n眼仁就这么轻轻松松的画好了，对于常用echarts的同学可以说是轻而易举，对吧。\\n\\n同时一个静态的大眼也创建完毕，接下来就要给大眼赋予生命了。\\n\\n> 再次提醒：长文，而且代码量多，建议抽思路看即可。\\n\\n### ✨ 生命仪式：休眠状态\\n\\n赋予生命是神圣的，她需要一个过程，所以在下从最简单的开始——**休眠状态**。\\n\\n在下给大眼设计的休眠状态，就是闭着眼睛睡觉，其实不露出眼仁同时有节奏的呼吸（缩放）罢了，相比于整个生命仪式来说，还是比较简单的，只需要修改大眼外框的大小即可。\\n\\n##### 呼吸\\n\\n这里在下采用的是`css转换+动画`的方式\\n\\n```html\\n<div class=\\\"eyeSocket eyeSocketSleeping\\\">\\n    <div id=\\\"eyeball\\\"></div>\\n</div>\\n```\\n\\n```css\\n/* ...其他样式 */\\n.eyeSocketSleeping {\\n    animation: sleeping 6s infinite;\\n}\\n\\n@keyframes sleeping {\\n    0% {\\n        transform: scale(1);\\n    }\\n\\n    50% {\\n        transform: scale(1.2);\\n    }\\n\\n    100% {\\n        transform: scale(1);\\n    }\\n}\\n```\\n\\n<p align=center><img src=\\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/884c6529280b43a5993ee5eab06c31a1~tplv-k3u1fbpfcp-watermark.image?\\\" alt=\\\"sleeping.gif\\\"  width=\\\"30%\\\"/></p>\\n\\n##### 闭眼\\n\\n搞定了**呼吸**，但是睁着眼睛怎么睡得着？\\n\\n所以接下来在下要帮助大眼把眼睛闭上，这时候咱们前面给眼睛设置负数`radius`的好处就来了（**其实是在下设计好的**），因为`分割线`是从内向外延伸的，所以此时只需要慢慢减小分割线的高度，即可实现眼睛慢慢缩小的效果，即在下给大眼设计的闭眼效果。\\n\\n实现的效果是：大眼慢慢闭上眼睛（分割线缩小至0），然后开始**呼吸**\\n\\n直接上代码\\n\\n```html\\n<div class=\\\"eyeSocket\\\" id='bigEye'> // 去掉 eyeSocketSleeping 样式，添加id\\n    <div id=\\\"eyeball\\\"></div>\\n</div>\\n```\\n\\n```js\\nlet bigEye = document.getElementById('bigEye'); // 获取元素\\n// ...其他代码\\nlet leftRotSize = 0; // 旋转角度\\nlet ballSize = 12; // 眼睛尺寸\\nlet rotTimer; // 定时器\\n\\nfunction getEyeballChart() {\\n    eyeballChart.setOption({\\n        series: [\\n            {\\n                startAngle: `${0 + leftRotSize * 5}`, // 加为逆时针旋转，乘5表示速度为leftRotSize的倍\\n          \\tendAngle: `${270 + leftRotSize * 5}`, // 即变为每10微秒移动0.5度，1234678同理\\n                // ...其他\\n                splitLine: {\\n                    length: ballSize, // 分割线高度设置为眼球尺寸变量\\n                },\\n            },\\n            {\\n                startAngle: `${45 + leftRotSize * 5}`,\\n          \\t\\tendAngle: `${315 + leftRotSize * 5}`,\\n                // ...其他\\n                splitLine: {\\n                    length: ballSize, // 同上\\n                }\\n            },\\n            }\\n        ]\\n    })\\n}\\n// 休眠\\nfunction toSleep() {\\n    clearInterval(rotTimer); // 清除定时器\\n    rotTimer = setInterval(() => {\\n        getEyeballChart()\\n        if (ballSize > 0) {\\n            ballSize -= 0.1; // 当眼球存在时慢慢减小\\n        } else {\\n            bigEye.className = 'eyeSocket eyeSocketSleeping'; // 眼球消失后添加呼吸\\n        }\\n        leftRotSize === 360 ? (leftRotSize = 0) : (leftRotSize += 0.1); // 旋转，\\n    }, 10);\\n}\\ngetEyeballChart();\\ntoSleep()\\n```\\n\\n> 旋转实现原理：（看过在下第一篇动效的同学对旋转的实现原理应该不陌生）\\n>\\n> **修改每个圈的起始角度（startAngle）和结束角度（endAngle），并不断刷新视图，** \\n>\\n> **增加度数为逆时针旋转，减去度数为顺时针旋转**\\n\\n如此一来就实现了眼睛缩小消失，然后开始呼吸的过程，同时咱们的大眼也进入了生命仪式之**休眠状态**（乱入的鼠标有点烦）；\\n\\n<p align=center><img src=\\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b34439dc789482298da1ca1a4dd45a6~tplv-k3u1fbpfcp-watermark.image?\\\" alt=\\\"tosleep.gif\\\"  width=\\\"30%\\\"/></p>\\n\\n### ✨ 生命仪式：起床气状态\\n\\n在下相信，在座（站？蹲？）的各位同僚身边或者自身都存在一些小毛病，譬如咱们的大眼，它不但懒，喜欢睡觉，甚至叫醒它还会生气，通俗讲就是有**起床气**。\\n\\n心理学上说有种说法是：**情绪会让你接近生命的本真**。\\n\\n生命不就是情绪的结合嘛，没有情绪怎么能称之为生命的呢？\\n\\n在设计之前我们还有点准备工作，就是让大眼先处于**休眠状态**。\\n\\n```html\\n<div class=\\\"eyeSocket eyeSocketSleeping\\\" id='bigEye'> // 添加休眠\\n    <div id=\\\"eyeball\\\"></div>\\n</div>\\n```\\n\\n```js\\n// ...其他代码\\nlet ballSize = 0; // 初始眼球尺寸为0\\n// ...其他代码\\n// getEyeballChart(); // 把这两行删掉\\n// toSleep() // 把这两行删掉\\n```\\n\\n##### 唤醒\\n\\n然后我们需要唤醒大眼，所以首先我们需要添加**唤醒动作**——点击事件；\\n\\n```js\\nlet bigEye = document.getElementById('bigEye'); // 获取元素\\n// ...其他代码\\nlet leftRotSize = 0;\\nlet ballSize = 0;\\nlet rotTimer;\\nlet isSleep = true; // 是否处于休眠状态\\n// 添加点击事件，当处于休眠状态时执行唤醒方法\\nbigEye.addEventListener('click', () => {\\n    if (!isSleep) return;\\n    clickToWeakup();\\n})\\n// 唤醒\\nfunction clickToWeakup() {\\n    isSleep = false; // 修改状态\\n    bigEye.className = 'eyeSocket'; // 清除休眠状态\\n    clearInterval(rotTimer); // 清除定时器\\n    rotTimer = setInterval(() => {\\n        getEyeballChart()\\n        ballSize <= 12 && (ballSize += 0.1);\\n        leftRotSize === 360 ? (leftRotSize = 0) : (leftRotSize += 0.1);\\n    }, 10);\\n}\\n```\\n\\n这样点一下大眼它就**苏醒**了过来：\\n\\n<p align=center><img src=\\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14b3283102414ef7ad4c8a1ecaf08924~tplv-k3u1fbpfcp-watermark.image?\\\" alt=\\\"toWeakup.gif\\\"  width=\\\"30%\\\"/></p>\\n\\n\\n\\n##### 生气\\n\\n**但是！**\\n\\n这是一个没有情绪的大眼，而在下需要的是一个有**起床气**的大眼，所以这样的大眼咱们不要！\\n\\n退格←...退格←...退格←...退格←...退格←...退格←......\\n\\n......\\n\\n慢点慢点，也不是全都不要了，咱们只需要修改一下他唤醒以后的操作，给他添加上**起床气**不就行了？\\n\\n接着来吧：\\n\\n首先我们把代表了大眼常态的**蓝色系**抽离出来，使用`css变量代替`，然后再苏醒后给他添加成代表生气的**红色系**\\n\\n```css\\nbody {\\n    width: 100vw;\\n    height: 100vh;\\n    overflow: hidden;\\n    background-color: #111;\\n    perspective: 1000px;\\n    --c-eyeSocket: rgb(41, 104, 217);\\n    --c-eyeSocket-outer: #02ffff;\\n    --c-eyeSocket-outer-shadow: transparent;\\n    --c-eyeSocket-inner: rgb(35, 22, 140);\\n}\\n.eyeSocket {\\n    /* 其他属性 */\\n    border: 4px solid var(--c-eyeSocket);\\n    box-shadow: 0px 0px 50px var(--c-eyeSocket-outer-shadow); /* 当生气时添加红色外发光，常态则保持透明 */\\n    transition: border 0.5s ease-in-out, box-shadow 0.5s ease-in-out; /* 添加过渡效果 */\\n}\\n.eyeSocket::before,\\n.eyeSocket::after {\\n    /* 其他属性 */\\n    transition: all 0.5s ease-in-out; /* 添加过渡效果 */\\n}\\n.eyeSocket::before {\\n    /* 其他属性 */\\n    border: 6px solid var(--c-eyeSocket-outer);\\n}\\n.eyeSocket::after {\\n    /* 其他属性 */\\n    border: 4px solid var(--c-eyeSocket-inner);\\n    box-shadow: inset 0px 0px 30px var(--c-eyeSocket-inner);\\n}\\n```\\n\\n```js\\n// ...其他代码\\nlet ballColor = 'transparent'; // 默认透明，其实默认是啥都无所谓，反正看不见\\n\\nfunction getEyeballChart() {\\n    eyeballChart.setOption({\\n        series: [\\n            {\\n                // ...其他\\n                splitLine: {\\n                    // ...其他\\n                    lineStyle: {\\n                        // ...其他\\n                        shadowColor: ballColor, // 把眼睛的眼影颜色设为变量控制\\n                        color: ballColor,\\n                    }\\n                },\\n            },\\n            {\\n                // ...其他\\n                splitLine: {\\n                    // ...其他\\n                    lineStyle: {\\n                        // ...其他\\n                        shadowColor: ballColor,\\n                        color: ballColor,\\n                    }\\n                }\\n            },\\n            }\\n        ]\\n    })\\n}\\n// 生气模式\\nfunction setAngry() {\\n    // 通过js修改body的css变量\\n    document.body.style.setProperty('--c-eyeSocket', 'rgb(255,187,255)');\\n    document.body.style.setProperty('--c-eyeSocket-outer', 'rgb(238,85,135)');\\n    document.body.style.setProperty('--c-eyeSocket-outer-shadow', 'rgb(255, 60, 86)');\\n    document.body.style.setProperty('--c-eyeSocket-inner', 'rgb(208,14,74)');\\n    ballColor = 'rgb(208,14,74)';\\n}\\n// 常态模式\\nfunction setNormal() {\\n    document.body.style.setProperty('--c-eyeSocket', 'rgb(41, 104, 217)');\\n    document.body.style.setProperty('--c-eyeSocket-outer', '#02ffff');\\n    document.body.style.setProperty('--c-eyeSocket-outer-shadow', 'transparent');\\n    document.body.style.setProperty('--c-eyeSocket-inner', 'rgb(35, 22, 140)');\\n    ballColor = 'rgb(0,238,255)';\\n}\\n// 唤醒\\nfunction clickToWeakup() {\\n    isSleep = false;\\n    bigEye.className = 'eyeSocket';\\n    setAngry(); // 设置为生气模式\\n    clearInterval(rotTimer);\\n    rotTimer = setInterval(() => {\\n        getEyeballChart()\\n        ballSize <= 50 && (ballSize += 1);\\n        leftRotSize === 360 ? (leftRotSize = 0) : (leftRotSize += 0.5);\\n    }, 10);\\n}\\n// 点击\\nbigEye.addEventListener('click', () => {\\n    if (!isSleep) return;\\n    clickToWeakup();\\n})\\n```\\n\\n大眼生气长这样：\\n\\n<p align=center><img src=\\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a51a1cfbd5f044d58a06d4e4cca46193~tplv-k3u1fbpfcp-watermark.image?\\\" alt=\\\"angry.gif\\\"  width=\\\"30%\\\"/></p>\\n\\n##### 更生气\\n\\n不知道在座（站？蹲擦？）各位是如何看待，但是在下看来，大眼这样好像还不够生气。\\n\\n没错还不够生气，如何让大眼起来更生气呢，生气到**发火**如何？\\n\\n嗦干酒干！\\n\\n在下这里采用的是`svg滤镜`的方法，`svg滤镜`的属性和使用方法非常繁多，在下使用得也不是很娴熟，本文中在下就不赘述了，网上冲浪有许多技术大牛讲的非常好，希望各位勉励自己。emmmm......**然后来教会在下，记得给在下留言文章地址**\\n\\n在下使用的是`feTurbulence`来形成噪声，然后用`feDisplacementMap`替换来给大眼添加粒子效果，因为`feDisplacementMap`会混合掉元素，所以在下需要给大眼新增一个大眼替身来代替大眼被融合。\\n\\n**创建大眼替身**\\n\\n```html\\n<div class=\\\"filter\\\"> // 添加滤镜的元素\\n    <div class=\\\"eyeSocket\\\" id='eyeFilter'> // 大眼替身\\n    </div>\\n</div>\\n```\\n\\n```css\\n.filter {\\n    width: 100%;\\n    height: 100%;\\n}\\n.eyeSocket,\\n.filter .eyeSocket { /* 给替身加上相同的样式 */\\n    /* ...原属性 */\\n}\\n```\\n\\n<p align=center><img src=\\\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/876c4b4e0fc0471f8136837d9845979c~tplv-k3u1fbpfcp-watermark.image?\\\" alt=\\\"image.png\\\"  width=\\\"30%\\\"/></p>\\n\\n**融合**\\n\\n```html\\n<div class=\\\"filter\\\">\\n    <div class=\\\"eyeSocket\\\" id='eyeFilter'>\\n    </div>\\n</div>\\n<!-- Svg滤镜 -->\\n<svg width=\\\"0\\\">\\n    <filter id='filter'>\\n        <feTurbulence baseFrequency=\\\"1\\\">\\n            <animate id=\\\"animate1\\\" attributeName=\\\"baseFrequency\\\" dur=\\\"1s\\\" from=\\\"0.5\\\" to=\\\"0.55\\\" begin=\\\"0s;animate1.end\\\">\\n            </animate>\\n            <animate id=\\\"animate2\\\" attributeName=\\\"baseFrequency\\\" dur=\\\"1s\\\" from=\\\"0.55\\\" to=\\\"0.5\\\" begin=\\\"animate2.end\\\">\\n            </animate>\\n        </feTurbulence>\\n        <feDisplacementMap in=\\\"SourceGraphic\\\" scale=\\\"50\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"B\\\" />\\n    </filter>\\n</svg>\\n```\\n\\n```css\\n.filter {\\n    width: 100%;\\n    height: 100%;\\n    filter: url('#filter'); /* 开启滤镜 */\\n}\\n```\\n\\n<p align=center><img src=\\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8aabd1930e8549a8b4e29bf2c98c6c9c~tplv-k3u1fbpfcp-watermark.image?\\\" alt=\\\"copy.gif\\\" width=\\\"30%\\\" /></p>\\n\\n芜湖~果然献祭了一只“大眼”出来的效果看起来确实还不错哈？确实看起来酷炫多了，不愧是**“献祭”**啊！\\n\\n**真眼出现**\\n\\n既然粒子效果已经产生，咱们的真实大眼也就不需要躲躲藏藏了，该站出来获取这粒子“光环”了！\\n\\n大眼：哈！\\n\\n<p align=center><img src=\\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01fe7e71859043fcbd1fddea32b74450~tplv-k3u1fbpfcp-watermark.image?\\\" alt=\\\"fire.gif\\\" width=\\\"30%\\\" /></p>\\n\\n额......\\n\\n其实......\\n\\n也挺好看的嘛，不是吗？毕竟不是献祭的真正的大眼，毕竟是个替身，效果没有本体好也是很正常的对吧。\\n\\n> 本质上是因为`feDisplacementMap`设置了`scale`属性的原因。\\n>\\n> `feDisplacementMap`其实就是一个位置替换滤镜，通过就是改变元素和图形的像素位置的进行重新映射，然后替换一个新的位置，形成一个新的图形。\\n>\\n> 而`scale`就是替换公式计算后偏移值相乘的比例，影响着图形的偏移量和呈现的效果。\\n\\n但是话虽如此，咱这个光环不能真的就这么戴着呀，咱们还需要对光环的位置进行一些微调。\\n\\n```css\\n.filter .eyeSocket {\\n    left: calc(50% - 92px);\\n    top: calc(50% - 92px);\\n}\\n```\\n\\n<p align=center><img src=\\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5036ed8d0904110af4d5aa0859de57b~tplv-k3u1fbpfcp-watermark.image?\\\" alt=\\\"goodfire.gif\\\"  width=\\\"30%\\\"/></p>\\n\\n\\n\\n看看，看看！这不就顺眼多了吗，献祭了替身，所以尺寸都是非常契合的，而且共用了样式，所以当大眼**生气**的时候，光环也会跟着生气。\\n\\n这下光环也有了，看起来的确比之前更生气了。\\n\\n但是我们还需要对大眼做一些细微的调整，因为大眼在常规状态下并不需要这个光环，睡着的时候光环在旁边“滋啦滋啦”不吵的慌么，所以我们还需要把常态下的大眼光环给消除掉。\\n\\n在下采用的是不透明度`opacity`来控制，当大眼处于生气状态时，光环为不透明；处于常规状态时光环透明不可见。\\n\\n```css\\n.filter .eyeSocket {\\n    opacity: 0; // 默认状态下不透明度为0\\n    left: calc(50% - 92px);\\n    top: calc(50% - 92px);\\n    transition: all 0.5s ease-in-out; // 添加过渡效果，值得注意的是不能丢了原本的过渡效果，所以这里使用all\\n}\\n```\\n\\n```js\\n// ...其他代码\\nlet eyeFilter = document.getElementById('eyeFilter'); // 获取元素\\n// 唤醒\\nfunction clickToWeakup() {\\n    eyeFilter.style.opacity = '1'; // 不透明度设为1\\n    // ...其他\\n}\\ndeathEye.addEventListener('click', () => {\\n    if (!isSleep) return;\\n    clickToWeakup();\\n})\\n```\\n\\n这样设置完，一个更生气的大眼就这样出现了：\\n\\n<p align=center><img src=\\\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ecedf4f79d4408f862e581ce1228a98~tplv-k3u1fbpfcp-watermark.image?\\\" alt=\\\"moreAngry.gif\\\"  width=\\\"30%\\\"/></p>\\n\\n**更更生气**\\n\\n不知看到这样**发火**的大眼，各位是不是已经满足于此。\\n\\n但是在下认为不，在下觉得一个真正足够生气的大眼，不只局限于自己生气，还需要找人发泄！！\\n\\n所以在下还给大眼添加了一些大眼找人的动效（当然是找不到的，它这么笨）。\\n\\n其实就是让大眼左右旋转，通过`css转换`来实现。\\n\\n```html\\n<div class=\\\"eyeSocket eyeSocketSleeping\\\" id='bigEye'>\\n    <div id=\\\"eyeball\\\"></div>\\n</div>\\n<div class=\\\"filter\\\">\\n    <div class=\\\"eyeSocket\\\" id='eyeFilter'>\\n    </div>\\n</div>\\n<!-- Svg滤镜 -->\\n<svg width=\\\"0\\\">\\n    ...\\n</svg>\\n```\\n\\n\\n\\n```css\\n/* ...其他样式 */\\nbody {\\n    /* ...其他属性 */\\n    perspective: 1000px;\\n}\\n.eyeSocketLooking {\\n    animation: lookAround 2.5s; // 添加动画，只播放一次\\n}\\n/* 环视动画 */\\n@keyframes lookAround {\\n    0% {\\n        transform: translateX(0) rotateY(0);\\n    }\\n\\n    10% {\\n        transform: translateX(0) rotateY(0);\\n    }\\n\\n    40% {\\n        transform: translateX(-70px) rotateY(-30deg);\\n    }\\n\\n    80% {\\n        transform: translateX(70px) rotateY(30deg);\\n    }\\n\\n    100% {\\n        transform: translateX(0) rotateY(0);\\n    }\\n}\\n```\\n\\n```js\\n// ...其他代码\\nlet bigEye = document.getElementById('bigEye'); // 获取元素\\nlet eyeFilter = document.getElementById('eyeFilter'); \\n\\n// 唤醒\\nfunction clickToWeakup() {\\n    // ...其他代码\\n    eyeFilter.className = bigEye.className = 'eyeSocket eyeSocketLooking'; // 同时给大眼和光环添加环视动画\\n}\\n\\nbigEye.addEventListener('click', () => {\\n    if (!isSleep) return;\\n    clickToWeakup();\\n})\\n```\\n\\n看看大眼在找什么？\\n\\n<p align=center><img src=\\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5aa61c221650457b95ae80455369558e~tplv-k3u1fbpfcp-watermark.image?\\\" alt=\\\"lookaround.gif\\\"  width=\\\"70%\\\"/></p>\\n\\n> 向左看时，Y轴偏移量为-70px，同时按Y轴旋转-30°\\n>\\n> 向右看时，Y轴偏移量为70px，同时Y轴旋转30°\\n\\n### ✨ 生命仪式：自我调整状态\\n\\n这个状态非常好理解，大眼虽然有**起床气**，但是也仅限于起床对吧，总不能一直让它生气，气坏了咋办，带着情绪工作，效果也不好不是吗。\\n\\n所以我们还需要给它一点时间，让它自我调整一下，恢复成正常状态。\\n\\n这个**自我调整状态**就是一个从生气状态变回常态的过程，在这个过程中，大眼需要将生气状态的红色系切换为常态的蓝色系，同时**红眼**也会慢慢褪去恢复正常。\\n\\n其实这个**自我调整状态**还是属于唤醒状态中，只是需要放在**起床气状态**之后。\\n\\n这里在下采纳了上文中有位同学给的建议，监听动画结束事件`webkitAnimationEnd`，然后将**自我调整**放在动画结束以后。\\n\\n同时这里也有两个步骤：\\n\\n1. 退出**起床气状态**；\\n2. 变回常态\\n\\n为了保证两个步骤的先后顺序，可以使用`Promise`来实现。不懂`Promise`的同学可以先去学习一下，在下也讲不清楚哈哈哈哈。\\n\\n```js\\n// ...其他代码\\nbigEye.addEventListener('webkitAnimationEnd', () => { // 监听动画结束事件\\n    new Promise(res => {\\n        clearInterval(rotTimer); // 清除定时器\\n        rotTimer = setInterval(() => {\\n            getEyeballChart(); // 更新视图\\n            ballSize > 0 && (ballSize -= 0.5); // 眼球尺寸减小\\n            leftRotSize === 360 ? (leftRotSize = 0) : (leftRotSize += 0.1);\\n            if (ballSize === 0) { // 当眼球尺寸为0时，将Promise标记为resolved，然后执行后面的代码\\n                clearInterval(rotTimer);\\n                res();\\n            }\\n        }, 10);\\n    }).then(() => {\\n        eyeFilter.style.opacity = '0'; // 清除光环\\n        eyeFilter.className = bigEye.className = 'eyeSocket'; // 清除环视动画\\n        setNormal(); // 设置常态样式\\n        rotTimer = setInterval(() => {\\n            getEyeballChart();\\n            ballSize <= 12 && (ballSize += 0.1); // 眼球尺寸缓慢增加\\n            leftRotSize === 360 ? (leftRotSize = 0) : (leftRotSize += 0.1);\\n        }, 10);\\n    })\\n})\\n```\\n\\n添加了这样一个监听事件后，咱们的大眼就已经具备了自我调整的能力了：\\n\\n<p align=center><img src=\\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3af09618a4514bfabded2ddf960fc4d4~tplv-k3u1fbpfcp-watermark.image?\\\" alt=\\\"back.gif\\\"  width=\\\"70%\\\"/></p>\\n\\n### ✨ 生命仪式：工作状态\\n\\n接下来就到了大眼重中之重的环节，也就是大眼的**工作状态**。\\n\\n在下给大眼的工作非常简单，就是单纯的盯住在下的鼠标，如果各位想给各自的大眼一些其他的功能，可以自己发挥。\\n\\n盯住鼠标，不只是说说而已，那么怎么样才能让大眼表现出他已经盯住了呢？\\n\\n在下的思路是：\\n\\n1. 以大眼的位置为原点建立一个直角坐标系\\n2. 然后通过监听鼠标移动事件，获取鼠标所在位置，计算出鼠标处于大眼坐标系的坐标。\\n3. 将整个视口背景以X轴和Y轴进行等分成无数个旋转角度，通过鼠标坐标的数值和正负来**调整大眼眼框和眼睛的Y轴和Z轴旋转**，从而达到盯住鼠标的目的。\\n\\n好的，咱们理清思路，接下来就是付诸于行动。\\n\\n```js\\n// ...其他代码\\n// 工作\\nfunction focusOnMouse(e) {\\n    {\\n        // 视口尺寸，获取到整个视口的大小\\n        let clientWidth = document.body.clientWidth;\\n        let clientHeight = document.body.clientHeight;\\n        // 原点，即bigEye中心位置，页面中心\\n        let origin = [clientWidth / 2, clientHeight / 2];\\n        // 鼠标坐标\\n        let mouseCoords = [e.clientX - origin[0], origin[1] - e.clientY];\\n\\t\\t// 旋转角度\\n        let eyeXDeg = mouseCoords[1] / clientHeight * 80; // 这里的80代表的是最上下边缘大眼X轴旋转角度\\n        let eyeYDeg = mouseCoords[0] / clientWidth * 60;\\n        bigEye.style.transform = `rotateY(${eyeYDeg}deg) rotateX(${eyeXDeg}deg)`;\\n        eyeball.style.transform = `translate(${eyeYDeg / 1.5}px, ${-eyeXDeg / 1.5}px)`;\\n    }\\n}\\n```\\n\\n> 注意： 如果觉得旋转角度不够大，可以调整代码中的`80`和`60`，最大可以到180，也就是完全朝向，但是由于大眼终归是一个平面生物，如果旋转度数过大，就很容易穿帮，如果旋转角度为180，大眼就会在某个方向完全消失看不见（因为大眼没有厚度，这个也许是可以优化的点），所以个人喜好调整吧。\\n\\n咱们来看看大眼工作时的飒爽英姿：\\n\\n<p align=center><img src=\\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f87570020bf94bc5a43406881b6957b9~tplv-k3u1fbpfcp-watermark.image?\\\" alt=\\\"watching.gif\\\"  width=\\\"70%\\\"/></p>\\n\\n### ✨ 生命仪式：懒惰状态\\n\\n顾名思义，**懒惰状态**就是......懒惰状态。\\n\\n在下给大眼设计的懒惰状态就是当在下的鼠标超过`30秒`没有移动时，大眼就会进入**休眠状态**。\\n\\n所以**生命仪式**的最后收尾其实非常的轻松，没有大量的代码，只需要添加一个定时器，然后修改**休眠状态**的代码，将大眼的所有参数初始化即可。\\n\\n```js\\n// ...其他代码\\nlet sleepTimer; // 休眠定时器\\n\\n// 休眠\\nfunction toSleep() {\\n    // ...其他操作\\n    document.body.removeEventListener('mousemove', focusOnMouse); // 移除鼠标移动事件\\n    bigEye.style.transform = `rotateY(0deg) rotateX(0deg)`; // 大眼归位\\n    eyeball.style.transform = `translate(0px, 0px)`; // 眼睛归位\\n}\\n// 工作\\nfunction focusOnMouse(e) {\\n    // ...其他操作\\n    // 设置休眠\\n    if (sleepTimer) clearTimeout(sleepTimer); // 如果休眠定时器已经被设置，则清除休眠定时器\\n    sleepTimer = setTimeout(() => { // 重新计时\\n        toSleep();\\n    }, 30000);\\n}\\n```\\n\\n**感谢上次掘金官方的提醒，在下把线上代码贴在这，在下文笔较差，看不下去的同学可以直接过来玩一玩，感兴趣再去创建自己的大眼。（没有点运行的不要来问我为什么出不来！！！）**\\n\\n[代码片段](https://code.juejin.cn/pen/7132406758995132428)\\n\\n**如果自己在码上掘金动手的同学记得不要忘记添加echarts资源**\\n\\n<p align=center><img src=\\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c21c5ea9b013448e959e0ad89971d05b~tplv-k3u1fbpfcp-watermark.image?\\\" alt=\\\"image.png\\\" width=\\\"100%\\\" /></p>\\n\\n\\n\\n### 💐 结语\\n\\n好家伙，原来再写一遍大眼会这么累，这次是真真正正的“玩”了一天，有功夫的各位同僚也可以去玩一玩，于在下的基础上进行完善，创造出属于各位自己的大眼。当然如果有一些比较好玩的动效也可以留言告知在下，当下次混工作量时在下可以有东西写。\\n\\n就这样！\\n\\n<p align=center><img src=\\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6dd3ca20336e4e50ba42cc50bb1d25ab~tplv-k3u1fbpfcp-watermark.image?\\\" alt=\\\"image.png\\\"  width=\\\"50%\\\"/></p>\\n\\n\\n\\n\\n"
    },
    {
        "article_id": "7141021800624095246",
        "cover_image": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f92f5b6e10e41a5a66fe7b6a007401a~tplv-k3u1fbpfcp-watermark.image?",
        "title": "如何应对核心员工提离职？",
        "brief": "最近一年互联网行情不好，很多大厂都在裁员，但裁员并不是不要人做事了。原来你这个岗位10个人做，企业有钱赚养得起，现在企业不怎么赚钱了，只能养4个人了。那么会有六个被裁掉。",
        "ctime": "1662648720",
        "mtime": "1662649078",
        "user_name": "石云升",
        "avatar": "https://p3-passport.byteacctimg.com/img/user-avatar/6c635cfd69c6df18e557000fe4719e2e~300x300.image",
        "content": "---\\ntheme: channing-cyan\\n---\\n我报名参加金石计划1期挑战——瓜分10万奖池，这是我的第6篇文章，[点击查看活动详情](https://juejin.cn/post/7138637426922094605 \\\"https://juejin.cn/post/7138637426922094605\\\")\\n\\n最近一年互联网行情不好，很多大厂都在裁员，但裁员并不是不要人做事了。原来你这个岗位10个人做，企业有钱赚养得起，现在企业不怎么赚钱了，只能养4个人了。那么会有六个被裁掉。这时候对企业价值最大的4个人会被留下。也许因为人更少了，反而工资还会有所提升。\\n\\n越是大公司，人员越冗余。开掉一批人对项目进度影响其实不大。但如果掌握核心技术的员工离职，可能项目真的就黄了。\\n\\n我朋友老张最近就跟我抱怨他公司技术能力最强的哥们要离职。根据他的描述，这离职的哥们属于1个打10个那种。公司里有些问题只有他能解决，公司一直想要培养个接班人，但大多数都只学到了点皮毛。现在就问我该怎么办？所以，今天就和大家聊聊这个话题。\\n\\n企业最怕的就是最优秀的那批员工离职。而且这部分人只要提了离职基本上就很难挽回了。\\n\\n## 为什么会离职？\\n\\n为什么环境这么差，还有人会主动离职？因为环境再差，总有一些企业还在招人，越是对能力要求高的岗位，越难招。所以，那些真正优秀的人才是不用担心工作问题的。\\n\\n马云曾说员工提离职，就两个原因，钱给少了，或者心受委屈了。其实还有一类，是工作不能给自己带来成长了。 很多人对工作追求的是成长，是获得尊重、获得一些更高级的意义。你想要挽回对方，首先得弄清楚对方离职的原因。不过这种时候，大概率已经找我下家了。\\n\\nPS：绝不建议大家裸辞，除非你是准备离职后休息两月。但就算要休息两月，也记得找人把社保交了，别断社保哈。\\n\\n## 能不能留下来？\\n\\n不管对方是否找好下家，作为公司管理者还是要去做努力争取对方留下，万一对方还没有跟下家确定好，只是有意向呢？所以在对方提出离职后，不要去做正式离职沟通。先找理由拒绝，然后约个时间私下里做一次沟通。可以找个地方，边吃饭边聊天。\\n\\n在这个私下沟通的场景下要表示不希望对方离开，要是遇到了什么难处可以如实说。如果是薪资这块问题，差别太大你可能拿不定主意。但如果是因为什么工作太忙，家里事情很多这类问题。完全可以拍板让对方调整工作时间。\\n\\n这里我讲一个案例，以前有个朋友跟我说，公司太卷了，最近感觉身体不行了。所以准备离职换个轻松点的工作环境？我说：“啥叫轻松点的工作环境”\\n\\n他说：\\\"每天能正常下班，不用经常加班熬夜。这样我就能有更多时间睡觉，还能抽出一部分时间出来健身啥的。\\\"\\n\\n我问：“那为什么不在现在公司里就调整下工作时间呢？”\\n\\n他说：\\\"公司这么忙，我要这么做，老板估计也会开了我的\\\"。\\n\\n我反问说：“你都要离职了，还怕他辞退啊”\\n\\n就这样过了一年，对方也没离职，工作也没耽误。工作时间越长并不表示工作效率越高。我真的建议很忙的人能抽出一部分时间来冥想，每天10多分钟就行，让自己脑袋空一下。你会获得很多不一样的收获。\\n\\n## 需要我做什么？\\n\\n如果对方已经下定决定要走了，那么还可以问对方，现在自己能够做点什么。如果对方希望早点走完流程，那就帮忙让流程走快点。当然，流程走快了，后面接手人肯定会有问题还会请教你，这点可以直接说。\\n\\n如果对方对未来也有迷茫，有犹豫。那么作为管理者，你肯定也有着丰富的见识，在自己能力范围内的话，帮助对方去分析利弊，提供建议参考。\\n\\n员工离职，特别是核心员工离职，管理者可能会有点生气。毕竟会影响到自己的项目。但把格局放大，未来就没有再合作的机会？现在很少一个人会在公司呆一辈子。人来人走是平常。现在离开，未必不会再回来。虽然现在留不住人，但我可以留心。你以真诚待人，别人也会真诚待你。\\n\\n我记得在《联盟》这本书里说过，很多大公司都有前员工联盟，公司里有专门人进行管理。好处很多。\\n\\n首先前员工可以为企业带来声誉和良好的社会效应；\\n\\n其次前员工可以给企业引进人才；\\n\\n再次前员工还能给企业带来更多新的行业信息。\\n\\n甚至公司一些新的产品都可以给到前员工试用，你找其他人还需要培训，前员工就不需要。\\n\\n对于我们自己来说，我们是一起战斗过的战友。不管企业有没有正式组织，都应该常联系。\\n\\n## 有什么办法能避免核心员工提离职？\\n\\n### 1. 上工治未病，最好的方法就是不给对方提离职的机会。\\n\\n离职过的人都知道，从想离职到提出离职，中间是有很长的时间的。而且在这个过程中，总会露出一些异常的行为。比如，开始抱怨公司的某件事情；在一些以前经常发表建议的场景下，变得不爱沟通，该怎样就怎样吧；工作没精神，不再主动推进某些工作等等。反正总会有点异常。作为管理者，如果你不能提前发生这些异常，那是失职了。你可以说自己很忙，但再怎么忙，都要抽出时间来关注这些核心员工。不仅仅是工作状态，还有家庭状态。你要是真关心员工，什么问题都好解决。\\n\\n### 2. 把核心员工跟项目收益做强绑定，增加离职成本。\\n\\n管理者不仅要会画饼，还要会分饼。如何分饼决定了饼的大小。既然都说对方是核心员工了，那么就应该让对方享受到同样的待遇。公司现在没这么多钱没关系，拿出部分期权、股权总可以吧。做成了，大家一起赚钱，失败了，是我们没做好，咱也认。\\n\\n### 3. 核心员工要离职创业？行。我投资\\n\\n核心员工如果愿意舍弃这么好的收益去创业，那么作为公司为什么就不能参与进去呢？既然挡不住，那我就不挡了。我大大方方的把投资方案公布出来。你想离职创业？可以，有好项目，我们公司愿意做你的天使投资人。如果项目真的好，那么公司赚了。如果项目不好，帮对方分析弊端，也许对方就不离职了。都是好事。\\n"
    },
    {
        "article_id": "7125316471260971016",
        "cover_image": "",
        "title": "这10 个很“哇塞”的Web资源，前端必备的神仙级网站",
        "brief": "毋庸置疑，善用工具可以加速开发，拉满开发效率，减少996的频率，提高我们的生活质量。 在此，为前端工友们分享10个我压箱底的Web资源，收藏≠学会，赶紧用起来吧！ 1.Github （https://",
        "ctime": "1658992036",
        "mtime": "1658993987",
        "user_name": "摹客",
        "avatar": "https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/6/11/163ecafe1172d9bf~tplv-t2oaga2asx-image.image",
        "content": "毋庸置疑，善用工具可以加速开发，拉满开发效率，减少996的频率，提高我们的生活质量。\\n\\n在此，为前端工友们分享10个我压箱底的Web资源，收藏≠学会，赶紧用起来吧！\\n\\n  \\n\\n  \\n\\n1.Github\\n========\\n\\n（[https://github.com/](https://github.com/)）\\n\\n咱们普通人空闲时会想着刷刷朋友圈、微博、知乎来放松，然而大佬就不一样了，他们没事就逛逛Github。在日积月累中，这差距自然越来越大！\\n\\n其实，在我看来，初级工友和高级工友之间，最大的差距或许就是信息差导致的。\\n\\n逛逛Github，每天看看又开源了哪些好的前端项目，还有用到的主流前端技术栈又是什么，久而久之，多看多学，你的前端水平也会不断精进。\\n\\n网上有不少人分享从Github上扒下来超火的面试项目、CSS技巧项目等资源，在此我就不过多赘述了。\\n\\n总之，说起Github，咱们都耳熟能详，但每天或每周定时去逛逛，才是真道理！\\n\\n![图片](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a1f3eae16ff4e35969be0a230866651~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n  \\n\\n\\n\\n\\n2.Github镜像源网站\\n=============\\n\\n作为国内用户，我听很多工友都吐槽过访问Github很慢很慢，再加上访问Github需要科学上网，这又难倒了一群英雄好汉。\\n\\n所以，在这里给大家分享几个Github镜像源网站，亲测好用！\\n\\n*   [https://hub.fastgit.xyz](https://hub.fastgit.xyz)\\n    \\n*   [https://cdn.githubjs.cf/](https://cdn.githubjs.cf/)\\n    \\n*   [https://gitclone.com/](https://gitclone.com/)（仅支持git）\\n    \\n*   [https://hub.fastgit.xyz/](https://hub.fastgit.xyz/)（支持git）\\n    \\n\\n3.Undraw\\n========\\n\\n（[https://undraw.co/](https://undraw.co/)）\\n\\n在开发过程中，如果需要免费的SVG插图，那你一定不要错过Undraw！\\n\\n ![图片](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d3742a7ac1e409797ff0bdc96161a6d~tplv-k3u1fbpfcp-zoom-1.image) \\n\\nUndraw中包含了数百张风格一致的扁平化插画，在很多场合中，应用起来都毫无违和感。\\n\\n在挑选时，你除了可以一直往下滑以外，还可以在搜索框中输入关键字。\\n\\nUndraw默认提供了6种配色方案，也可以自定义颜色，下载支持PNG和SVG两种格式，均能免费商用，简直不要太NICE！\\n\\n ![图片](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f69c9ffac944f3aa2e929da36cf2a8b~tplv-k3u1fbpfcp-zoom-1.image) \\n\\n\\n\\n4.Errow404\\n==========\\n\\n（[https://error404.fun/](https://gitclone.com/)）\\n\\n当网站出现严重BUG或当用户输入错误网址时，总会有弹出404页面。\\n\\n如今404页面设计越来越具有创意性，例如Figma，在设计过程中，网页崩了？！没关系，404界面有拖拽的圆点，继续画呗，反正不耽误生产力！\\n\\n ![图片](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f4d029c085fc4d668a086ede5f8a4271~tplv-k3u1fbpfcp-zoom-1.image) \\n\\n看着这么多有意思的404界面，咱们务必得“卷”起来~所以，给大家安利一个找404页面素材的网站：Errow404。\\n\\n在开发时，给插画再加上炫酷动效，令人兴奋的404页面不就搞定了吗！\\n\\n![图片](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35482803dab04e9a907b4b25f5baa7d2~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n  \\n\\n\\n5.VueFastDev\\n============\\n\\n（[https://www.npmjs.com/package/vuefastdev](https://www.npmjs.com/package/vuefastdev)）\\n\\nVueFastDev是一套基于element-ui、Echarts等二次开发封装、模块化的前端UI组件库。\\n\\n它是一个低代码的前框框架，它使用JSON配置生成页面，可以减少我们的页面开发工作量，从而提升效率。\\n\\n ![图片](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b2fda7623d34eff9ed755ce870a1d70~tplv-k3u1fbpfcp-zoom-1.image) \\n\\n除了低代码模式外，VueFastDev还可以自动以组件来扩充组件，实际上VueFastDev可以当成普通UI库来使用，实现90%低代码操作环境！\\n\\n  \\n\\n  \\n\\n6.Shape Divider\\n===============\\n\\n（[https://www.shapedivider.app/](https://www.shapedivider.app/)）\\n\\n为了让页面能整洁美观，相信各位工友没少用分割线处理吧。\\n\\nShape Divider是一款免费的Web应用程序，使用自定义代码就能快速导出精美的预制SVG格式的形状分割器。\\n\\n选择分割线的形状、颜色、高度、宽度，勾选是否翻动、倒置、顶部/底部设置即可，半分钟就能轻松搞定一个精美的形状分割器！\\n\\n ![图片](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1bb3afe847c9436989f93c0446142c66~tplv-k3u1fbpfcp-zoom-1.image) \\n\\n  \\n\\n\\n7.摹客\\n====\\n\\n（[https://www.mockplus.cn/idoc/developer](https://www.mockplus.cn/idoc/developer/?hmsr=juejin)）\\n\\n想问各位工友一句：你们公司UI有没有经常找你掰扯还原度低的问题？\\n\\n一会因为标注，一会又因为切图，大半天的时间都耗在跟UI的沟通对接上，开发效率能提起来才是怪事！\\n\\n但自从我们公司UI用摹客交付设计稿后，每天找他扯皮的时间少了很多，双方都乐得清净。\\n\\n![图片](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21305d638f434097904a129b7387d7ab~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n现在，UI也无需再给我打包切图文件，我直接在摹客中就能自主切换平台（iOS/Android/Web）、选择倍率、下载不同格式（PNG/WebP/SVG/JPG）的切图。\\n\\n而且还能提前将切图压缩好后再打包下载，省时省力，提高开发效率！\\n\\n![图片](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0b225b0eee24f91a530b18dcf987e9f~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n标注也能在设计稿中自动获取，甚至连设计稿中的图层样式，都能在摹客中一键复制。该说不说，在团队协作这一块，摹客真的赢麻了！\\n\\n ![图片](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9ac11ca514a433abdea5d64697daba7~tplv-k3u1fbpfcp-zoom-1.image) \\n\\n  \\n\\n\\n8.语雀\\n====\\n\\n（[https://www.yuque.com/](https://www.yuque.com/)）\\n\\n现在越来越多的碎片化信息充斥着我们的生活，公众号文章、社区论坛帖子、知乎问答、抖音视频……\\n\\n虽然我们接收着这么多的信息，但真正被我们沉淀下来，转化为自身能力的知识又有多少呢？\\n\\n所以，给大家推荐一个文档和知识协同工具：语雀。\\n\\n个人笔记、待办List、生活备忘录、会议记录、项目文档、需求管理……无论是个人笔记，还是团队资料，都能在语雀中得到整理归纳。将这一系列的内容整合后，就是我们自身的一笔财富！\\n\\n![图片](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9353492aeae149d5b25b0e29de2a5a43~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n  \\n\\n9.阿里巴巴矢量图标库\\n===========\\n\\n（[https://www.iconfont.cn/](https://www.iconfont.cn/)）\\n\\n项目需要紧急上线时，UI连图标icon都没画出来，要你自己先想办法搞定，这事你遇到过没？\\n\\n其实这事没那么复杂，iconfont中提供了海量的矢量图标合集，为大家提供了图标下载、在线存储、格式转换等功能。\\n\\n![图片](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83a36bdaed2d4c118d0046f332597602~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n不愧是阿里巴巴团队倾力打造，图标的质量都很高。\\n\\n图标支持AI/SVG/PNG/代码格式下载，所以，即使前端工友们不会设计，也能下载了图标后直接拿来就用，相当高效！\\n\\n![图片](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34948fdc7eaf4b14bb4cc74409de0e65~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n  \\n\\n10.Microsoft To Do\\n==================\\n\\n（[https://todo.microsoft.com/](https://todo.microsoft.com/)）\\n\\n互联网行业节奏向来很快，而我们身为一名互联网人，得把时间管理刻进骨子里，所以，给大家推荐一个我常用来进行时间管理的工具，Microsoft To Do。\\n\\nMicrosoft To Do默认的清单设置有“我的一天”、“重要”和“To do”三个清单分类，界面简洁清爽，很容易上手。\\n\\n而且Microsoft To Do完全免费，支持Windows、macOS、Android、iOS等多个平台，因此我们可以在任意设备上管理自己的任务，十分方便~\\n\\n到晚上时，看着清单上的一项项任务都被划掉，相当有成就感！\\n\\n![图片](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14fc0883107e42d88780234115f7d54a~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n好了，以上就是本次的全部分享，吐血整理，希望大家点赞鼓励~\\n\\n评论区也给我推荐一波你们觉得好用的工具吧！\\n\\n  "
    },
    {
        "article_id": "7113747501198344228",
        "cover_image": "https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90ffab6417f743489311f5cc1c7c75ee~tplv-k3u1fbpfcp-watermark.image?",
        "title": "一个40岁老程序员的2022年中总结 - 四十不惑，不忘初心",
        "brief": "2022年对我来说是里程碑的一年，因为就在今年五月，我正式年满四十岁，成为了一名在某些贩卖焦虑的 IT 自媒体笔下的面临 \"年龄危机\" 的老程序员。",
        "ctime": "1656298427",
        "mtime": "1656404801",
        "user_name": "JerryWang_sap",
        "avatar": "https://p3-passport.byteacctimg.com/img/user-avatar/0e2d882d341c23df275c42768c0deefa~300x300.image",
        "content": "---\\ntheme: channing-cyan\\n---\\n\\n「时光不负，创作不停，本文正在参加[2022年中总结征文大赛](https://juejin.cn/post/7108989863126368286 \\\"https://juejin.cn/post/7108989863126368286\\\")」\\n\\n2022年对我来说是里程碑的一年，因为就在今年五月，我正式年满四十岁，成为了一名在某些贩卖焦虑的 IT 自媒体笔下的面临 `年龄危机` 的老程序员。\\n\\n一转眼，2022 年又快过去一半了。借着参加掘金社区`2022年中总结征文大赛`的机会，我把自己这过去的半年经历，简单做一个复盘。\\n\\n# 我上半年的日常工作和技术写作生活\\n\\n我于 2007 年 7 月，在电子科技大学计算机系统结构专业硕士毕业后，加入了 SAP 成都研究院，成了一名应用开发程序员。SAP 是一家总部位于德国的软件公司，主要从事企业管理软件领域的开发。十五年过去了，我也很光荣地拿到了 SAP 给工作超过十年以上的员工颁发的纪念奖杯，如下图所示：\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a75e4a48e2a84328afccafe3120c4971~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n我十五年的工作生涯，当然也不止一次思考过自己的职业规划和未来的职业发展方向。关于`国内`程序员 35 岁以后的出路，网络上已经有很多讨论了，不外乎以下几条：\\n\\n- 自己创业\\n- 继续做一名程序员，成为技术专家\\n- 转型成项目经理、产品经理、质量工程师、架构师等软件开发流程中的其他角色\\n- 转行，离开程序开发行业\\n\\n对我来说，一件幸运的事情是，毕业之后尽管在同一家公司已经做了15年的软件开发，但如今的我对技术的热情，和我第一天正式入职相比，并没有减弱多少。所以我觉得，继续坚持在一线做开发，努力成为技术专家，是最贴合我实际情况的职场之路。\\n\\n到 2020 年之前，我从事的一直都是偏后端的开发，使用的是 ABAP，Java 和 Node.js 这些偏后端的编程语言和技术栈。2020年 8 月，由于工作变动，开始接触 Angular 和 TypeScript，工作方向也转移到了前端开发领域，一直做到现在。我现在的日常工作，是开发一款代号为 Spartacus 的 SAP 电商云前台 Storefront 应用：\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5253c38e723240018df362752608649a~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03ff3989d81a4c58a04028ec55e4b83d~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n我还记得刚刚从后端转到前端时，由于十几年根深蒂固的后端开发思维，对前端开发的有些理念，尤其是对 Angular 框架里重度使用的响应式编程框架 RxJs 很不适应，也被后者陡峭的学习曲线(至少对于我来说很陡峭)折磨过。所幸我所在团队里有不少才华横溢的 Angular 开发工程师，并且乐于助人，在他们的帮助下，我逐渐找到了前端开发的一些感觉。而我之前一直用 ABAP 和 Java 开发后端，对于现在 Angular 里的装饰器、注解，依赖注入等概念也觉得非常亲切。\\n\\n2022 年年初到现在，使用 Angular 完成日常工作之余，我陆陆续续看完了两本 Angular 开发的纸质书，把 Angular 官网的教程和文档都过了一遍，最近在研读一本名叫《深入浅出 RxJs》的中文书。\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff66f0da1c264f3aac981d0f738223b3~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n尽管很多 RxJs 高手可能觉得其官网的文档和 Demo 更权威更有帮助，我由于水平有限，还是更喜欢看这本国内专家用中文写的书，适合自己的才是最好的。\\n\\n笔者一直保持着通过技术博客将自己所学的知识输出的习惯，这些年在国内外各大技术社区也发表了一些技术文章。\\n\\n感谢掘金社区的支持，授予了我`优秀创作者`的称号：\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18b3e9dac236459198c5941aec6cac11~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n我知道自己输出的前端开发的文章，从内容深度上来说，肯定不能和掘金社区上的前端大神相比，然而我也确实没有和人比较的念头，输出这些文章的初衷是记录自己工作中遇到的疑难点，同时希望能够帮助一些遇到和我同样问题的初学者们。我已经年满四十，早已过了爱争强好胜和人暗自较劲的年龄了，只要自己每天和前一天相比，都有点滴进步，我也就满足了。\\n\\n我今年也积极参加了掘金社区一些活动，下面是我获得的一些纪念品。\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd37faef3af64490867cb1ffc440be94~tplv-k3u1fbpfcp-zoom-1.image)\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/10a9879958d94b4d8e62cc575e7f34c8~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n# 年满 40 岁之后对技术学习方式的一些思考\\n\\n今年上半年我也在不断思考，觉得自己将来技术学习的方式需要持续做出一些转变方法，记录如下。\\n\\n## 不再只拘泥于具体的源代码细节\\n\\n在我从25岁硕士毕业参加工作到35岁这期间，我觉得是一个程序员潜心钻研技术的黄金十年：精力充沛，业余时间多，学习能力强。在我过去的十年里，我觉得我对待技术的态度上有点像强迫症患者，对于一个技术点，除了了解它的设计原理和架构之外，我还喜欢从源代码的层级去研究。我毕业后加入 SAP 从事的头几个产品开发，都是基于 ABAP 技术栈的，产品的每一行源代码对于开发者来说都可见。这极大地满足了我对这些产品实现源码的好奇心，让我一头扎进了代码的汪洋大海，也养成了我遇到问题就喜欢从源代码层级分析的习惯。\\n\\n随着我工作内容的变化，从相对比较封闭的 ABAP 技术栈，切换到了更加开放，甚至拥抱开源的技术领域，比如云原生开发，CloudFoundry，Docker，Kubernetes，Node.js，Angular 等技术上来，我逐渐发现自己过去那种基于源代码级别的学习方式已经不再是一种有效或者说现实的方法了，原因有二：\\n\\n1. 程序员年满35岁，成家立业，结婚生子之后，客观上不太可能再有像以前单身时那样，有大块大块的空闲时间能静下心来研读源码。人到中年，上有老，下有小，程序员的业余时间太容易被生活中其他事情所占据了。\\n\\n2. 当今的开源产品或者说工具库，其实现复杂度和代码量，已经远远超过了某一个程序员能够掌握的范畴了。即便是某个开源项目的贡献者本身，他/她们熟悉的也只是自己共享的那一个模块的部分代码。 \\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f08617fa6b544e97938681c2623070ed~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n以 Kubernetes 的使用为例，遇到错误消息时，按照我过去的做法，我会尝试根据错误消息的文本，去搜索 Kubernetes Github 上的源代码，找到哪些源代码里有可能会抛出这个错误消息。现在我觉得更有效的方法，当然是 Google 或者 StackOverflow 上搜索线索，因为这么流行的技术平台，我们遇到的问题，大概率早就有其他同行遇到过了，网友们的分析和解决方案，对我们的问题排查来说有极大的借鉴意义。\\n\\n同样，在学习一个新技术 & 框架时，放在过去，我会先把它的 quick start / demo / tutorial 找到，尽快在自己本地搭一个环境，弄一个可以运行的例子出来，然后再从源代码层面开始学习。现在的我会老老实实从这些新技术的官网的 Overview 页面开始读起，了解这个新技术诞生的缘由，解决了什么业务痛点，主要的组成模块，设计架构等等。我觉得一个40岁的程序员，和30岁的程序员，20岁的程序员，对同一项技术的关注点理应有所不同。20岁的程序员，关注的更多的是技术的具体实现细节和使用方式。40岁的程序员，更多应该关注的技术背后的一些深层次东西，比如这些技术，如何才能更好地融入到自己公司所负责的业务和产品中去，如何才能给客户带来更多的价值？\\n\\n更现实一点的问题就是，我现在40岁，在这家公司工作了15年，我和公司现在刚入职的25岁年轻程序员相比，我作为一个老程序员，我的价值和核心竞争力到底体现在哪些地方？这个问题也是我工作过程中一直在思考的问题。\\n\\n## 学会取舍，学会做减法\\n\\n在我刚刚成为一名年轻的程序员时，我曾经误以为，一个程序员会使用的编程语言、编程工具越多，运用的技术越流行，掌握的技术栈越熟练，这个程序员就越优秀。在这种想法的驱动下，我尽可能多地去尝试新的编程技术和工具，不管这些东西在自己工作中是否能应用得上。每天泡各种技术论坛，一看到介绍新鲜技术和工具的帖子，马上在自己本机上尝试。坚持了一段时间之后我发觉，即便这样做，也没有成为自己心目中“优秀的程序员”的样子。反而因为很多新技术只是浅尝辄止，在工作中没有运用上，成了屠龙之技，所以一段时间过后就遗忘得差不多了。\\n\\n因为笔者工作的 SAP 业务是开发企业管理软件，所以在工作一段时间深受这家德国企业的文化熏陶之后，我也慢慢领悟到，即便一项技术再先进和流行，如果它不能帮助公司的客户解决其业务上的痛点，无法给客户带来实际的价值，无法帮助自己在职场进阶之路上走得更顺畅，那么我在下决定业余时间去学习它之前，就应该慎之又慎，因为大龄程序员的业余时间实在太宝贵了。\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d338670c4f524b37bc9e911b5599866d~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n因此我这一章节副标题的学会取舍和做减法，就是想提醒自己，在新的开发技术和开发理念不断涌现的大环境下，大龄程序员对于分配自己业余时间用于技术充电这一点上，一定要慎之又慎。好钢用在刀刃上，优先投资那些能给自己的职业发展和公司业务带来助力的技术上。\\n\\n以上自言自语了这么长的篇幅，感谢大家耐心看完一个40岁中年男人的碎碎念。笔者希望自己能够不忘22年前高考填志愿选择计算机专业时的初心，希望自己能够在迈入四十岁大关之后，能真正做到四十不惑。笔者也祝愿各位程序员同行，在 2022年下半年里能够工作顺利，技术上更上一层楼，感谢阅读。\\n\\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08ea1f033dda4e2ba3280391d02a8d09~tplv-k3u1fbpfcp-zoom-1.image)\\n"
    },
    {
        "article_id": "7113502041342738439",
        "cover_image": "",
        "title": "短短1个小时，让公司损失近3万",
        "brief": "这是一个悲伤的故事，也是教训最深刻的一次。发生在2022年1月份，春节前几周。在聊这个事之前，我想借用美团的一个案例作为切入点。 （我们公司不是美团的这种业务，但也利用了会员发券这种机制，都是在待支付",
        "ctime": "1656241521",
        "mtime": "1656314265",
        "user_name": "苏世_",
        "avatar": "https://p9-passport.byteacctimg.com/img/user-avatar/7be56cc0c7c89d14005ec33559fa75cf~300x300.image",
        "content": "---\\ntheme: channing-cyan\\n---\\n\\n「时光不负，创作不停，本文正在参加[2022年中总结征文大赛](https://juejin.cn/post/7108989863126368286)\\n\\n这是一个悲伤的故事，也是教训最深刻的一次。发生在2022年1月份，春节前几周。在聊这个事之前，我想借用美团的一个案例作为切入点。 \\n\\n（我们公司不是美团的这种业务，但也利用了会员发券这种机制，都是在待支付勾选会员产生待使用的券，最后选择使用，这里我就拿美团来讲）\\n\\n\\n先来看下面这幅图，大家点外卖再熟悉不过的一个页面！\\n\\n\\n\\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d1b3e01aeb24608bda8ebc0b4ba8202~tplv-k3u1fbpfcp-watermark.image?)\\n\\n\\n当勾选开通会员时，系统会自动给你发6张优惠券（取消勾选，则6张券消失）\\n\\n\\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9dcc053978b4f9da13a644a6f65c455~tplv-k3u1fbpfcp-watermark.image?)\\n\\n那么问题来了，这6张券是怎样的一种方式存在？\\n\\n> 因为这里要考虑到，用户勾选只是勾选，还没有真正的发到用户钱包里，只有用户支付了，才能真正给用户发送，这里面就牵扯到这个临时数据怎么处理更好\\n\\n我想了想，无非三种\\n    \\n   - 前端自己生成数据，给后端规约传参\\n   - 后台落noSql，用户在选择券的时候，后台查询优惠券接口会把noSql里的东西也带上\\n   - 后台存关系型数据库，这里就会牵扯到太多的垃圾数据，因为很多用户可能只是勾选，并不会购买\\n   \\n   \\n   大的方面应该就这三种，至于细节，那各凭本事，看谁处理的好。\\n   \\n   \\n## 最难的需求\\n\\n时间拉回到今年1月份，这是春节前最悠哉的时光，年终奖都定好了！\\n\\n\\n忽然开会说要在待支付界面引入会员机制，周期为一周，快速上线，要先看数据。根据数据节后再做调整。没给开发留一点点评估的时间，还没容得上我们说话，就。。。。\\n\\n\\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e66bc4999bc497c98a5f79b9e75cbd9~tplv-k3u1fbpfcp-watermark.image?)\\n\\n这里简单说下需求吧：\\n\\n**平台会员原来就有，只是没有介入到待支付，原来购买平台会员发两张券，这次到待支付要根据用户不同的属性发送不同的券，张数也不尽相同**\\n\\n\\n作为产品部的技术负责人，在这个周期范围内，首要做的就是看如何快速上线，我和产品商量砍了很多需求，原型设计上的很多细节都包括在内，否则干死都不一定能上线（天下产品都一样，研发不硬，产品必欺。但这次是运营是拿着尚方宝剑给产品下的命令，时间既然是不能变的，那就只能把需求点减到最少）\\n\\n\\n\\n\\n就这样，技术方案用了最简单的，也是最不安全的，没错，全部交给前端去生成券的数据。金额都是写死的，说白了，就是前端按照ui图出的，后台没有出接口，因为在整体支付流程还有大量工作需要因为平台会员的介入而有大量工作（别说不专业，没办法）。\\n\\n\\n\\n所以，减免多少钱，是由前端传的（这里可能很多人会笑话我，因为没有一家是前端传金额的，是的，我们做了）\\n\\n\\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ef6aca2f24c4073bd613d6a31b04e3a~tplv-k3u1fbpfcp-watermark.image?)\\n\\n\\n看到这里肯定有人说，虽然不合理，但是应该也不会有大问题啊。\\n\\n\\n可是问题就是爆发出来了。我们有一种券，叫”全免券“，就可以免掉本次费用。前端因为很多数据写死了，结果这个全免券没有考虑进去。测试当时测试的时候也忽略了，导致线上在某种情况下会走全免券的机制\\n\\n\\n\\n## 黑色星期五\\n\\n我们任何上线的时间都会定到周四晚上，因为周四升级，周五如果有问题，可以处理回退。\\n\\n\\n清晨睡的正香，电话响了，一看群里，炸锅了。我们的用户端主要是微信小程序，了解的都知道有个审核期，后台服务晚上升级好之后，小程序是早上运维给审核通过的。\\n\\n\\n结果运营早上看到很多数据，好多用户支付都是0元，对比一看全都购买过平台会员。顿时我就没有了睡意，赶紧通知运维把小程序回退到上一个版本（幸亏后台接口兼容处理得当）\\n\\n\\n*问题就是A类用户在B种情况下，传到后台就是走全免券的逻辑。*\\n\\n顿时“精神抖擞”的我收拾收拾背包去公司了\\n\\n\\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46e14b5b4d644c68981cda37e38e72eb~tplv-k3u1fbpfcp-watermark.image?)\\n\\n\\n\\n最后好像运营给出一个数据，3万左右。我私下里也大概算了下。。。。。。\\n\\n年终奖整个team都削了点，包括我们部分老大，包括测试。主要责任在我，方案是我定的，确实不是最佳选择。\\n\\n## 总结教训\\n\\n\\n这确实是我入行以来最大的bug，作为负责人没有处理好可能出现的问题，从方案到落地，需要慎之又慎。\\n\\n\\n协调各部门，统筹方案。 \\n\\n\\n也给产品和运营个教训吧。就说到这里吧，希望给大家点经验，祝大家写不出八阿哥\\n"
    }
]